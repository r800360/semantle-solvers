DEBUG:src.train:Episode 1: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 1: Target words: ['apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5305, 0.4695],
        [0.5305, 0.4695],
        [0.4514, 0.5486],
        [0.5305, 0.4695],
        [0.4514, 0.5486],
        [0.5305, 0.4695],
        [0.4514, 0.5486],
        [0.5305, 0.4695],
        [0.5305, 0.4695],
        [0.5305, 0.4695]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6339, -0.7562, -0.6004, -0.6339, -0.6004, -0.7562, -0.7953, -0.6339,
        -0.7562, -0.7562], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [ True  True  True  True  True False False False False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5918, 0.4082],
        [0.5136, 0.4864],
        [0.5136, 0.4864],
        [0.5918, 0.4082],
        [0.5136, 0.4864],
        [0.4757, 0.5243],
        [0.5548, 0.4452],
        [0.5548, 0.4452],
        [0.4757, 0.5243],
        [0.5136, 0.4864]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.5245, -0.7207, -0.7207, -0.8961, -0.6664, -0.6457, -0.8092, -0.8092,
        -0.7429, -0.6664], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [ True  True  True False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5918, 0.4082],
        [0.5136, 0.4864],
        [0.5136, 0.4864],
        [0.4757, 0.5243],
        [0.5548, 0.4452],
        [0.4757, 0.5243],
        [0.5136, 0.4864],
        [0.5136, 0.4864],
        [0.5918, 0.4082],
        [0.5548, 0.4452]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.8961, -0.6664, -0.7207, -0.7429, -0.5892, -0.6457, -0.7207, -0.7207,
        -0.5245, -0.5892], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [False False  True  True False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4757, 0.5243],
        [0.5548, 0.4452],
        [0.5136, 0.4864],
        [0.5918, 0.4082],
        [0.5548, 0.4452],
        [0.4757, 0.5243],
        [0.5136, 0.4864],
        [0.5136, 0.4864],
        [0.5918, 0.4082],
        [0.5548, 0.4452]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.7429, -0.5892, -0.7207, -0.8961, -0.8092, -0.7429, -0.7207, -0.6664,
        -0.5245, -0.8092], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [ True False  True False  True  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5918, 0.4082],
        [0.5548, 0.4452],
        [0.5136, 0.4864],
        [0.4757, 0.5243],
        [0.5136, 0.4864],
        [0.5918, 0.4082],
        [0.5136, 0.4864],
        [0.5548, 0.4452],
        [0.5918, 0.4082],
        [0.5136, 0.4864]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.5245, -0.5892, -0.7207, -0.7429, -0.7207, -0.5245, -0.7207, -0.8092,
        -0.5245, -0.6664], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [ True False  True  True  True  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.6339, -0.7562, -0.6004, -0.6339, -0.6004, -0.7562, -0.7953, -0.6339,
         -0.7562, -0.7562],
        [-0.5245, -0.7207, -0.7207, -0.8961, -0.6664, -0.6457, -0.8092, -0.8092,
         -0.7429, -0.6664],
        [-0.8961, -0.6664, -0.7207, -0.7429, -0.5892, -0.6457, -0.7207, -0.7207,
         -0.5245, -0.5892],
        [-0.7429, -0.5892, -0.7207, -0.8961, -0.8092, -0.7429, -0.7207, -0.6664,
         -0.5245, -0.8092],
        [-0.5245, -0.5892, -0.7207, -0.7429, -0.7207, -0.5245, -0.7207, -0.8092,
         -0.5245, -0.6664]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 1: Cumulative reward: 17.945029705762863
INFO:src.train:Episode 1: Reward Differences: 5.7348425686359406
INFO:src.train:Episode 1: Average loss: 3.980574131011963
INFO:src.train:Episode 1: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 2: Input words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 2: Target words: ['apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4113, 0.5887],
        [0.4825, 0.5175],
        [0.4113, 0.5887],
        [0.4825, 0.5175],
        [0.4113, 0.5887],
        [0.4825, 0.5175],
        [0.4113, 0.5887],
        [0.4825, 0.5175],
        [0.4825, 0.5175],
        [0.4113, 0.5887]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.8885, -0.7288, -0.5298, -0.7288, -0.5298, -0.6588, -0.5298, -0.7288,
        -0.7288, -0.8885], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True  True False False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5281, 0.4719],
        [0.5281, 0.4719],
        [0.4287, 0.5713],
        [0.5004, 0.4996],
        [0.4287, 0.5713],
        [0.4561, 0.5439],
        [0.4561, 0.5439],
        [0.5281, 0.4719],
        [0.5281, 0.4719],
        [0.5004, 0.4996]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.7509, -0.7509, -0.8470, -0.6939, -0.5598, -0.7852, -0.6089, -0.7509,
        -0.6385, -0.6924], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [False False  True  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4287, 0.5713],
        [0.4287, 0.5713],
        [0.5281, 0.4719],
        [0.4561, 0.5439],
        [0.4287, 0.5713],
        [0.5004, 0.4996],
        [0.4561, 0.5439],
        [0.4287, 0.5713],
        [0.5281, 0.4719],
        [0.5004, 0.4996]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.8470, -0.8470, -0.7509, -0.6089, -0.8470, -0.6924, -0.6089, -0.5598,
        -0.6385, -0.6939], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True  True False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5281, 0.4719],
        [0.5281, 0.4719],
        [0.4287, 0.5713],
        [0.4561, 0.5439],
        [0.5281, 0.4719],
        [0.5004, 0.4996],
        [0.4561, 0.5439],
        [0.4287, 0.5713],
        [0.5281, 0.4719],
        [0.4561, 0.5439]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.6385, -0.6385, -0.8470, -0.6089, -0.7509, -0.6924, -0.6089, -0.5598,
        -0.6385, -0.7852], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True  True  True  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5281, 0.4719],
        [0.5281, 0.4719],
        [0.5281, 0.4719],
        [0.4561, 0.5439],
        [0.4287, 0.5713],
        [0.5004, 0.4996],
        [0.4561, 0.5439],
        [0.4287, 0.5713],
        [0.5281, 0.4719],
        [0.5004, 0.4996]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.6385, -0.6385, -0.6385, -0.6089, -0.8470, -0.6939, -0.7852, -0.5598,
        -0.7509, -0.6939], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True  True  True  True  True  True False False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.8885, -0.7288, -0.5298, -0.7288, -0.5298, -0.6588, -0.5298, -0.7288,
         -0.7288, -0.8885],
        [-0.7509, -0.7509, -0.8470, -0.6939, -0.5598, -0.7852, -0.6089, -0.7509,
         -0.6385, -0.6924],
        [-0.8470, -0.8470, -0.7509, -0.6089, -0.8470, -0.6924, -0.6089, -0.5598,
         -0.6385, -0.6939],
        [-0.6385, -0.6385, -0.8470, -0.6089, -0.7509, -0.6924, -0.6089, -0.5598,
         -0.6385, -0.7852],
        [-0.6385, -0.6385, -0.6385, -0.6089, -0.8470, -0.6939, -0.7852, -0.5598,
         -0.7509, -0.6939]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 2: Cumulative reward: 17.61358281970024
INFO:src.train:Episode 2: Reward Differences: 5.602263808250427
INFO:src.train:Episode 2: Average loss: 3.8921031951904297
INFO:src.train:Episode 2: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 3: Input words: ['apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 3: Target words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4795, 0.5205],
        [0.4795, 0.5205],
        [0.4084, 0.5916],
        [0.4795, 0.5205],
        [0.4795, 0.5205],
        [0.4795, 0.5205],
        [0.4795, 0.5205],
        [0.4795, 0.5205],
        [0.4084, 0.5916],
        [0.4795, 0.5205]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6530, -0.7350, -0.5249, -0.6530, -0.7350, -0.6530, -0.7350, -0.7350,
        -0.5249, -0.7350], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [False False  True False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4236, 0.5764],
        [0.4952, 0.5048],
        [0.4475, 0.5525],
        [0.4236, 0.5764],
        [0.5195, 0.4805],
        [0.4236, 0.5764],
        [0.5195, 0.4805],
        [0.5195, 0.4805],
        [0.4236, 0.5764],
        [0.5195, 0.4805]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.8590, -0.7029, -0.5933, -0.8590, -0.6549, -0.8590, -0.6549, -0.7329,
        -0.5509, -0.7329], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [ True False  True  True  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5195, 0.4805],
        [0.4952, 0.5048],
        [0.4475, 0.5525],
        [0.5195, 0.4805],
        [0.5195, 0.4805],
        [0.5195, 0.4805],
        [0.5195, 0.4805],
        [0.4236, 0.5764],
        [0.4236, 0.5764],
        [0.4236, 0.5764]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.7329, -0.6835, -0.5933, -0.7329, -0.7329, -0.6549, -0.7329, -0.5509,
        -0.8590, -0.8590], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [False  True  True False False  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4236, 0.5764],
        [0.4475, 0.5525],
        [0.4475, 0.5525],
        [0.4236, 0.5764],
        [0.4236, 0.5764],
        [0.5195, 0.4805],
        [0.4236, 0.5764],
        [0.4236, 0.5764],
        [0.5195, 0.4805],
        [0.5195, 0.4805]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.5509, -0.5933, -0.5933, -0.5509, -0.5509, -0.7329, -0.8590, -0.8590,
        -0.6549, -0.7329], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [False  True  True False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4236, 0.5764],
        [0.4475, 0.5525],
        [0.4475, 0.5525],
        [0.4236, 0.5764],
        [0.4236, 0.5764],
        [0.4236, 0.5764],
        [0.5195, 0.4805],
        [0.5195, 0.4805],
        [0.5195, 0.4805],
        [0.4236, 0.5764]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.5509, -0.8041, -0.8041, -0.5509, -0.5509, -0.5509, -0.7329, -0.7329,
        -0.6549, -0.8590], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [False False False False False False False False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.6530, -0.7350, -0.5249, -0.6530, -0.7350, -0.6530, -0.7350, -0.7350,
         -0.5249, -0.7350],
        [-0.8590, -0.7029, -0.5933, -0.8590, -0.6549, -0.8590, -0.6549, -0.7329,
         -0.5509, -0.7329],
        [-0.7329, -0.6835, -0.5933, -0.7329, -0.7329, -0.6549, -0.7329, -0.5509,
         -0.8590, -0.8590],
        [-0.5509, -0.5933, -0.5933, -0.5509, -0.5509, -0.7329, -0.8590, -0.8590,
         -0.6549, -0.7329],
        [-0.5509, -0.8041, -0.8041, -0.5509, -0.5509, -0.5509, -0.7329, -0.7329,
         -0.6549, -0.8590]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 3: Cumulative reward: 15.956348329782486
INFO:src.train:Episode 3: Reward Differences: 4.143897444009781
INFO:src.train:Episode 3: Average loss: 2.8580565452575684
INFO:src.train:Episode 3: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 4: Input words: ['apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 4: Target words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4630, 0.5370],
        [0.3995, 0.6005],
        [0.3995, 0.6005],
        [0.3995, 0.6005],
        [0.3995, 0.6005],
        [0.3995, 0.6005],
        [0.3995, 0.6005],
        [0.4630, 0.5370],
        [0.4630, 0.5370],
        [0.3995, 0.6005]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7700, -0.5101, -0.5101, -0.5101, -0.9174, -0.9174, -0.9174, -0.6217,
        -0.6217, -0.9174], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4753, 0.5247],
        [0.4276, 0.5724],
        [0.4090, 0.5910],
        [0.4090, 0.5910],
        [0.4944, 0.5056],
        [0.4944, 0.5056],
        [0.4944, 0.5056],
        [0.4276, 0.5724],
        [0.4090, 0.5910],
        [0.4944, 0.5056]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.6449, -0.5578, -0.5259, -0.8941, -0.6819, -0.7045, -0.7045, -0.5578,
        -0.5259, -0.7045], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [ True  True False  True False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4276, 0.5724],
        [0.4276, 0.5724],
        [0.4090, 0.5910],
        [0.4944, 0.5056],
        [0.4090, 0.5910],
        [0.4944, 0.5056],
        [0.4944, 0.5056],
        [0.4276, 0.5724],
        [0.4090, 0.5910],
        [0.4944, 0.5056]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.5578, -0.5578, -0.8941, -0.6819, -0.8941, -0.7045, -0.7045, -0.8497,
        -0.5259, -0.7045], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [ True  True  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4276, 0.5724],
        [0.4276, 0.5724],
        [0.4944, 0.5056],
        [0.4090, 0.5910],
        [0.4944, 0.5056],
        [0.4944, 0.5056],
        [0.4944, 0.5056],
        [0.4753, 0.5247],
        [0.4090, 0.5910],
        [0.4944, 0.5056]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.8497, -0.8497, -0.6819, -0.5259, -0.7045, -0.6819, -0.7045, -0.7439,
        -0.5259, -0.6819], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False False False False  True False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4753, 0.5247],
        [0.4753, 0.5247],
        [0.4090, 0.5910],
        [0.4090, 0.5910],
        [0.4944, 0.5056],
        [0.4090, 0.5910],
        [0.4944, 0.5056],
        [0.4753, 0.5247],
        [0.4090, 0.5910],
        [0.4090, 0.5910]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.6449, -0.6449, -0.5259, -0.5259, -0.7045, -0.5259, -0.7045, -0.6449,
        -0.5259, -0.5259], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [ True  True False False  True False  True  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.7700, -0.5101, -0.5101, -0.5101, -0.9174, -0.9174, -0.9174, -0.6217,
         -0.6217, -0.9174],
        [-0.6449, -0.5578, -0.5259, -0.8941, -0.6819, -0.7045, -0.7045, -0.5578,
         -0.5259, -0.7045],
        [-0.5578, -0.5578, -0.8941, -0.6819, -0.8941, -0.7045, -0.7045, -0.8497,
         -0.5259, -0.7045],
        [-0.8497, -0.8497, -0.6819, -0.5259, -0.7045, -0.6819, -0.7045, -0.7439,
         -0.5259, -0.6819],
        [-0.6449, -0.6449, -0.5259, -0.5259, -0.7045, -0.5259, -0.7045, -0.6449,
         -0.5259, -0.5259]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 4: Cumulative reward: 16.486663416028023
INFO:src.train:Episode 4: Reward Differences: 4.873080626130104
INFO:src.train:Episode 4: Average loss: 3.2857143878936768
INFO:src.train:Episode 4: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 5: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 5: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3930, 0.6070],
        [0.3930, 0.6070],
        [0.4509, 0.5491],
        [0.3930, 0.6070],
        [0.3930, 0.6070],
        [0.4509, 0.5491],
        [0.3930, 0.6070],
        [0.3930, 0.6070],
        [0.4509, 0.5491],
        [0.3930, 0.6070]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4992, -0.4992, -0.5995, -0.9340, -0.9340, -0.5995, -0.4992, -0.4992,
        -0.7965, -0.9340], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False False  True False  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3956, 0.6044],
        [0.3956, 0.6044],
        [0.4116, 0.5884],
        [0.4615, 0.5385],
        [0.4781, 0.5219],
        [0.4116, 0.5884],
        [0.3956, 0.6044],
        [0.3956, 0.6044],
        [0.4781, 0.5219],
        [0.4781, 0.5219]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.9274, -0.9274, -0.8878, -0.7732, -0.7380, -0.5303, -0.9274, -0.5035,
        -0.7380, -0.7380], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [ True  True False False  True  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4781, 0.5219],
        [0.4781, 0.5219],
        [0.4615, 0.5385],
        [0.4615, 0.5385],
        [0.4781, 0.5219],
        [0.4116, 0.5884],
        [0.4781, 0.5219],
        [0.3956, 0.6044],
        [0.4781, 0.5219],
        [0.4781, 0.5219]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.6502, -0.7380, -0.7732, -0.6190, -0.7380, -0.8878, -0.6502, -0.9274,
        -0.7380, -0.7380], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False  True False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3956, 0.6044],
        [0.4781, 0.5219],
        [0.4615, 0.5385],
        [0.4116, 0.5884],
        [0.4781, 0.5219],
        [0.4615, 0.5385],
        [0.3956, 0.6044],
        [0.4781, 0.5219],
        [0.4781, 0.5219],
        [0.4781, 0.5219]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.9274, -0.6502, -0.6190, -0.8878, -0.6502, -0.7732, -0.9274, -0.7380,
        -0.7380, -0.7380], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [ True False  True False False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4781, 0.5219],
        [0.3956, 0.6044],
        [0.4116, 0.5884],
        [0.4615, 0.5385],
        [0.3956, 0.6044],
        [0.4615, 0.5385],
        [0.4781, 0.5219],
        [0.4781, 0.5219],
        [0.4781, 0.5219],
        [0.4781, 0.5219]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.6502, -0.5035, -0.5303, -0.6190, -0.5035, -0.6190, -0.7380, -0.7380,
        -0.7380, -0.7380], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False False  True  True False  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.4992, -0.4992, -0.5995, -0.9340, -0.9340, -0.5995, -0.4992, -0.4992,
         -0.7965, -0.9340],
        [-0.9274, -0.9274, -0.8878, -0.7732, -0.7380, -0.5303, -0.9274, -0.5035,
         -0.7380, -0.7380],
        [-0.6502, -0.7380, -0.7732, -0.6190, -0.7380, -0.8878, -0.6502, -0.9274,
         -0.7380, -0.7380],
        [-0.9274, -0.6502, -0.6190, -0.8878, -0.6502, -0.7732, -0.9274, -0.7380,
         -0.7380, -0.7380],
        [-0.6502, -0.5035, -0.5303, -0.6190, -0.5035, -0.6190, -0.7380, -0.7380,
         -0.7380, -0.7380]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 5: Cumulative reward: 17.679872199892998
INFO:src.train:Episode 5: Reward Differences: 5.403395667672157
INFO:src.train:Episode 5: Average loss: 3.8874261379241943
INFO:src.train:Episode 5: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 6: Input words: ['apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 6: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4670, 0.5330],
        [0.4670, 0.5330],
        [0.4023, 0.5977],
        [0.4023, 0.5977],
        [0.4023, 0.5977],
        [0.4670, 0.5330],
        [0.4023, 0.5977],
        [0.4670, 0.5330],
        [0.4670, 0.5330],
        [0.4670, 0.5330]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6292, -0.7614, -0.5147, -0.5147, -0.9105, -0.6292, -0.9105, -0.6292,
        -0.7614, -0.6292], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False False  True  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4070, 0.5930],
        [0.4791, 0.5209],
        [0.4070, 0.5930],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4070, 0.5930],
        [0.4980, 0.5020],
        [0.4070, 0.5930]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.5226, -0.6522, -0.8989, -0.5540, -0.6972, -0.8548, -0.6891, -0.5226,
        -0.6972, -0.5226], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False  True  True  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4070, 0.5930],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4791, 0.5209],
        [0.4070, 0.5930],
        [0.4070, 0.5930],
        [0.4980, 0.5020],
        [0.4070, 0.5930]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.5226, -0.8548, -0.6891, -0.5540, -0.6972, -0.7358, -0.8989, -0.5226,
        -0.6972, -0.8989], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4070, 0.5930],
        [0.4791, 0.5209],
        [0.4070, 0.5930],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4791, 0.5209],
        [0.4980, 0.5020],
        [0.4070, 0.5930],
        [0.4980, 0.5020],
        [0.4980, 0.5020]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.8989, -0.6522, -0.8989, -0.5540, -0.6972, -0.7358, -0.6972, -0.5226,
        -0.6972, -0.6972], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [ True  True  True  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4980, 0.5020],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4254, 0.5746],
        [0.4980, 0.5020],
        [0.4791, 0.5209],
        [0.4980, 0.5020],
        [0.4070, 0.5930],
        [0.4980, 0.5020],
        [0.4980, 0.5020]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.6972, -0.5540, -0.6891, -0.5540, -0.6972, -0.7358, -0.6891, -0.5226,
        -0.6972, -0.6972], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [ True  True False  True  True False False False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.6292, -0.7614, -0.5147, -0.5147, -0.9105, -0.6292, -0.9105, -0.6292,
         -0.7614, -0.6292],
        [-0.5226, -0.6522, -0.8989, -0.5540, -0.6972, -0.8548, -0.6891, -0.5226,
         -0.6972, -0.5226],
        [-0.5226, -0.8548, -0.6891, -0.5540, -0.6972, -0.7358, -0.8989, -0.5226,
         -0.6972, -0.8989],
        [-0.8989, -0.6522, -0.8989, -0.5540, -0.6972, -0.7358, -0.6972, -0.5226,
         -0.6972, -0.6972],
        [-0.6972, -0.5540, -0.6891, -0.5540, -0.6972, -0.7358, -0.6891, -0.5226,
         -0.6972, -0.6972]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 6: Cumulative reward: 17.547293409705162
INFO:src.train:Episode 6: Reward Differences: 5.270816907286644
INFO:src.train:Episode 6: Average loss: 3.600754499435425
INFO:src.train:Episode 6: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 7: Input words: ['apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 7: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4896, 0.5104],
        [0.4896, 0.5104],
        [0.4143, 0.5857],
        [0.4143, 0.5857],
        [0.4896, 0.5104],
        [0.4143, 0.5857],
        [0.4896, 0.5104],
        [0.4896, 0.5104],
        [0.4896, 0.5104],
        [0.4896, 0.5104]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7141, -0.7141, -0.8811, -0.5350, -0.6726, -0.5350, -0.7141, -0.6726,
        -0.7141, -0.6726], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [False False  True  True  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5042, 0.4958],
        [0.5042, 0.4958],
        [0.5269, 0.4731],
        [0.4446, 0.5554],
        [0.4446, 0.5554],
        [0.4223, 0.5777],
        [0.5269, 0.4731],
        [0.4446, 0.5554],
        [0.5269, 0.4731],
        [0.4446, 0.5554]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.6847, -0.7017, -0.7485, -0.5880, -0.8107, -0.8621, -0.7485, -0.5880,
        -0.6407, -0.5880], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [False  True False  True False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5042, 0.4958],
        [0.4446, 0.5554],
        [0.4223, 0.5777],
        [0.4446, 0.5554],
        [0.5042, 0.4958],
        [0.5269, 0.4731],
        [0.4223, 0.5777],
        [0.4446, 0.5554],
        [0.5269, 0.4731],
        [0.4446, 0.5554]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.6847, -0.5880, -0.5487, -0.8107, -0.7017, -0.7485, -0.5487, -0.8107,
        -0.7485, -0.5880], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [False  True False False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5042, 0.4958],
        [0.4446, 0.5554],
        [0.4223, 0.5777],
        [0.5042, 0.4958],
        [0.4446, 0.5554],
        [0.4223, 0.5777],
        [0.4223, 0.5777],
        [0.5042, 0.4958],
        [0.4223, 0.5777],
        [0.4446, 0.5554]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.6847, -0.5880, -0.5487, -0.7017, -0.5880, -0.8621, -0.5487, -0.6847,
        -0.8621, -0.8107], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5042, 0.4958],
        [0.4446, 0.5554],
        [0.4223, 0.5777],
        [0.4446, 0.5554],
        [0.4446, 0.5554],
        [0.5269, 0.4731],
        [0.4223, 0.5777],
        [0.5042, 0.4958],
        [0.5269, 0.4731],
        [0.5042, 0.4958]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.7017, -0.5880, -0.5487, -0.5880, -0.8107, -0.6407, -0.5487, -0.7017,
        -0.7485, -0.6847], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [ True  True False  True False  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.7141, -0.7141, -0.8811, -0.5350, -0.6726, -0.5350, -0.7141, -0.6726,
         -0.7141, -0.6726],
        [-0.6847, -0.7017, -0.7485, -0.5880, -0.8107, -0.8621, -0.7485, -0.5880,
         -0.6407, -0.5880],
        [-0.6847, -0.5880, -0.5487, -0.8107, -0.7017, -0.7485, -0.5487, -0.8107,
         -0.7485, -0.5880],
        [-0.6847, -0.5880, -0.5487, -0.7017, -0.5880, -0.8621, -0.5487, -0.6847,
         -0.8621, -0.8107],
        [-0.7017, -0.5880, -0.5487, -0.5880, -0.8107, -0.6407, -0.5487, -0.7017,
         -0.7485, -0.6847]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 7: Cumulative reward: 16.48666337132454
INFO:src.train:Episode 7: Reward Differences: 4.939370006322861
INFO:src.train:Episode 7: Average loss: 3.3592147827148438
INFO:src.train:Episode 7: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 8: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 8: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4205, 0.5795],
        [0.4205, 0.5795],
        [0.5019, 0.4981],
        [0.4205, 0.5795],
        [0.5019, 0.4981],
        [0.4205, 0.5795],
        [0.4205, 0.5795],
        [0.4205, 0.5795],
        [0.4205, 0.5795],
        [0.4205, 0.5795]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.5455, -0.5455, -0.6894, -0.5455, -0.6894, -0.5455, -0.5455, -0.5455,
        -0.5455, -0.5455], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False  True  True False False False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4283, 0.5717],
        [0.4526, 0.5474],
        [0.5425, 0.4575],
        [0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.4283, 0.5717],
        [0.4526, 0.5474],
        [0.4526, 0.5474],
        [0.4283, 0.5717],
        [0.4283, 0.5717]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.5591, -0.7926, -0.6116, -0.5591, -0.6581, -0.5591, -0.7926, -0.6027,
        -0.8480, -0.8480], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False  True False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.5425, 0.4575],
        [0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.4526, 0.5474],
        [0.5425, 0.4575],
        [0.5425, 0.4575]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.5591, -0.6581, -0.7819, -0.5591, -0.6581, -0.5591, -0.6581, -0.6027,
        -0.6116, -0.7819], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False False False False False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.4283, 0.5717],
        [0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.4526, 0.5474],
        [0.5425, 0.4575],
        [0.4283, 0.5717]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.8480, -0.6581, -0.5591, -0.5591, -0.6581, -0.8480, -0.6581, -0.6027,
        -0.6116, -0.5591], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [ True False False False False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5425, 0.4575],
        [0.5178, 0.4822],
        [0.4283, 0.5717],
        [0.4283, 0.5717],
        [0.5178, 0.4822],
        [0.5425, 0.4575],
        [0.5178, 0.4822],
        [0.4526, 0.5474],
        [0.5425, 0.4575],
        [0.4283, 0.5717]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 0, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.7819, -0.7295, -0.5591, -0.8480, -0.7295, -0.6116, -0.6581, -0.6027,
        -0.6116, -0.5591], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False  True False  True  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.5455, -0.5455, -0.6894, -0.5455, -0.6894, -0.5455, -0.5455, -0.5455,
         -0.5455, -0.5455],
        [-0.5591, -0.7926, -0.6116, -0.5591, -0.6581, -0.5591, -0.7926, -0.6027,
         -0.8480, -0.8480],
        [-0.5591, -0.6581, -0.7819, -0.5591, -0.6581, -0.5591, -0.6581, -0.6027,
         -0.6116, -0.7819],
        [-0.8480, -0.6581, -0.5591, -0.5591, -0.6581, -0.8480, -0.6581, -0.6027,
         -0.6116, -0.5591],
        [-0.7819, -0.7295, -0.5591, -0.8480, -0.7295, -0.6116, -0.6581, -0.6027,
         -0.6116, -0.5591]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 8: Cumulative reward: 16.28779524564743
INFO:src.train:Episode 8: Reward Differences: 5.337106287479401
INFO:src.train:Episode 8: Average loss: 3.4431090354919434
INFO:src.train:Episode 8: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 9: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 9: Target words: ['orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5147, 0.4853],
        [0.4241, 0.5759],
        [0.5147, 0.4853],
        [0.4241, 0.5759],
        [0.5147, 0.4853],
        [0.4241, 0.5759],
        [0.5147, 0.4853],
        [0.4241, 0.5759],
        [0.4241, 0.5759],
        [0.5147, 0.4853]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7230, -0.8578, -0.6641, -0.5518, -0.7230, -0.5518, -0.6641, -0.5518,
        -0.8578, -0.6641], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True False False False False False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4585, 0.5415],
        [0.5325, 0.4675],
        [0.5325, 0.4675],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.5598, 0.4402],
        [0.4585, 0.5415],
        [0.5325, 0.4675],
        [0.5325, 0.4675]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6133, -0.6302, -0.7603, -0.5643, -0.5643, -0.5643, -0.8206, -0.6133,
        -0.6302, -0.6302], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True False  True False False False False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4585, 0.5415],
        [0.5325, 0.4675],
        [0.4585, 0.5415],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.4585, 0.5415],
        [0.5325, 0.4675],
        [0.5325, 0.4675]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.7799, -0.6302, -0.7799, -0.5643, -0.5643, -0.8412, -0.8412, -0.6133,
        -0.6302, -0.6302], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [False False False False False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5325, 0.4675],
        [0.5325, 0.4675],
        [0.5325, 0.4675],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.5598, 0.4402],
        [0.5598, 0.4402],
        [0.4585, 0.5415],
        [0.5325, 0.4675],
        [0.5325, 0.4675]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.6302, -0.7603, -0.7603, -0.5643, -0.5643, -0.8206, -0.5801, -0.7799,
        -0.7603, -0.6302], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [False  True  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5325, 0.4675],
        [0.4585, 0.5415],
        [0.4585, 0.5415],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.4312, 0.5688],
        [0.5598, 0.4402],
        [0.5325, 0.4675],
        [0.4585, 0.5415],
        [0.5325, 0.4675]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.6302, -0.7799, -0.7799, -0.8412, -0.5643, -0.5643, -0.8206, -0.7603,
        -0.7799, -0.7603], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [False False False  True False False False  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.7230, -0.8578, -0.6641, -0.5518, -0.7230, -0.5518, -0.6641, -0.5518,
         -0.8578, -0.6641],
        [-0.6133, -0.6302, -0.7603, -0.5643, -0.5643, -0.5643, -0.8206, -0.6133,
         -0.6302, -0.6302],
        [-0.7799, -0.6302, -0.7799, -0.5643, -0.5643, -0.8412, -0.8412, -0.6133,
         -0.6302, -0.6302],
        [-0.6302, -0.7603, -0.7603, -0.5643, -0.5643, -0.8206, -0.5801, -0.7799,
         -0.7603, -0.6302],
        [-0.6302, -0.7799, -0.7799, -0.8412, -0.5643, -0.5643, -0.8206, -0.7603,
         -0.7799, -0.7603]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 9: Cumulative reward: 15.558612063527107
INFO:src.train:Episode 9: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 9: Average loss: 3.1523866653442383
INFO:src.train:Episode 9: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 10: Input words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 10: Target words: ['orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.4271, 0.5729],
        [0.4271, 0.5729],
        [0.4271, 0.5729],
        [0.5262, 0.4738],
        [0.5262, 0.4738]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7470, -0.7470, -0.7470, -0.6420, -0.7470, -0.5571, -0.8507, -0.5571,
        -0.7470, -0.6420], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [ True  True False  True  True False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4632, 0.5368],
        [0.4632, 0.5368],
        [0.4332, 0.5668],
        [0.5755, 0.4245],
        [0.4632, 0.5368],
        [0.4332, 0.5668],
        [0.5457, 0.4543],
        [0.4332, 0.5668],
        [0.4332, 0.5668],
        [0.5457, 0.4543]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.7696, -0.7696, -0.8366, -0.8569, -0.7696, -0.5677, -0.7889, -0.8366,
        -0.5677, -0.6057], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False False  True False False False  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5457, 0.4543],
        [0.5457, 0.4543],
        [0.5755, 0.4245],
        [0.4332, 0.5668],
        [0.5457, 0.4543],
        [0.4332, 0.5668],
        [0.4632, 0.5368],
        [0.5755, 0.4245],
        [0.4332, 0.5668],
        [0.5457, 0.4543]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.7889, -0.6057, -0.5524, -0.8366, -0.7889, -0.5677, -0.6221, -0.8569,
        -0.5677, -0.6057], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [ True False  True  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4632, 0.5368],
        [0.5457, 0.4543],
        [0.5755, 0.4245],
        [0.5755, 0.4245],
        [0.4632, 0.5368],
        [0.4332, 0.5668],
        [0.4632, 0.5368],
        [0.4332, 0.5668],
        [0.4332, 0.5668],
        [0.5457, 0.4543]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.7696, -0.7889, -0.5524, -0.5524, -0.7696, -0.5677, -0.6221, -0.8366,
        -0.8366, -0.6057], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False  True  True  True False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5457, 0.4543],
        [0.4632, 0.5368],
        [0.5755, 0.4245],
        [0.5755, 0.4245],
        [0.5457, 0.4543],
        [0.4332, 0.5668],
        [0.4632, 0.5368],
        [0.5755, 0.4245],
        [0.5755, 0.4245],
        [0.5457, 0.4543]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.6057, -0.7696, -0.5524, -0.5524, -0.6057, -0.5677, -0.7696, -0.5524,
        -0.5524, -0.6057], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False False  True  True False False False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.7470, -0.7470, -0.7470, -0.6420, -0.7470, -0.5571, -0.8507, -0.5571,
         -0.7470, -0.6420],
        [-0.7696, -0.7696, -0.8366, -0.8569, -0.7696, -0.5677, -0.7889, -0.8366,
         -0.5677, -0.6057],
        [-0.7889, -0.6057, -0.5524, -0.8366, -0.7889, -0.5677, -0.6221, -0.8569,
         -0.5677, -0.6057],
        [-0.7696, -0.7889, -0.5524, -0.5524, -0.7696, -0.5677, -0.6221, -0.8366,
         -0.8366, -0.6057],
        [-0.6057, -0.7696, -0.5524, -0.5524, -0.6057, -0.5677, -0.7696, -0.5524,
         -0.5524, -0.6057]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 10: Cumulative reward: 16.486663356423378
INFO:src.train:Episode 10: Reward Differences: 4.873080626130104
INFO:src.train:Episode 10: Average loss: 3.3314175605773926
INFO:src.train:Episode 10: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 11: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 11: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4336, 0.5664],
        [0.4336, 0.5664],
        [0.5441, 0.4559],
        [0.5441, 0.4559],
        [0.4336, 0.5664],
        [0.4336, 0.5664],
        [0.4336, 0.5664],
        [0.4336, 0.5664],
        [0.4336, 0.5664],
        [0.4336, 0.5664]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.5685, -0.5685, -0.6086, -0.7855, -0.5685, -0.8356, -0.5685, -0.8356,
        -0.8356, -0.5685], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False False  True False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4441, 0.5559],
        [0.4441, 0.5559],
        [0.5663, 0.4337],
        [0.4787, 0.5213],
        [0.4441, 0.5559],
        [0.6001, 0.3999],
        [0.4787, 0.5213],
        [0.6001, 0.3999],
        [0.5663, 0.4337],
        [0.4787, 0.5213]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.8116, -0.5872, -0.5687, -0.6514, -0.8116, -0.9165, -0.6514, -0.5107,
        -0.5687, -0.6514], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [ True False False  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6001, 0.3999],
        [0.4441, 0.5559],
        [0.5663, 0.4337],
        [0.4787, 0.5213],
        [0.6001, 0.3999],
        [0.4441, 0.5559],
        [0.4787, 0.5213],
        [0.6001, 0.3999],
        [0.5663, 0.4337],
        [0.4787, 0.5213]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.9165, -0.5872, -0.8353, -0.7367, -0.5107, -0.5872, -0.7367, -0.9165,
        -0.5687, -0.7367], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False  True False  True False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4441, 0.5559],
        [0.4441, 0.5559],
        [0.4787, 0.5213],
        [0.5663, 0.4337],
        [0.6001, 0.3999],
        [0.4441, 0.5559],
        [0.5663, 0.4337],
        [0.4441, 0.5559],
        [0.5663, 0.4337],
        [0.5663, 0.4337]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.8116, -0.8116, -0.7367, -0.5687, -0.9165, -0.8116, -0.8353, -0.8116,
        -0.5687, -0.5687], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [ True  True False False False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6001, 0.3999],
        [0.6001, 0.3999],
        [0.5663, 0.4337],
        [0.5663, 0.4337],
        [0.4441, 0.5559],
        [0.6001, 0.3999],
        [0.4787, 0.5213],
        [0.6001, 0.3999],
        [0.5663, 0.4337],
        [0.5663, 0.4337]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 0, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.9165, -0.5107, -0.5687, -0.8353, -0.8116, -0.5107, -0.6514, -0.5107,
        -0.8353, -0.8353], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False  True False  True  True  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.5685, -0.5685, -0.6086, -0.7855, -0.5685, -0.8356, -0.5685, -0.8356,
         -0.8356, -0.5685],
        [-0.8116, -0.5872, -0.5687, -0.6514, -0.8116, -0.9165, -0.6514, -0.5107,
         -0.5687, -0.6514],
        [-0.9165, -0.5872, -0.8353, -0.7367, -0.5107, -0.5872, -0.7367, -0.9165,
         -0.5687, -0.7367],
        [-0.8116, -0.8116, -0.7367, -0.5687, -0.9165, -0.8116, -0.8353, -0.8116,
         -0.5687, -0.5687],
        [-0.9165, -0.5107, -0.5687, -0.8353, -0.8116, -0.5107, -0.6514, -0.5107,
         -0.8353, -0.8353]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 11: Cumulative reward: 17.149557173252106
INFO:src.train:Episode 11: Reward Differences: 5.7348425686359406
INFO:src.train:Episode 11: Average loss: 4.0180745124816895
INFO:src.train:Episode 11: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 12: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 12: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4410, 0.5590],
        [0.5621, 0.4379],
        [0.4410, 0.5590],
        [0.4410, 0.5590],
        [0.4410, 0.5590],
        [0.5621, 0.4379],
        [0.4410, 0.5590],
        [0.5621, 0.4379],
        [0.5621, 0.4379],
        [0.4410, 0.5590]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.5817, -0.5761, -0.8187, -0.8187, -0.8187, -0.8258, -0.8187, -0.8258,
        -0.5761, -0.5817], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [False  True False False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4594, 0.5406],
        [0.6237, 0.3763],
        [0.5866, 0.4134],
        [0.5866, 0.4134],
        [0.6237, 0.3763],
        [0.4594, 0.5406],
        [0.5866, 0.4134],
        [0.4981, 0.5019],
        [0.5866, 0.4134],
        [0.4594, 0.5406]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.7778, -0.4721, -0.5334, -0.8833, -0.4721, -0.6151, -0.8833, -0.6969,
        -0.5334, -0.6151], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True  True False  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6237, 0.3763],
        [0.6237, 0.3763],
        [0.5866, 0.4134],
        [0.4981, 0.5019],
        [0.6237, 0.3763],
        [0.4594, 0.5406],
        [0.4981, 0.5019],
        [0.5866, 0.4134],
        [0.5866, 0.4134],
        [0.4594, 0.5406]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.4721, -0.9773, -0.5334, -0.6894, -0.4721, -0.6151, -0.6969, -0.8833,
        -0.5334, -0.6151], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True False False  True  True False False  True False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6237, 0.3763],
        [0.4594, 0.5406],
        [0.5866, 0.4134],
        [0.4981, 0.5019],
        [0.6237, 0.3763],
        [0.4594, 0.5406],
        [0.5866, 0.4134],
        [0.4981, 0.5019],
        [0.5866, 0.4134],
        [0.4594, 0.5406]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 0, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.9773, -0.7778, -0.8833, -0.6969, -0.9773, -0.7778, -0.5334, -0.6894,
        -0.5334, -0.6151], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [False  True  True False False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 0 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 0, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4594, 0.5406],
        [0.6237, 0.3763],
        [0.4981, 0.5019],
        [0.5866, 0.4134],
        [0.4594, 0.5406],
        [0.6237, 0.3763],
        [0.5866, 0.4134],
        [0.4981, 0.5019],
        [0.5866, 0.4134],
        [0.4594, 0.5406]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.7778, -0.4721, -0.6894, -0.8833, -0.6151, -0.4721, -0.8833, -0.6969,
        -0.5334, -0.7778], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True  True  True  True False  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.5817, -0.5761, -0.8187, -0.8187, -0.8187, -0.8258, -0.8187, -0.8258,
         -0.5761, -0.5817],
        [-0.7778, -0.4721, -0.5334, -0.8833, -0.4721, -0.6151, -0.8833, -0.6969,
         -0.5334, -0.6151],
        [-0.4721, -0.9773, -0.5334, -0.6894, -0.4721, -0.6151, -0.6969, -0.8833,
         -0.5334, -0.6151],
        [-0.9773, -0.7778, -0.8833, -0.6969, -0.9773, -0.7778, -0.5334, -0.6894,
         -0.5334, -0.6151],
        [-0.7778, -0.4721, -0.6894, -0.8833, -0.6151, -0.4721, -0.8833, -0.6969,
         -0.5334, -0.7778]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 12: Cumulative reward: 16.88439966738224
INFO:src.train:Episode 12: Reward Differences: 5.535974428057671
INFO:src.train:Episode 12: Average loss: 3.8171145915985107
INFO:src.train:Episode 12: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 13: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 13: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4491, 0.5509],
        [0.4491, 0.5509],
        [0.5798, 0.4202],
        [0.5798, 0.4202],
        [0.5798, 0.4202],
        [0.4491, 0.5509],
        [0.5798, 0.4202],
        [0.5798, 0.4202],
        [0.4491, 0.5509],
        [0.5798, 0.4202]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.5963, -0.5963, -0.8669, -0.8669, -0.5451, -0.5963, -0.5451, -0.5451,
        -0.8004, -0.5451], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [ True False False  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5187, 0.4813],
        [0.4759, 0.5241],
        [0.4759, 0.5241],
        [0.5187, 0.4813],
        [0.6064, 0.3936],
        [0.4759, 0.5241],
        [0.6466, 0.3534],
        [0.6064, 0.3936],
        [0.6466, 0.3534],
        [0.6064, 0.3936]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6564, -0.7426, -0.6460, -0.6564, -0.5001, -0.7426, -0.4361, -0.5001,
        -0.4361, -0.5001], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False  True False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6064, 0.3936],
        [0.6466, 0.3534],
        [0.4759, 0.5241],
        [0.6064, 0.3936],
        [0.6064, 0.3936],
        [0.6466, 0.3534],
        [0.6466, 0.3534],
        [0.6064, 0.3936],
        [0.6466, 0.3534],
        [0.6064, 0.3936]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.9325, -1.0400, -0.7426, -0.9325, -0.9325, -0.4361, -1.0400, -0.5001,
        -0.4361, -0.9325], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [ True False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5187, 0.4813],
        [0.4759, 0.5241],
        [0.6466, 0.3534],
        [0.5187, 0.4813],
        [0.5187, 0.4813],
        [0.6466, 0.3534],
        [0.4759, 0.5241],
        [0.6064, 0.3936],
        [0.6466, 0.3534],
        [0.5187, 0.4813]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.7313, -0.6460, -0.4361, -0.6564, -0.6564, -0.4361, -0.7426, -0.9325,
        -0.4361, -0.6564], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [ True False  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5187, 0.4813],
        [0.4759, 0.5241],
        [0.6466, 0.3534],
        [0.6064, 0.3936],
        [0.6064, 0.3936],
        [0.6466, 0.3534],
        [0.6466, 0.3534],
        [0.5187, 0.4813],
        [0.6466, 0.3534],
        [0.6064, 0.3936]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.6564, -0.6460, -0.4361, -0.9325, -0.5001, -1.0400, -1.0400, -0.7313,
        -1.0400, -0.5001], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False False  True  True False False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.5963, -0.5963, -0.8669, -0.8669, -0.5451, -0.5963, -0.5451, -0.5451,
         -0.8004, -0.5451],
        [-0.6564, -0.7426, -0.6460, -0.6564, -0.5001, -0.7426, -0.4361, -0.5001,
         -0.4361, -0.5001],
        [-0.9325, -1.0400, -0.7426, -0.9325, -0.9325, -0.4361, -1.0400, -0.5001,
         -0.4361, -0.9325],
        [-0.7313, -0.6460, -0.4361, -0.6564, -0.6564, -0.4361, -0.7426, -0.9325,
         -0.4361, -0.6564],
        [-0.6564, -0.6460, -0.4361, -0.9325, -0.5001, -1.0400, -1.0400, -0.7313,
         -1.0400, -0.5001]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 13: Cumulative reward: 16.552952736616135
INFO:src.train:Episode 13: Reward Differences: 4.541633725166321
INFO:src.train:Episode 13: Average loss: 3.0972344875335693
INFO:src.train:Episode 13: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 14: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 14: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4642, 0.5358],
        [0.4642, 0.5358],
        [0.4642, 0.5358],
        [0.4642, 0.5358],
        [0.5966, 0.4034],
        [0.4642, 0.5358],
        [0.4642, 0.5358],
        [0.5966, 0.4034],
        [0.4642, 0.5358],
        [0.4642, 0.5358]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7674, -0.6240, -0.7674, -0.6240, -0.5165, -0.7674, -0.6240, -0.5165,
        -0.6240, -0.7674], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False  True  True  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6254, 0.3746],
        [0.5413, 0.4587],
        [0.6683, 0.3317],
        [0.5413, 0.4587],
        [0.6683, 0.3317],
        [0.6683, 0.3317],
        [0.4944, 0.5056],
        [0.6683, 0.3317],
        [0.4944, 0.5056],
        [0.6254, 0.3746]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.4694, -0.6137, -0.4030, -0.6137, -0.4030, -0.4030, -0.6821, -0.4030,
        -0.7043, -0.4694], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False False  True False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6254, 0.3746],
        [0.6254, 0.3746],
        [0.6683, 0.3317],
        [0.6254, 0.3746],
        [0.6683, 0.3317],
        [0.6683, 0.3317],
        [0.4944, 0.5056],
        [0.6683, 0.3317],
        [0.6683, 0.3317],
        [0.6254, 0.3746]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.4694, -0.4694, -0.4030, -0.4694, -1.1035, -0.4030, -0.6821, -0.4030,
        -0.4030, -0.9819], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False False  True False False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6254, 0.3746],
        [0.6254, 0.3746],
        [0.6683, 0.3317],
        [0.6254, 0.3746],
        [0.4944, 0.5056],
        [0.6683, 0.3317],
        [0.4944, 0.5056],
        [0.6683, 0.3317],
        [0.6683, 0.3317],
        [0.5413, 0.4587]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.9819, -0.4694, -1.1035, -0.9819, -0.6821, -1.1035, -0.7043, -0.4030,
        -1.1035, -0.7794], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [ True False False  True False False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5413, 0.4587],
        [0.6254, 0.3746],
        [0.4944, 0.5056],
        [0.5413, 0.4587],
        [0.4944, 0.5056],
        [0.4944, 0.5056],
        [0.6683, 0.3317],
        [0.6683, 0.3317],
        [0.4944, 0.5056],
        [0.5413, 0.4587]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.6137, -0.4694, -0.7043, -0.6137, -0.6821, -0.6821, -1.1035, -0.4030,
        -0.6821, -0.6137], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False False  True False False False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.7674, -0.6240, -0.7674, -0.6240, -0.5165, -0.7674, -0.6240, -0.5165,
         -0.6240, -0.7674],
        [-0.4694, -0.6137, -0.4030, -0.6137, -0.4030, -0.4030, -0.6821, -0.4030,
         -0.7043, -0.4694],
        [-0.4694, -0.4694, -0.4030, -0.4694, -1.1035, -0.4030, -0.6821, -0.4030,
         -0.4030, -0.9819],
        [-0.9819, -0.4694, -1.1035, -0.9819, -0.6821, -1.1035, -0.7043, -0.4030,
         -1.1035, -0.7794],
        [-0.6137, -0.4694, -0.7043, -0.6137, -0.6821, -0.6821, -1.1035, -0.4030,
         -0.6821, -0.6137]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 14: Cumulative reward: 15.89005894958973
INFO:src.train:Episode 14: Reward Differences: 4.2101868242025375
INFO:src.train:Episode 14: Average loss: 2.7308437824249268
INFO:src.train:Episode 14: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 15: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 15: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6160, 0.3840],
        [0.4825, 0.5175],
        [0.4825, 0.5175],
        [0.4825, 0.5175],
        [0.6160, 0.3840],
        [0.6160, 0.3840],
        [0.6160, 0.3840],
        [0.6160, 0.3840],
        [0.6160, 0.3840],
        [0.4825, 0.5175]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4845, -0.6587, -0.6587, -0.7288, -0.4845, -0.4845, -0.4845, -0.4845,
        -0.4845, -0.7288], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [False False False False False False False False False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6471, 0.3529],
        [0.5159, 0.4841],
        [0.5159, 0.4841],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.6930, 0.3070]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.4352, -0.7255, -0.7255, -1.0417, -0.4352, -0.4352, -1.0417, -0.4352,
        -0.4352, -1.1808], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [False False False  True False False  True False False False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6471, 0.3529],
        [0.5159, 0.4841],
        [0.5159, 0.4841],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.5159, 0.4841]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.4352, -0.7255, -0.6618, -0.8379, -1.0417, -0.4352, -0.5667, -1.0417,
        -0.4352, -0.6618], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [False False  True  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6471, 0.3529],
        [0.5159, 0.4841],
        [0.6930, 0.3070],
        [0.5674, 0.4326],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.6471, 0.3529],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.6930, 0.3070]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.4352, -0.7255, -1.1808, -0.8379, -0.5667, -1.0417, -0.4352, -0.8379,
        -0.4352, -0.3668], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [False False False  True False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6471, 0.3529],
        [0.5159, 0.4841],
        [0.5159, 0.4841],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.5674, 0.4326],
        [0.6471, 0.3529],
        [0.6930, 0.3070]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.4352, -0.6618, -0.7255, -0.8379, -0.4352, -0.5667, -0.4352, -0.5667,
        -1.0417, -0.3668], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [False  True False  True False False False False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.4845, -0.6587, -0.6587, -0.7288, -0.4845, -0.4845, -0.4845, -0.4845,
         -0.4845, -0.7288],
        [-0.4352, -0.7255, -0.7255, -1.0417, -0.4352, -0.4352, -1.0417, -0.4352,
         -0.4352, -1.1808],
        [-0.4352, -0.7255, -0.6618, -0.8379, -1.0417, -0.4352, -0.5667, -1.0417,
         -0.4352, -0.6618],
        [-0.4352, -0.7255, -1.1808, -0.8379, -0.5667, -1.0417, -0.4352, -0.8379,
         -0.4352, -0.3668],
        [-0.4352, -0.6618, -0.7255, -0.8379, -0.4352, -0.5667, -0.4352, -0.5667,
         -1.0417, -0.3668]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 15: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 15: Reward Differences: 4.939370006322861
INFO:src.train:Episode 15: Average loss: 3.195899248123169
INFO:src.train:Episode 15: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 16: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 16: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5000, 0.5000],
        [0.6364, 0.3636],
        [0.5000, 0.5000],
        [0.5000, 0.5000],
        [0.5000, 0.5000],
        [0.5000, 0.5000],
        [0.6364, 0.3636],
        [0.6364, 0.3636],
        [0.5000, 0.5000],
        [0.6364, 0.3636]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6931, -1.0118, -0.6931, -0.6931, -0.6931, -0.6932, -0.4519, -1.0118,
        -0.6931, -0.4519], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [ True False False False False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5915, 0.4085],
        [0.5362, 0.4638],
        [0.5362, 0.4638],
        [0.5362, 0.4638],
        [0.5362, 0.4638],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.5915, 0.4085],
        [0.5915, 0.4085],
        [0.7172, 0.2828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.8954, -0.6232, -0.6232, -0.7683, -0.7683, -0.3325, -0.3325, -0.5250,
        -0.8954, -0.3325], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [ True  True  True False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5915, 0.4085],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.5362, 0.4638],
        [0.5362, 0.4638],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.6693, 0.3307],
        [0.5915, 0.4085],
        [0.7172, 0.2828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.5250, -0.3325, -0.3325, -0.6232, -0.6232, -0.3325, -0.3325, -0.4015,
        -0.8954, -0.3325], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True  True  True  True  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6693, 0.3307],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.6693, 0.3307],
        [0.5915, 0.4085],
        [0.7172, 0.2828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.1066, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -0.4015,
        -0.5250, -0.3325], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [ True  True  True  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5915, 0.4085],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.7172, 0.2828],
        [0.6693, 0.3307],
        [0.6693, 0.3307],
        [0.7172, 0.2828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.5250, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -1.1066,
        -0.4015, -1.2629], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True  True  True  True  True  True  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.6931, -1.0118, -0.6931, -0.6931, -0.6931, -0.6932, -0.4519, -1.0118,
         -0.6931, -0.4519],
        [-0.8954, -0.6232, -0.6232, -0.7683, -0.7683, -0.3325, -0.3325, -0.5250,
         -0.8954, -0.3325],
        [-0.5250, -0.3325, -0.3325, -0.6232, -0.6232, -0.3325, -0.3325, -0.4015,
         -0.8954, -0.3325],
        [-1.1066, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -0.4015,
         -0.5250, -0.3325],
        [-0.5250, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -0.3325, -1.1066,
         -0.4015, -1.2629]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 16: Cumulative reward: 18.342765972018242
INFO:src.train:Episode 16: Reward Differences: 5.403395667672157
INFO:src.train:Episode 16: Average loss: 2.9787936210632324
INFO:src.train:Episode 16: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 17: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 17: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5204, 0.4796],
        [0.5204, 0.4796],
        [0.6632, 0.3368],
        [0.5204, 0.4796],
        [0.6632, 0.3368],
        [0.5204, 0.4796],
        [0.5204, 0.4796],
        [0.5204, 0.4796],
        [0.5204, 0.4796],
        [0.6632, 0.3368]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6531, -0.7349, -0.4107, -0.6531, -0.4107, -0.7349, -0.7349, -0.7349,
        -0.6531, -1.0882], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [ True False False False False False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7497, 0.2503],
        [0.5613, 0.4387],
        [0.6989, 0.3011],
        [0.6989, 0.3011],
        [0.6989, 0.3011],
        [0.5613, 0.4387],
        [0.5613, 0.4387],
        [0.5613, 0.4387],
        [0.7497, 0.2503],
        [0.6228, 0.3772]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2881, -0.8238, -0.3583, -1.2002, -1.2002, -0.5776, -0.5776, -0.5776,
        -0.2881, -0.9749], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [ True False False  True  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7497, 0.2503],
        [0.5613, 0.4387],
        [0.6989, 0.3011],
        [0.6228, 0.3772],
        [0.6228, 0.3772],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.6228, 0.3772]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-1.3850, -0.5776, -0.3583, -0.9749, -0.4736, -0.2881, -0.2881, -0.2881,
        -0.2881, -0.4736], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False  True False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5613, 0.4387],
        [0.7497, 0.2503],
        [0.6989, 0.3011],
        [0.6228, 0.3772],
        [0.6989, 0.3011],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.6989, 0.3011]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.8238, -1.3850, -0.3583, -0.4736, -0.3583, -0.2881, -0.2881, -0.2881,
        -1.3850, -1.2002], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5613, 0.4387],
        [0.5613, 0.4387],
        [0.6989, 0.3011],
        [0.6989, 0.3011],
        [0.6989, 0.3011],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.7497, 0.2503],
        [0.5613, 0.4387],
        [0.6228, 0.3772]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.8238, -0.5776, -0.3583, -0.3583, -0.3583, -0.2881, -0.2881, -0.2881,
        -0.5776, -0.4736], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False False False  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.6531, -0.7349, -0.4107, -0.6531, -0.4107, -0.7349, -0.7349, -0.7349,
         -0.6531, -1.0882],
        [-0.2881, -0.8238, -0.3583, -1.2002, -1.2002, -0.5776, -0.5776, -0.5776,
         -0.2881, -0.9749],
        [-1.3850, -0.5776, -0.3583, -0.9749, -0.4736, -0.2881, -0.2881, -0.2881,
         -0.2881, -0.4736],
        [-0.8238, -1.3850, -0.3583, -0.4736, -0.3583, -0.2881, -0.2881, -0.2881,
         -1.3850, -1.2002],
        [-0.8238, -0.5776, -0.3583, -0.3583, -0.3583, -0.2881, -0.2881, -0.2881,
         -0.5776, -0.4736]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 17: Cumulative reward: 16.818110287189484
INFO:src.train:Episode 17: Reward Differences: 4.806791245937347
INFO:src.train:Episode 17: Average loss: 2.9139299392700195
INFO:src.train:Episode 17: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 18: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 18: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5429, 0.4571],
        [0.6902, 0.3098],
        [0.6902, 0.3098],
        [0.6902, 0.3098],
        [0.5429, 0.4571],
        [0.6902, 0.3098],
        [0.5429, 0.4571],
        [0.5429, 0.4571],
        [0.5429, 0.4571],
        [0.5429, 0.4571]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6109, -0.3708, -0.3708, -1.1717, -0.6109, -0.3708, -0.6109, -0.6109,
        -0.7828, -0.7828], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [ True  True  True False  True False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.5884, 0.4116],
        [0.7814, 0.2186],
        [0.7284, 0.2716],
        [0.7814, 0.2186],
        [0.7284, 0.2716],
        [0.5884, 0.4116],
        [0.5884, 0.4116]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2467, -0.2467, -0.2467, -0.5304, -0.2467, -0.3170, -0.2467, -0.3170,
        -0.8877, -0.8877], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [ True  True  True  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7284, 0.2716],
        [0.7814, 0.2186],
        [0.7284, 0.2716],
        [0.5884, 0.4116],
        [0.5884, 0.4116]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2467, -0.2467, -0.2467, -1.5206, -0.2467, -0.3170, -1.5206, -0.3170,
        -0.5304, -0.8877], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [ True  True  True False  True False False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.5884, 0.4116],
        [0.7814, 0.2186],
        [0.7284, 0.2716],
        [0.5884, 0.4116],
        [0.7284, 0.2716],
        [0.7814, 0.2186],
        [0.5884, 0.4116]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.2467, -0.2467, -0.2467, -0.5304, -0.2467, -0.3170, -0.5304, -1.3033,
        -0.2467, -0.5304], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [ True  True  True  True  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7814, 0.2186],
        [0.7284, 0.2716],
        [0.7814, 0.2186],
        [0.6559, 0.3441],
        [0.7814, 0.2186],
        [0.7814, 0.2186]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2467, -0.2467, -0.2467, -1.5206, -0.2467, -0.3170, -0.2467, -0.4218,
        -0.2467, -0.2467], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [ True  True  True False  True False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.6109, -0.3708, -0.3708, -1.1717, -0.6109, -0.3708, -0.6109, -0.6109,
         -0.7828, -0.7828],
        [-0.2467, -0.2467, -0.2467, -0.5304, -0.2467, -0.3170, -0.2467, -0.3170,
         -0.8877, -0.8877],
        [-0.2467, -0.2467, -0.2467, -1.5206, -0.2467, -0.3170, -1.5206, -0.3170,
         -0.5304, -0.8877],
        [-0.2467, -0.2467, -0.2467, -0.5304, -0.2467, -0.3170, -0.5304, -1.3033,
         -0.2467, -0.5304],
        [-0.2467, -0.2467, -0.2467, -1.5206, -0.2467, -0.3170, -0.2467, -0.4218,
         -0.2467, -0.2467]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 18: Cumulative reward: 18.077608436346054
INFO:src.train:Episode 18: Reward Differences: 5.469685047864914
INFO:src.train:Episode 18: Average loss: 2.732264995574951
INFO:src.train:Episode 18: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 19: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 19: Target words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7223, 0.2777],
        [0.7223, 0.2777],
        [0.5730, 0.4270],
        [0.7223, 0.2777],
        [0.5730, 0.4270],
        [0.5730, 0.4270],
        [0.7223, 0.2777],
        [0.5730, 0.4270],
        [0.5730, 0.4270],
        [0.5730, 0.4270]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.2813, -1.2813, -0.5569, -0.3253, -0.8509, -0.5569, -0.3253, -0.8509,
        -0.8509, -0.5569], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False False  True False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.8172, 0.1828],
        [0.7628, 0.2372],
        [0.6239, 0.3761],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.8172, 0.1828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.9780, -0.9780, -0.2019, -0.2707, -0.4717, -0.2019, -0.2019, -0.9780,
        -0.9780, -0.2019], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.8172, 0.1828],
        [0.7628, 0.2372],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.8172, 0.1828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.4717, -0.4717, -0.2019, -0.2707, -0.2019, -0.2019, -1.6992, -0.9780,
        -0.9780, -0.2019], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [ True  True  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.7628, 0.2372],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.8172, 0.1828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.2019, -0.2019, -0.2019, -0.2707, -0.2019, -0.2019, -0.9780, -0.9780,
        -0.4717, -0.2019], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [ True  True  True False  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.7628, 0.2372],
        [0.8172, 0.1828],
        [0.8172, 0.1828],
        [0.6239, 0.3761],
        [0.6239, 0.3761],
        [0.8172, 0.1828],
        [0.8172, 0.1828]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.2019, -0.2019, -0.2019, -0.2707, -0.2019, -1.6992, -0.4717, -0.4717,
        -0.2019, -1.6992], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [ True  True  True False  True False  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[-1.2813, -1.2813, -0.5569, -0.3253, -0.8509, -0.5569, -0.3253, -0.8509,
         -0.8509, -0.5569],
        [-0.9780, -0.9780, -0.2019, -0.2707, -0.4717, -0.2019, -0.2019, -0.9780,
         -0.9780, -0.2019],
        [-0.4717, -0.4717, -0.2019, -0.2707, -0.2019, -0.2019, -1.6992, -0.9780,
         -0.9780, -0.2019],
        [-0.2019, -0.2019, -0.2019, -0.2707, -0.2019, -0.2019, -0.9780, -0.9780,
         -0.4717, -0.2019],
        [-0.2019, -0.2019, -0.2019, -0.2707, -0.2019, -1.6992, -0.4717, -0.4717,
         -0.2019, -1.6992]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 19: Cumulative reward: 17.746161565184593
INFO:src.train:Episode 19: Reward Differences: 5.535974428057671
INFO:src.train:Episode 19: Average loss: 3.112053155899048
INFO:src.train:Episode 19: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 20: Input words: ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 20: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7474, 0.2526],
        [0.5925, 0.4075],
        [0.7474, 0.2526],
        [0.7474, 0.2526],
        [0.7474, 0.2526],
        [0.5925, 0.4075],
        [0.7474, 0.2526],
        [0.5925, 0.4075],
        [0.5925, 0.4075],
        [0.5925, 0.4075]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2912, -0.5235, -0.2912, -0.2912, -0.2912, -0.8976, -0.2912, -0.5235,
        -0.5235, -0.5235], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True False  True  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.8447, 0.1553],
        [0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.7278, 0.2722],
        [0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.8447, 0.1553],
        [0.8447, 0.1553]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1687, -1.5594, -0.1687, -0.1687, -0.2360, -1.3012, -0.1687, -0.2360,
        -0.1687, -0.1687], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True  True  True  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8447, 0.1553],
        [0.7278, 0.2722],
        [0.8447, 0.1553],
        [0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.7278, 0.2722],
        [0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.8447, 0.1553],
        [0.8447, 0.1553]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1687, -0.3177, -0.1687, -0.1687, -0.2360, -1.3012, -1.8625, -0.2360,
        -0.1687, -0.1687], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True False  True  True False  True False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.8447, 0.1553],
        [0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.7278, 0.2722],
        [0.6486, 0.3514],
        [0.7897, 0.2103],
        [0.8447, 0.1553],
        [0.8447, 0.1553]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1687, -0.2360, -1.8625, -0.1687, -0.2360, -0.3177, -1.0459, -0.2360,
        -0.1687, -0.1687], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True False False  True False False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.6486, 0.3514],
        [0.8447, 0.1553],
        [0.7897, 0.2103],
        [0.7897, 0.2103],
        [0.6486, 0.3514],
        [0.7897, 0.2103],
        [0.8447, 0.1553],
        [0.8447, 0.1553]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1687, -0.2360, -0.4329, -0.1687, -1.5594, -0.2360, -0.4329, -0.2360,
        -0.1687, -0.1687], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True False  True  True  True False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.2912, -0.5235, -0.2912, -0.2912, -0.2912, -0.8976, -0.2912, -0.5235,
         -0.5235, -0.5235],
        [-0.1687, -1.5594, -0.1687, -0.1687, -0.2360, -1.3012, -0.1687, -0.2360,
         -0.1687, -0.1687],
        [-0.1687, -0.3177, -0.1687, -0.1687, -0.2360, -1.3012, -1.8625, -0.2360,
         -0.1687, -0.1687],
        [-0.1687, -0.2360, -1.8625, -0.1687, -0.2360, -0.3177, -1.0459, -0.2360,
         -0.1687, -0.1687],
        [-0.1687, -0.2360, -0.4329, -0.1687, -1.5594, -0.2360, -0.4329, -0.2360,
         -0.1687, -0.1687]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 20: Cumulative reward: 17.348425328731537
INFO:src.train:Episode 20: Reward Differences: 5.337106287479401
INFO:src.train:Episode 20: Average loss: 2.349149703979492
INFO:src.train:Episode 20: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 21: Input words: ['orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 21: Target words: ['orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6164, 0.3836],
        [0.7749, 0.2251],
        [0.7749, 0.2251],
        [0.6164, 0.3836],
        [0.7749, 0.2251],
        [0.7749, 0.2251],
        [0.7749, 0.2251],
        [0.7749, 0.2251],
        [0.6164, 0.3836],
        [0.6164, 0.3836]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4838, -0.2550, -0.2550, -0.4838, -0.2550, -0.2550, -1.4912, -0.2550,
        -0.9582, -0.4838], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [False False  True  True False  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8182, 0.1818],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.8722, 0.1278],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.7610, 0.2390],
        [0.8182, 0.1818],
        [0.6775, 0.3225],
        [0.8182, 0.1818]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2006, -0.2006, -0.1368, -2.0569, -0.2006, -0.1368, -0.2731, -0.2006,
        -0.3893, -0.2006], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [False False  True False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8182, 0.1818],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.6775, 0.3225],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.8182, 0.1818],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.8182, 0.1818]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2006, -0.2006, -0.1368, -1.1318, -0.2006, -0.1368, -0.2006, -0.2006,
        -0.1368, -0.2006], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [False False  True False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8182, 0.1818],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.6775, 0.3225],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.8182, 0.1818],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.8182, 0.1818]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2006, -1.7050, -2.0569, -1.1318, -0.2006, -0.1368, -1.7050, -1.7050,
        -0.1368, -0.2006], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [False  True False False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8182, 0.1818],
        [0.7610, 0.2390],
        [0.6775, 0.3225],
        [0.6775, 0.3225],
        [0.8182, 0.1818],
        [0.8722, 0.1278],
        [0.7610, 0.2390],
        [0.7610, 0.2390],
        [0.8722, 0.1278],
        [0.8182, 0.1818]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.2006, -0.2731, -0.3893, -0.3893, -1.7050, -2.0569, -0.2731, -0.2731,
        -0.1368, -0.2006], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [False False  True  True  True False False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4838, -0.2550, -0.2550, -0.4838, -0.2550, -0.2550, -1.4912, -0.2550,
         -0.9582, -0.4838],
        [-0.2006, -0.2006, -0.1368, -2.0569, -0.2006, -0.1368, -0.2731, -0.2006,
         -0.3893, -0.2006],
        [-0.2006, -0.2006, -0.1368, -1.1318, -0.2006, -0.1368, -0.2006, -0.2006,
         -0.1368, -0.2006],
        [-0.2006, -1.7050, -2.0569, -1.1318, -0.2006, -0.1368, -1.7050, -1.7050,
         -0.1368, -0.2006],
        [-0.2006, -0.2731, -0.3893, -0.3893, -1.7050, -2.0569, -0.2731, -0.2731,
         -0.1368, -0.2006]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 21: Cumulative reward: 16.022637709975243
INFO:src.train:Episode 21: Reward Differences: 4.873080626130104
INFO:src.train:Episode 21: Average loss: 2.6309447288513184
INFO:src.train:Episode 21: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 22: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 22: Target words: ['apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6385, 0.3615],
        [0.6385, 0.3615],
        [0.6385, 0.3615],
        [0.7968, 0.2032],
        [0.7968, 0.2032],
        [0.7968, 0.2032],
        [0.6385, 0.3615],
        [0.7968, 0.2032],
        [0.7968, 0.2032],
        [0.7968, 0.2032]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4486, -0.4486, -0.4486, -0.2271, -0.2271, -0.2271, -1.0176, -0.2271,
        -1.5936, -0.2271], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True  True  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8401, 0.1599],
        [0.8921, 0.1079],
        [0.7884, 0.2116],
        [0.8401, 0.1599],
        [0.7030, 0.2970],
        [0.8921, 0.1079]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1142, -0.1142, -0.1142, -0.1142, -0.1742, -0.1142, -0.2378, -0.1742,
        -1.2140, -0.1142], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True  True  True False  True False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8401, 0.1599],
        [0.8921, 0.1079],
        [0.8401, 0.1599],
        [0.8401, 0.1599],
        [0.7030, 0.2970],
        [0.8921, 0.1079]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-2.2267, -2.2267, -0.1142, -0.1142, -0.1742, -0.1142, -0.1742, -0.1742,
        -0.3524, -0.1142], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [False False  True  True False  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7030, 0.2970],
        [0.7030, 0.2970],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8401, 0.1599],
        [0.8921, 0.1079],
        [0.8401, 0.1599],
        [0.8401, 0.1599],
        [0.8921, 0.1079],
        [0.8921, 0.1079]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3524, -0.3524, -0.1142, -0.1142, -1.8332, -2.2267, -1.8332, -0.1742,
        -0.1142, -2.2267], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.8921, 0.1079],
        [0.7884, 0.2116],
        [0.7030, 0.2970],
        [0.7884, 0.2116],
        [0.8401, 0.1599],
        [0.8921, 0.1079],
        [0.7030, 0.2970]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1142, -0.1142, -0.1142, -0.1142, -1.5530, -0.3524, -1.5530, -0.1742,
        -0.1142, -0.3524], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True  True  True  True  True  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.4486, -0.4486, -0.4486, -0.2271, -0.2271, -0.2271, -1.0176, -0.2271,
         -1.5936, -0.2271],
        [-0.1142, -0.1142, -0.1142, -0.1142, -0.1742, -0.1142, -0.2378, -0.1742,
         -1.2140, -0.1142],
        [-2.2267, -2.2267, -0.1142, -0.1142, -0.1742, -0.1142, -0.1742, -0.1742,
         -0.3524, -0.1142],
        [-0.3524, -0.3524, -0.1142, -0.1142, -1.8332, -2.2267, -1.8332, -0.1742,
         -0.1142, -2.2267],
        [-0.1142, -0.1142, -0.1142, -0.1142, -1.5530, -0.3524, -1.5530, -0.1742,
         -0.1142, -0.3524]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 22: Cumulative reward: 18.21018722653389
INFO:src.train:Episode 22: Reward Differences: 6.000000089406967
INFO:src.train:Episode 22: Average loss: 3.2712042331695557
INFO:src.train:Episode 22: Last Step Accuracy: 0.8999999761581421
DEBUG:src.train:Episode 23: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 23: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6520, 0.3480],
        [0.6520, 0.3480],
        [0.8091, 0.1909],
        [0.8091, 0.1909],
        [0.8091, 0.1909],
        [0.8091, 0.1909],
        [0.8091, 0.1909],
        [0.8091, 0.1909],
        [0.8091, 0.1909],
        [0.8091, 0.1909]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4277, -1.0555, -1.6561, -1.6561, -0.2118, -0.2118, -1.6561, -1.6561,
        -0.2118, -0.2118], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [ True False  True False False False  True False False False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9018, 0.0982],
        [0.7172, 0.2828],
        [0.8023, 0.1977],
        [0.7172, 0.2828],
        [0.8516, 0.1484],
        [0.8516, 0.1484],
        [0.8023, 0.1977],
        [0.7172, 0.2828],
        [0.8516, 0.1484],
        [0.8516, 0.1484]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1034, -1.2631, -1.6209, -0.3324, -0.1606, -0.1606, -0.2203, -0.3324,
        -0.1606, -1.9079], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [ True False  True  True False False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.9018, 0.0982],
        [0.7172, 0.2828],
        [0.8023, 0.1977],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.8516, 0.1484],
        [0.8516, 0.1484],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.8023, 0.1977]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1034, -0.3324, -0.2203, -0.1034, -0.1606, -1.9079, -0.1606, -0.1034,
        -0.1606, -0.2203], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [ True  True False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9018, 0.0982],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.8023, 0.1977],
        [0.8516, 0.1484],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.8516, 0.1484]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1034, -0.1034, -0.1606, -0.1034, -0.1606, -0.2203, -0.1606, -0.1034,
        -0.1606, -0.1606], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [ True  True False  True False False False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9018, 0.0982],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.8516, 0.1484],
        [0.8516, 0.1484],
        [0.9018, 0.0982],
        [0.8516, 0.1484],
        [0.8516, 0.1484]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1034, -0.1034, -0.1606, -0.1034, -0.1606, -1.9079, -0.1606, -0.1034,
        -1.9079, -0.1606], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [ True  True False  True False  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4277, -1.0555, -1.6561, -1.6561, -0.2118, -0.2118, -1.6561, -1.6561,
         -0.2118, -0.2118],
        [-0.1034, -1.2631, -1.6209, -0.3324, -0.1606, -0.1606, -0.2203, -0.3324,
         -0.1606, -1.9079],
        [-0.1034, -0.3324, -0.2203, -0.1034, -0.1606, -1.9079, -0.1606, -0.1034,
         -0.1606, -0.2203],
        [-0.1034, -0.1034, -0.1606, -0.1034, -0.1606, -0.2203, -0.1606, -0.1034,
         -0.1606, -0.1606],
        [-0.1034, -0.1034, -0.1606, -0.1034, -0.1606, -1.9079, -0.1606, -0.1034,
         -1.9079, -0.1606]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 23: Cumulative reward: 16.751820906996727
INFO:src.train:Episode 23: Reward Differences: 5.270816907286644
INFO:src.train:Episode 23: Average loss: 2.635286808013916
INFO:src.train:Episode 23: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 24: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 24: Target words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6580, 0.3420],
        [0.8151, 0.1849],
        [0.8151, 0.1849],
        [0.8151, 0.1849],
        [0.6580, 0.3420],
        [0.8151, 0.1849],
        [0.8151, 0.1849],
        [0.8151, 0.1849],
        [0.8151, 0.1849],
        [0.8151, 0.1849]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.0730, -0.2044, -0.2044, -0.2044, -0.4185, -1.6882, -0.2044, -0.2044,
        -0.2044, -0.2044], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [False False False False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7244, 0.2756],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.9071, 0.0929],
        [0.7244, 0.2756],
        [0.9071, 0.0929],
        [0.9071, 0.0929],
        [0.8576, 0.1424],
        [0.9071, 0.0929]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.3224, -0.1536, -0.1536, -0.1536, -0.0975, -1.2888, -2.3766, -0.0975,
        -1.9492, -0.0975], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True False False False  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.9071, 0.0929],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.9071, 0.0929],
        [0.7244, 0.2756],
        [0.7244, 0.2756],
        [0.9071, 0.0929],
        [0.8100, 0.1900],
        [0.9071, 0.0929]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.0975, -0.1536, -0.1536, -0.1536, -0.0975, -0.3224, -1.2888, -0.0975,
        -0.2107, -2.3766], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True False False False  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.9071, 0.0929],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.9071, 0.0929],
        [0.9071, 0.0929],
        [0.7244, 0.2756],
        [0.9071, 0.0929],
        [0.8576, 0.1424],
        [0.7244, 0.2756]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.0975, -0.1536, -0.1536, -0.1536, -2.3766, -0.0975, -0.3224, -0.0975,
        -0.1536, -0.3224], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9071, 0.0929],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.8576, 0.1424],
        [0.7244, 0.2756],
        [0.9071, 0.0929],
        [0.9071, 0.0929],
        [0.9071, 0.0929],
        [0.8576, 0.1424],
        [0.9071, 0.0929]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.0975, -1.9492, -1.9492, -0.1536, -0.3224, -0.0975, -0.0975, -2.3766,
        -0.1536, -0.0975], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True  True  True False  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-1.0730, -0.2044, -0.2044, -0.2044, -0.4185, -1.6882, -0.2044, -0.2044,
         -0.2044, -0.2044],
        [-0.3224, -0.1536, -0.1536, -0.1536, -0.0975, -1.2888, -2.3766, -0.0975,
         -1.9492, -0.0975],
        [-0.0975, -0.1536, -0.1536, -0.1536, -0.0975, -0.3224, -1.2888, -0.0975,
         -0.2107, -2.3766],
        [-0.0975, -0.1536, -0.1536, -0.1536, -2.3766, -0.0975, -0.3224, -0.0975,
         -0.1536, -0.3224],
        [-0.0975, -1.9492, -1.9492, -0.1536, -0.3224, -0.0975, -0.0975, -2.3766,
         -0.1536, -0.0975]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 24: Cumulative reward: 17.08326779305935
INFO:src.train:Episode 24: Reward Differences: 5.535974428057671
INFO:src.train:Episode 24: Average loss: 3.0420479774475098
INFO:src.train:Episode 24: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 25: Input words: ['apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 25: Target words: ['orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8137, 0.1863],
        [0.8137, 0.1863],
        [0.6560, 0.3440],
        [0.8137, 0.1863],
        [0.8137, 0.1863],
        [0.6560, 0.3440],
        [0.8137, 0.1863],
        [0.6560, 0.3440],
        [0.8137, 0.1863],
        [0.6560, 0.3440]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2061, -0.2061, -0.4217, -0.2061, -1.6806, -1.0670, -0.2061, -0.4217,
        -1.6806, -0.4217], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False  True  True  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8562, 0.1438],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.8077, 0.1923],
        [0.7221, 0.2779],
        [0.8562, 0.1438],
        [0.9059, 0.0941],
        [0.7221, 0.2779],
        [0.9059, 0.0941]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1552, -2.3634, -2.3634, -0.0988, -0.2135, -0.3255, -1.9394, -0.0988,
        -0.3255, -0.0988], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False False  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8562, 0.1438],
        [0.7221, 0.2779],
        [0.7221, 0.2779],
        [0.9059, 0.0941],
        [0.8562, 0.1438],
        [0.9059, 0.0941],
        [0.8077, 0.1923],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.9059, 0.0941]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1552, -1.2806, -0.3255, -0.0988, -1.9394, -0.0988, -0.2135, -0.0988,
        -0.0988, -0.0988], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8562, 0.1438],
        [0.7221, 0.2779],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.8077, 0.1923],
        [0.9059, 0.0941],
        [0.8562, 0.1438],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.9059, 0.0941]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1552, -0.3255, -0.0988, -0.0988, -0.2135, -0.0988, -1.9394, -0.0988,
        -0.0988, -0.0988], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False  True  True  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8562, 0.1438],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.8562, 0.1438],
        [0.9059, 0.0941],
        [0.8077, 0.1923],
        [0.9059, 0.0941],
        [0.9059, 0.0941],
        [0.9059, 0.0941]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1552, -0.0988, -0.0988, -0.0988, -0.1552, -0.0988, -0.2135, -0.0988,
        -0.0988, -0.0988], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False  True  True  True False  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.2061, -0.2061, -0.4217, -0.2061, -1.6806, -1.0670, -0.2061, -0.4217,
         -1.6806, -0.4217],
        [-0.1552, -2.3634, -2.3634, -0.0988, -0.2135, -0.3255, -1.9394, -0.0988,
         -0.3255, -0.0988],
        [-0.1552, -1.2806, -0.3255, -0.0988, -1.9394, -0.0988, -0.2135, -0.0988,
         -0.0988, -0.0988],
        [-0.1552, -0.3255, -0.0988, -0.0988, -0.2135, -0.0988, -1.9394, -0.0988,
         -0.0988, -0.0988],
        [-0.1552, -0.0988, -0.0988, -0.0988, -0.1552, -0.0988, -0.2135, -0.0988,
         -0.0988, -0.0988]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 25: Cumulative reward: 18.143897831439972
INFO:src.train:Episode 25: Reward Differences: 5.469685047864914
INFO:src.train:Episode 25: Average loss: 2.554457664489746
INFO:src.train:Episode 25: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 26: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 26: Target words: ['orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.8100, 0.1900],
        [0.8100, 0.1900],
        [0.8100, 0.1900],
        [0.6542, 0.3458],
        [0.8100, 0.1900],
        [0.8100, 0.1900],
        [0.8100, 0.1900],
        [0.6542, 0.3458],
        [0.6542, 0.3458],
        [0.6542, 0.3458]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2107, -0.2107, -0.2107, -1.0618, -0.2107, -1.6609, -0.2107, -0.4244,
        -0.4244, -0.4244], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False  True  True  True  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.9031, 0.0969],
        [0.8053, 0.1947],
        [0.9031, 0.0969],
        [0.8053, 0.1947],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.8528, 0.1472],
        [0.8528, 0.1472]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1592, -0.1019, -0.1019, -0.2166, -0.1019, -1.6362, -0.1019, -0.1592,
        -0.1592, -0.1592], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False  True  True False  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.8053, 0.1947],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.8528, 0.1472],
        [0.8528, 0.1472]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1592, -0.1019, -0.1019, -0.1592, -0.1019, -0.2166, -0.1019, -0.1592,
        -0.1592, -0.1592], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False  True  True False  True False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.8528, 0.1472],
        [0.8528, 0.1472]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1592, -0.1019, -0.1019, -0.1592, -0.1019, -0.1592, -0.1019, -1.9161,
        -0.1592, -0.1592], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False  True  True False  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.8528, 0.1472],
        [0.9031, 0.0969],
        [0.8053, 0.1947],
        [0.8528, 0.1472],
        [0.8528, 0.1472]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1592, -2.3344, -0.1019, -1.9161, -0.1019, -0.1592, -0.1019, -0.2166,
        -1.9161, -0.1592], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False False  True  True  True False  True False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.2107, -0.2107, -0.2107, -1.0618, -0.2107, -1.6609, -0.2107, -0.4244,
         -0.4244, -0.4244],
        [-0.1592, -0.1019, -0.1019, -0.2166, -0.1019, -1.6362, -0.1019, -0.1592,
         -0.1592, -0.1592],
        [-0.1592, -0.1019, -0.1019, -0.1592, -0.1019, -0.2166, -0.1019, -0.1592,
         -0.1592, -0.1592],
        [-0.1592, -0.1019, -0.1019, -0.1592, -0.1019, -0.1592, -0.1019, -1.9161,
         -0.1592, -0.1592],
        [-0.1592, -2.3344, -0.1019, -1.9161, -0.1019, -0.1592, -0.1019, -0.2166,
         -1.9161, -0.1592]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 26: Cumulative reward: 16.552952751517296
INFO:src.train:Episode 26: Reward Differences: 5.005659386515617
INFO:src.train:Episode 26: Average loss: 1.9674943685531616
INFO:src.train:Episode 26: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 27: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 27: Target words: ['apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6544, 0.3456],
        [0.6544, 0.3456],
        [0.6544, 0.3456],
        [0.8081, 0.1919],
        [0.6544, 0.3456],
        [0.8081, 0.1919],
        [0.8081, 0.1919],
        [0.6544, 0.3456],
        [0.6544, 0.3456],
        [0.8081, 0.1919]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4241, -0.4241, -0.4241, -0.2131, -0.4241, -0.2131, -1.6506, -1.0623,
        -0.4241, -0.2131], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False  True  True  True  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9017, 0.0983],
        [0.8510, 0.1490],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.8048, 0.1952],
        [0.7198, 0.2802],
        [0.9017, 0.0983],
        [0.9017, 0.0983]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1035, -0.1613, -0.1035, -0.1035, -0.1035, -0.1035, -0.2171, -1.2722,
        -0.1035, -0.1035], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9017, 0.0983],
        [0.8510, 0.1490],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.8510, 0.1490],
        [0.7198, 0.2802],
        [0.9017, 0.0983],
        [0.9017, 0.0983]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1035, -1.9040, -0.1035, -0.1035, -0.1035, -2.3194, -1.9040, -0.3288,
        -0.1035, -2.3194], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True  True  True  True  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.9017, 0.0983],
        [0.8048, 0.1952],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.7198, 0.2802],
        [0.8048, 0.1952],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.7198, 0.2802]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-2.3194, -0.2171, -0.1035, -0.1035, -2.3194, -0.3288, -0.2171, -0.1035,
        -2.3194, -1.2722], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [False False  True  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7198, 0.2802],
        [0.8510, 0.1490],
        [0.9017, 0.0983],
        [0.9017, 0.0983],
        [0.7198, 0.2802],
        [0.9017, 0.0983],
        [0.8510, 0.1490],
        [0.9017, 0.0983],
        [0.7198, 0.2802],
        [0.7198, 0.2802]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.3288, -0.1613, -0.1035, -0.1035, -1.2722, -0.1035, -0.1613, -0.1035,
        -0.3288, -0.3288], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False  True  True False  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.4241, -0.4241, -0.4241, -0.2131, -0.4241, -0.2131, -1.6506, -1.0623,
         -0.4241, -0.2131],
        [-0.1035, -0.1613, -0.1035, -0.1035, -0.1035, -0.1035, -0.2171, -1.2722,
         -0.1035, -0.1035],
        [-0.1035, -1.9040, -0.1035, -0.1035, -0.1035, -2.3194, -1.9040, -0.3288,
         -0.1035, -2.3194],
        [-2.3194, -0.2171, -0.1035, -0.1035, -2.3194, -0.3288, -0.2171, -0.1035,
         -2.3194, -1.2722],
        [-0.3288, -0.1613, -0.1035, -0.1035, -1.2722, -0.1035, -0.1613, -0.1035,
         -0.3288, -0.3288]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 27: Cumulative reward: 17.547293469309807
INFO:src.train:Episode 27: Reward Differences: 5.403395667672157
INFO:src.train:Episode 27: Average loss: 3.181569814682007
INFO:src.train:Episode 27: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 28: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 28: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6488, 0.3512],
        [0.6488, 0.3512],
        [0.7992, 0.2008],
        [0.7992, 0.2008],
        [0.6488, 0.3512],
        [0.6488, 0.3512],
        [0.7992, 0.2008],
        [0.6488, 0.3512],
        [0.6488, 0.3512],
        [0.6488, 0.3512]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4326, -1.0465, -0.2241, -0.2241, -0.4326, -1.0465, -0.2241, -0.4326,
        -1.0465, -1.0465], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [ True False  True False False  True False False False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.8939, 0.1061],
        [0.7126, 0.2874],
        [0.8939, 0.1061],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.7963, 0.2037],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.7126, 0.2874],
        [0.7963, 0.2037]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1122, -0.3389, -2.2433, -0.1716, -0.1716, -1.5913, -0.1716, -0.1716,
        -0.3389, -0.2277], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [ True  True False False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8939, 0.1061],
        [0.8939, 0.1061],
        [0.7126, 0.2874],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.7963, 0.2037],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8939, 0.1061],
        [0.8423, 0.1577]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1122, -0.1122, -0.3389, -0.1716, -0.1716, -0.2277, -0.1716, -0.1716,
        -2.2433, -0.1716], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [ True  True  True False False False False False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8939, 0.1061],
        [0.8939, 0.1061],
        [0.8939, 0.1061],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.7126, 0.2874],
        [0.8423, 0.1577]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-2.2433, -0.1122, -0.1122, -0.1716, -0.1716, -0.1716, -0.1716, -0.1716,
        -1.2467, -1.8470], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [False  True  True False False False False False False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7126, 0.2874],
        [0.8939, 0.1061],
        [0.8939, 0.1061],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.8423, 0.1577],
        [0.7126, 0.2874],
        [0.7963, 0.2037]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.3389, -0.1122, -0.1122, -0.1716, -0.1716, -1.8470, -0.1716, -0.1716,
        -0.3389, -0.2277], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [ True  True  True False False  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4326, -1.0465, -0.2241, -0.2241, -0.4326, -1.0465, -0.2241, -0.4326,
         -1.0465, -1.0465],
        [-0.1122, -0.3389, -2.2433, -0.1716, -0.1716, -1.5913, -0.1716, -0.1716,
         -0.3389, -0.2277],
        [-0.1122, -0.1122, -0.3389, -0.1716, -0.1716, -0.2277, -0.1716, -0.1716,
         -2.2433, -0.1716],
        [-2.2433, -0.1122, -0.1122, -0.1716, -0.1716, -0.1716, -0.1716, -0.1716,
         -1.2467, -1.8470],
        [-0.3389, -0.1122, -0.1122, -0.1716, -0.1716, -1.8470, -0.1716, -0.1716,
         -0.3389, -0.2277]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 28: Cumulative reward: 15.956348359584808
INFO:src.train:Episode 28: Reward Differences: 5.071948766708374
INFO:src.train:Episode 28: Average loss: 2.6039609909057617
INFO:src.train:Episode 28: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 29: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 29: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6401, 0.3599],
        [0.6401, 0.3599],
        [0.6401, 0.3599],
        [0.6401, 0.3599],
        [0.6401, 0.3599],
        [0.6401, 0.3599],
        [0.6401, 0.3599],
        [0.7889, 0.2111],
        [0.6401, 0.3599],
        [0.7889, 0.2111]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.0220, -0.4461, -0.4461, -0.4461, -0.4461, -0.4461, -0.4461, -0.2371,
        -0.4461, -0.2371], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True False False False False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7844, 0.2156],
        [0.8319, 0.1681],
        [0.8319, 0.1681],
        [0.8319, 0.1681],
        [0.8319, 0.1681],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8319, 0.1681],
        [0.8319, 0.1681]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2428, -1.7830, -0.1841, -1.7830, -0.1841, -0.1229, -0.1229, -0.1229,
        -0.1841, -0.1841], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8319, 0.1681],
        [0.7844, 0.2156],
        [0.8319, 0.1681],
        [0.7844, 0.2156],
        [0.8319, 0.1681],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8319, 0.1681],
        [0.8319, 0.1681]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1841, -0.2428, -1.7830, -0.2428, -0.1841, -0.1229, -0.1229, -0.1229,
        -0.1841, -0.1841], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [False False  True False False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8319, 0.1681],
        [0.8319, 0.1681],
        [0.7844, 0.2156],
        [0.8319, 0.1681],
        [0.8319, 0.1681],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8319, 0.1681],
        [0.8319, 0.1681]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1841, -1.7830, -0.2428, -0.1841, -1.7830, -0.1229, -0.1229, -0.1229,
        -0.1841, -0.1841], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [False  True False False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8319, 0.1681],
        [0.7844, 0.2156],
        [0.8319, 0.1681],
        [0.8319, 0.1681],
        [0.7844, 0.2156],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8843, 0.1157],
        [0.8319, 0.1681],
        [0.8319, 0.1681]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-1.7830, -0.2428, -0.1841, -0.1841, -0.2428, -0.1229, -0.1229, -0.1229,
        -0.1841, -0.1841], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True False False False False  True  True  True False False]
DEBUG:src.train:Log Probs: tensor([[-1.0220, -0.4461, -0.4461, -0.4461, -0.4461, -0.4461, -0.4461, -0.2371,
         -0.4461, -0.2371],
        [-0.2428, -1.7830, -0.1841, -1.7830, -0.1841, -0.1229, -0.1229, -0.1229,
         -0.1841, -0.1841],
        [-0.1841, -0.2428, -1.7830, -0.2428, -0.1841, -0.1229, -0.1229, -0.1229,
         -0.1841, -0.1841],
        [-0.1841, -1.7830, -0.2428, -0.1841, -1.7830, -0.1229, -0.1229, -0.1229,
         -0.1841, -0.1841],
        [-1.7830, -0.2428, -0.1841, -0.1841, -0.2428, -0.1229, -0.1229, -0.1229,
         -0.1841, -0.1841]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 29: Cumulative reward: 16.28779523074627
INFO:src.train:Episode 29: Reward Differences: 4.740501865744591
INFO:src.train:Episode 29: Average loss: 2.0094330310821533
INFO:src.train:Episode 29: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 30: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 30: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6402, 0.3598],
        [0.6402, 0.3598],
        [0.6402, 0.3598],
        [0.6402, 0.3598],
        [0.7832, 0.2168],
        [0.6402, 0.3598],
        [0.7832, 0.2168],
        [0.6402, 0.3598],
        [0.6402, 0.3598],
        [0.6402, 0.3598]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4460, -1.0222, -0.4460, -1.0222, -0.2443, -0.4460, -0.2443, -1.0222,
        -1.0222, -0.4460], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False  True  True  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8259, 0.1741],
        [0.7809, 0.2191],
        [0.8786, 0.1214],
        [0.7809, 0.2191],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.7003, 0.2997],
        [0.7003, 0.2997],
        [0.8259, 0.1741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1912, -0.2473, -0.1294, -0.2473, -0.1912, -0.1294, -0.1912, -0.3563,
        -0.3563, -1.7483], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True False False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8259, 0.1741],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8786, 0.1214],
        [0.7809, 0.2191]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1912, -0.1912, -0.1294, -0.1912, -1.7483, -0.1294, -0.1912, -2.1089,
        -2.1089, -0.2473], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True False  True  True False False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8259, 0.1741],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.7809, 0.2191],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.7003, 0.2997],
        [0.7003, 0.2997],
        [0.8259, 0.1741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1912, -0.1912, -0.1294, -0.1912, -0.2473, -0.1294, -0.1912, -0.3563,
        -0.3563, -0.1912], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True False False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8259, 0.1741],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8259, 0.1741],
        [0.8786, 0.1214],
        [0.8786, 0.1214],
        [0.8259, 0.1741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1912, -0.1912, -0.1294, -0.1912, -0.1912, -0.1294, -0.1912, -2.1089,
        -0.1294, -0.1912], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True False False  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4460, -1.0222, -0.4460, -1.0222, -0.2443, -0.4460, -0.2443, -1.0222,
         -1.0222, -0.4460],
        [-0.1912, -0.2473, -0.1294, -0.2473, -0.1912, -0.1294, -0.1912, -0.3563,
         -0.3563, -1.7483],
        [-0.1912, -0.1912, -0.1294, -0.1912, -1.7483, -0.1294, -0.1912, -2.1089,
         -2.1089, -0.2473],
        [-0.1912, -0.1912, -0.1294, -0.1912, -0.2473, -0.1294, -0.1912, -0.3563,
         -0.3563, -0.1912],
        [-0.1912, -0.1912, -0.1294, -0.1912, -0.1912, -0.1294, -0.1912, -2.1089,
         -0.1294, -0.1912]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 30: Cumulative reward: 15.69119082391262
INFO:src.train:Episode 30: Reward Differences: 4.475344344973564
INFO:src.train:Episode 30: Average loss: 2.077078104019165
INFO:src.train:Episode 30: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 31: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 31: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.6432, 0.3568],
        [0.7799, 0.2201]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4414, -0.4414, -0.4414, -0.4414, -1.0304, -0.4414, -0.4414, -1.0304,
        -0.4414, -0.2486], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.8748, 0.1252],
        [0.8222, 0.1778],
        [0.7804, 0.2196],
        [0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.7017, 0.2983],
        [0.8748, 0.1252],
        [0.8222, 0.1778]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1958, -0.1338, -0.1338, -1.7269, -0.2479, -0.1958, -0.1338, -0.3543,
        -0.1338, -1.7269], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.8748, 0.1252],
        [0.7804, 0.2196],
        [0.8222, 0.1778],
        [0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.8748, 0.1252],
        [0.8748, 0.1252],
        [0.7804, 0.2196]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1958, -0.1338, -0.1338, -0.2479, -0.1958, -0.1958, -0.1338, -2.0778,
        -0.1338, -0.2479], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.8748, 0.1252],
        [0.8222, 0.1778],
        [0.8222, 0.1778],
        [0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.7017, 0.2983],
        [0.8748, 0.1252],
        [0.8222, 0.1778]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1958, -0.1338, -0.1338, -0.1958, -0.1958, -0.1958, -2.0778, -1.2096,
        -2.0778, -1.7269], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False False False False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.8222, 0.1778],
        [0.8748, 0.1252],
        [0.8748, 0.1252],
        [0.8222, 0.1778],
        [0.8222, 0.1778],
        [0.8222, 0.1778],
        [0.7017, 0.2983],
        [0.7017, 0.2983],
        [0.7017, 0.2983],
        [0.7804, 0.2196]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1958, -0.1338, -0.1338, -1.7269, -0.1958, -0.1958, -0.3543, -0.3543,
        -0.3543, -0.2479], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True  True False False  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4414, -0.4414, -0.4414, -0.4414, -1.0304, -0.4414, -0.4414, -1.0304,
         -0.4414, -0.2486],
        [-0.1958, -0.1338, -0.1338, -1.7269, -0.2479, -0.1958, -0.1338, -0.3543,
         -0.1338, -1.7269],
        [-0.1958, -0.1338, -0.1338, -0.2479, -0.1958, -0.1958, -0.1338, -2.0778,
         -0.1338, -0.2479],
        [-0.1958, -0.1338, -0.1338, -0.1958, -0.1958, -0.1958, -2.0778, -1.2096,
         -2.0778, -1.7269],
        [-0.1958, -0.1338, -0.1338, -1.7269, -0.1958, -0.1958, -0.3543, -0.3543,
         -0.3543, -0.2479]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 31: Cumulative reward: 16.55295278131962
INFO:src.train:Episode 31: Reward Differences: 5.138238146901131
INFO:src.train:Episode 31: Average loss: 2.68353271484375
INFO:src.train:Episode 31: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 32: Input words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 32: Target words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7766, 0.2234],
        [0.7766, 0.2234],
        [0.7766, 0.2234],
        [0.7766, 0.2234],
        [0.7766, 0.2234],
        [0.6486, 0.3514],
        [0.7766, 0.2234],
        [0.7766, 0.2234],
        [0.7766, 0.2234],
        [0.6486, 0.3514]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2529, -0.2529, -0.2529, -0.2529, -0.2529, -1.0458, -1.4986, -1.4986,
        -0.2529, -1.0458], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [False  True False  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8706, 0.1294],
        [0.7813, 0.2187],
        [0.7051, 0.2949],
        [0.7813, 0.2187],
        [0.8706, 0.1294],
        [0.7051, 0.2949]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2006, -0.1386, -1.7052, -0.1386, -0.1386, -0.2468, -1.2211, -0.2468,
        -0.1386, -0.3494], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [False  True  True  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.7813, 0.2187],
        [0.8706, 0.1294],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.7051, 0.2949],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8706, 0.1294]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.2006, -0.1386, -0.2468, -0.1386, -2.0446, -0.2006, -0.3494, -0.2006,
        -0.1386, -0.1386], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [False  True False  True False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.7051, 0.2949],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8706, 0.1294]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.7052, -0.1386, -0.2006, -0.1386, -0.3494, -0.2006, -0.1386, -0.2006,
        -0.1386, -0.1386], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [ True  True False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7813, 0.2187],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8183, 0.1817],
        [0.8706, 0.1294],
        [0.8706, 0.1294]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2468, -0.1386, -0.2006, -0.1386, -0.1386, -0.2006, -0.1386, -0.2006,
        -0.1386, -0.1386], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [False  True False  True  True False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.2529, -0.2529, -0.2529, -0.2529, -0.2529, -1.0458, -1.4986, -1.4986,
         -0.2529, -1.0458],
        [-0.2006, -0.1386, -1.7052, -0.1386, -0.1386, -0.2468, -1.2211, -0.2468,
         -0.1386, -0.3494],
        [-0.2006, -0.1386, -0.2468, -0.1386, -2.0446, -0.2006, -0.3494, -0.2006,
         -0.1386, -0.1386],
        [-1.7052, -0.1386, -0.2006, -0.1386, -0.3494, -0.2006, -0.1386, -0.2006,
         -0.1386, -0.1386],
        [-0.2468, -0.1386, -0.2006, -0.1386, -0.1386, -0.2006, -0.1386, -0.2006,
         -0.1386, -0.1386]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 32: Cumulative reward: 17.41471466422081
INFO:src.train:Episode 32: Reward Differences: 5.204527527093887
INFO:src.train:Episode 32: Average loss: 2.077341079711914
INFO:src.train:Episode 32: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 33: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 33: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6561, 0.3439],
        [0.6561, 0.3439],
        [0.6561, 0.3439],
        [0.6561, 0.3439],
        [0.7769, 0.2231],
        [0.7769, 0.2231],
        [0.6561, 0.3439],
        [0.6561, 0.3439],
        [0.6561, 0.3439],
        [0.7769, 0.2231]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4215, -0.4215, -1.0673, -0.4215, -0.2524, -0.2524, -0.4215, -1.0673,
        -0.4215, -0.2524], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [ True False False  True False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.7118, 0.2882],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.7118, 0.2882],
        [0.8707, 0.1293],
        [0.8185, 0.1815]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1385, -0.2003, -0.3400, -0.1385, -0.2003, -0.1385, -0.2003, -0.3400,
        -0.1385, -0.2003], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [ True False  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8707, 0.1293],
        [0.8185, 0.1815]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-2.0453, -0.2003, -0.1385, -0.1385, -0.2003, -0.1385, -0.2003, -0.1385,
        -0.1385, -1.7065], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [False False  True  True False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7118, 0.2882],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8707, 0.1293],
        [0.7866, 0.2134]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3400, -0.2003, -0.1385, -0.1385, -0.2003, -0.1385, -0.2003, -0.1385,
        -0.1385, -0.2400], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [ True False  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8185, 0.1815],
        [0.8707, 0.1293],
        [0.8707, 0.1293],
        [0.8185, 0.1815]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1385, -0.2003, -0.1385, -0.1385, -0.2003, -0.1385, -0.2003, -0.1385,
        -2.0453, -1.7065], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [ True False  True  True False  True False  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.4215, -0.4215, -1.0673, -0.4215, -0.2524, -0.2524, -0.4215, -1.0673,
         -0.4215, -0.2524],
        [-0.1385, -0.2003, -0.3400, -0.1385, -0.2003, -0.1385, -0.2003, -0.3400,
         -0.1385, -0.2003],
        [-2.0453, -0.2003, -0.1385, -0.1385, -0.2003, -0.1385, -0.2003, -0.1385,
         -0.1385, -1.7065],
        [-0.3400, -0.2003, -0.1385, -0.1385, -0.2003, -0.1385, -0.2003, -0.1385,
         -0.1385, -0.2400],
        [-0.1385, -0.2003, -0.1385, -0.1385, -0.2003, -0.1385, -0.2003, -0.1385,
         -2.0453, -1.7065]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 33: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 33: Reward Differences: 5.204527527093887
INFO:src.train:Episode 33: Average loss: 1.9775036573410034
INFO:src.train:Episode 33: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 34: Input words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 34: Target words: ['orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6706, 0.3294],
        [0.7835, 0.2165],
        [0.6706, 0.3294],
        [0.7835, 0.2165],
        [0.7835, 0.2165],
        [0.6706, 0.3294],
        [0.7835, 0.2165],
        [0.6706, 0.3294],
        [0.6706, 0.3294],
        [0.6706, 0.3294]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3995, -1.5300, -0.3995, -1.5300, -0.2440, -1.1106, -0.2440, -0.3995,
        -0.3995, -1.1106], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False False  True  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8247, 0.1753],
        [0.7259, 0.2741],
        [0.8762, 0.1238],
        [0.7993, 0.2007],
        [0.8762, 0.1238],
        [0.7993, 0.2007],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.7259, 0.2741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1927, -1.2943, -0.1322, -0.2241, -0.1322, -0.2241, -0.1927, -0.1927,
        -0.1322, -1.2943], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False False  True False  True False False False  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8247, 0.1753],
        [0.7259, 0.2741],
        [0.8762, 0.1238],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.7259, 0.2741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1927, -0.3203, -0.1322, -0.1927, -0.1322, -0.1927, -0.1927, -0.1927,
        -0.1322, -0.3203], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True  True False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.8762, 0.1238],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.8762, 0.1238]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.7415, -0.1322, -0.1322, -0.1927, -0.1322, -0.1927, -0.1927, -0.1927,
        -0.1322, -0.1322], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [ True  True  True False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7993, 0.2007],
        [0.8762, 0.1238],
        [0.8762, 0.1238],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8247, 0.1753],
        [0.8762, 0.1238],
        [0.8762, 0.1238]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2241, -0.1322, -0.1322, -0.1927, -0.1322, -1.7415, -0.1927, -1.7415,
        -0.1322, -0.1322], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True  True False  True  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.3995, -1.5300, -0.3995, -1.5300, -0.2440, -1.1106, -0.2440, -0.3995,
         -0.3995, -1.1106],
        [-0.1927, -1.2943, -0.1322, -0.2241, -0.1322, -0.2241, -0.1927, -0.1927,
         -0.1322, -1.2943],
        [-0.1927, -0.3203, -0.1322, -0.1927, -0.1322, -0.1927, -0.1927, -0.1927,
         -0.1322, -0.3203],
        [-1.7415, -0.1322, -0.1322, -0.1927, -0.1322, -0.1927, -0.1927, -0.1927,
         -0.1322, -0.1322],
        [-0.2241, -0.1322, -0.1322, -0.1927, -0.1322, -1.7415, -0.1927, -1.7415,
         -0.1322, -0.1322]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 34: Cumulative reward: 17.282135918736458
INFO:src.train:Episode 34: Reward Differences: 5.668553188443184
INFO:src.train:Episode 34: Average loss: 2.415513277053833
INFO:src.train:Episode 34: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 35: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 35: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7911, 0.2089],
        [0.6850, 0.3150],
        [0.6850, 0.3150],
        [0.7911, 0.2089],
        [0.7911, 0.2089],
        [0.6850, 0.3150],
        [0.7911, 0.2089],
        [0.7911, 0.2089],
        [0.7911, 0.2089],
        [0.7911, 0.2089]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.5661, -1.1550, -1.1550, -0.2343, -0.2343, -0.3784, -0.2343, -0.2343,
        -0.2343, -0.2343], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [ True False  True False  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8132, 0.1868],
        [0.7405, 0.2595],
        [0.8132, 0.1868],
        [0.8326, 0.1674],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8326, 0.1674],
        [0.8326, 0.1674],
        [0.8326, 0.1674]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-1.6776, -0.3004, -0.2068, -0.1832, -0.1239, -0.1239, -0.1239, -1.7872,
        -0.1832, -0.1832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [ True  True False False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8132, 0.1868],
        [0.8835, 0.1165],
        [0.8326, 0.1674],
        [0.8326, 0.1674],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8132, 0.1868],
        [0.8326, 0.1674],
        [0.8326, 0.1674]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2068, -2.1498, -0.1832, -1.7872, -0.1239, -0.1239, -0.1239, -0.2068,
        -0.1832, -0.1832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False False False  True  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8326, 0.1674],
        [0.7405, 0.2595],
        [0.8326, 0.1674],
        [0.8132, 0.1868],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8326, 0.1674],
        [0.8326, 0.1674],
        [0.8326, 0.1674]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1832, -0.3004, -0.1832, -0.2068, -0.1239, -0.1239, -0.1239, -0.1832,
        -0.1832, -0.1832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False  True False False  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8326, 0.1674],
        [0.8835, 0.1165],
        [0.8326, 0.1674],
        [0.8326, 0.1674],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8835, 0.1165],
        [0.8326, 0.1674],
        [0.8326, 0.1674],
        [0.8326, 0.1674]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-1.7872, -0.1239, -0.1832, -0.1832, -0.1239, -0.1239, -0.1239, -0.1832,
        -0.1832, -1.7872], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [ True  True False False  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-1.5661, -1.1550, -1.1550, -0.2343, -0.2343, -0.3784, -0.2343, -0.2343,
         -0.2343, -0.2343],
        [-1.6776, -0.3004, -0.2068, -0.1832, -0.1239, -0.1239, -0.1239, -1.7872,
         -0.1832, -0.1832],
        [-0.2068, -2.1498, -0.1832, -1.7872, -0.1239, -0.1239, -0.1239, -0.2068,
         -0.1832, -0.1832],
        [-0.1832, -0.3004, -0.1832, -0.2068, -0.1239, -0.1239, -0.1239, -0.1832,
         -0.1832, -0.1832],
        [-1.7872, -0.1239, -0.1832, -0.1832, -0.1239, -0.1239, -0.1239, -0.1832,
         -0.1832, -1.7872]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 35: Cumulative reward: 16.68553152680397
INFO:src.train:Episode 35: Reward Differences: 5.204527527093887
INFO:src.train:Episode 35: Average loss: 2.334050178527832
INFO:src.train:Episode 35: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 36: Input words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 36: Target words: ['apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7978, 0.2022],
        [0.6968, 0.3032],
        [0.6968, 0.3032],
        [0.7978, 0.2022],
        [0.6968, 0.3032],
        [0.6968, 0.3032],
        [0.7978, 0.2022],
        [0.6968, 0.3032],
        [0.6968, 0.3032],
        [0.6968, 0.3032]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.5983, -0.3612, -0.3612, -0.2259, -1.1934, -1.1934, -0.2259, -0.3612,
        -1.1934, -0.3612], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [False  True  True False False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7528, 0.2472],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8394, 0.1606],
        [0.7528, 0.2472],
        [0.8249, 0.1751],
        [0.8394, 0.1606],
        [0.8900, 0.1100],
        [0.7528, 0.2472],
        [0.8394, 0.1606]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2839, -0.1166, -0.1166, -0.1751, -1.3976, -0.1924, -1.8289, -0.1166,
        -0.2839, -0.1751], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [ True  True  True False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8394, 0.1606],
        [0.7528, 0.2472],
        [0.8394, 0.1606],
        [0.8249, 0.1751],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8394, 0.1606]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1166, -0.1166, -0.1166, -1.8289, -0.2839, -0.1751, -0.1924, -0.1166,
        -0.1166, -0.1751], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [ True  True  True  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8249, 0.1751],
        [0.8900, 0.1100],
        [0.8394, 0.1606],
        [0.8394, 0.1606],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8394, 0.1606]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1166, -0.1166, -0.1166, -0.1924, -0.1166, -0.1751, -0.1751, -0.1166,
        -0.1166, -0.1751], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [ True  True  True False  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8394, 0.1606],
        [0.8900, 0.1100],
        [0.8394, 0.1606],
        [0.8394, 0.1606],
        [0.8900, 0.1100],
        [0.8900, 0.1100],
        [0.8394, 0.1606]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1166, -0.1166, -0.1166, -1.8289, -0.1166, -0.1751, -0.1751, -0.1166,
        -0.1166, -0.1751], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [ True  True  True  True  True False False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-1.5983, -0.3612, -0.3612, -0.2259, -1.1934, -1.1934, -0.2259, -0.3612,
         -1.1934, -0.3612],
        [-0.2839, -0.1166, -0.1166, -0.1751, -1.3976, -0.1924, -1.8289, -0.1166,
         -0.2839, -0.1751],
        [-0.1166, -0.1166, -0.1166, -1.8289, -0.2839, -0.1751, -0.1924, -0.1166,
         -0.1166, -0.1751],
        [-0.1166, -0.1166, -0.1166, -0.1924, -0.1166, -0.1751, -0.1751, -0.1166,
         -0.1166, -0.1751],
        [-0.1166, -0.1166, -0.1166, -1.8289, -0.1166, -0.1751, -0.1751, -0.1166,
         -0.1166, -0.1751]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 36: Cumulative reward: 17.746161580085754
INFO:src.train:Episode 36: Reward Differences: 5.469685047864914
INFO:src.train:Episode 36: Average loss: 2.129986524581909
INFO:src.train:Episode 36: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 37: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 37: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7088, 0.2912],
        [0.7088, 0.2912],
        [0.7088, 0.2912],
        [0.7088, 0.2912],
        [0.8056, 0.1944],
        [0.8056, 0.1944],
        [0.8056, 0.1944],
        [0.8056, 0.1944],
        [0.8056, 0.1944],
        [0.7088, 0.2912]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3441, -0.3441, -0.3441, -1.2338, -0.2162, -0.2162, -1.6378, -1.6378,
        -0.2162, -1.2338], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True  True False  True  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8980, 0.1020],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8380, 0.1620],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8380, 0.1620],
        [0.8380, 0.1620],
        [0.8980, 0.1020],
        [0.7659, 0.2341]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1076, -0.1076, -0.1652, -0.1767, -0.1076, -0.1652, -0.1767, -0.1767,
        -0.1076, -0.2667], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True  True False False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8980, 0.1020],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8980, 0.1020],
        [0.8980, 0.1020]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1076, -2.2830, -0.1652, -0.1652, -0.1076, -0.1652, -0.1652, -0.1652,
        -0.1076, -0.1076], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True False False False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8980, 0.1020],
        [0.7659, 0.2341],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8980, 0.1020],
        [0.8980, 0.1020]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1076, -0.2667, -0.1652, -0.1652, -0.1076, -0.1652, -0.1652, -1.8823,
        -0.1076, -0.1076], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True  True False False  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8980, 0.1020],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8980, 0.1020],
        [0.8478, 0.1522],
        [0.8478, 0.1522],
        [0.8380, 0.1620],
        [0.8980, 0.1020],
        [0.8980, 0.1020]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1076, -0.1076, -0.1652, -0.1652, -0.1076, -0.1652, -0.1652, -0.1767,
        -0.1076, -0.1076], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True  True False False  True False False False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.3441, -0.3441, -0.3441, -1.2338, -0.2162, -0.2162, -1.6378, -1.6378,
         -0.2162, -1.2338],
        [-0.1076, -0.1076, -0.1652, -0.1767, -0.1076, -0.1652, -0.1767, -0.1767,
         -0.1076, -0.2667],
        [-0.1076, -2.2830, -0.1652, -0.1652, -0.1076, -0.1652, -0.1652, -0.1652,
         -0.1076, -0.1076],
        [-0.1076, -0.2667, -0.1652, -0.1652, -0.1076, -0.1652, -0.1652, -1.8823,
         -0.1076, -0.1076],
        [-0.1076, -0.1076, -0.1652, -0.1652, -0.1076, -0.1652, -0.1652, -0.1767,
         -0.1076, -0.1076]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 37: Cumulative reward: 16.751820877194405
INFO:src.train:Episode 37: Reward Differences: 5.005659386515617
INFO:src.train:Episode 37: Average loss: 1.7155046463012695
INFO:src.train:Episode 37: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 38: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 38: Target words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7239, 0.2761],
        [0.7239, 0.2761],
        [0.7239, 0.2761],
        [0.8160, 0.1840],
        [0.7239, 0.2761],
        [0.8160, 0.1840],
        [0.7239, 0.2761],
        [0.8160, 0.1840],
        [0.8160, 0.1840],
        [0.8160, 0.1840]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.2870, -1.2870, -0.3231, -0.2034, -0.3231, -0.2034, -0.3231, -0.2034,
        -0.2034, -1.6927], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7821, 0.2179],
        [0.8539, 0.1461],
        [0.8586, 0.1414],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.8586, 0.1414],
        [0.8586, 0.1414],
        [0.9081, 0.0919],
        [0.7821, 0.2179]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2457, -0.1580, -1.9561, -0.0964, -0.0964, -0.0964, -0.1525, -0.1525,
        -0.0964, -0.2457], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9081, 0.0919],
        [0.8586, 0.1414],
        [0.8539, 0.1461],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.8586, 0.1414],
        [0.8586, 0.1414],
        [0.9081, 0.0919],
        [0.9081, 0.0919]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.0964, -0.1525, -1.9234, -0.0964, -0.0964, -0.0964, -1.9561, -0.1525,
        -0.0964, -0.0964], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True  True  True  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9081, 0.0919],
        [0.8586, 0.1414],
        [0.8539, 0.1461],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.8539, 0.1461],
        [0.8586, 0.1414],
        [0.9081, 0.0919],
        [0.9081, 0.0919]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.0964, -1.9561, -1.9234, -0.0964, -0.0964, -0.0964, -0.1580, -0.1525,
        -0.0964, -2.3872], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True  True  True  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.9081, 0.0919],
        [0.8539, 0.1461],
        [0.8539, 0.1461],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.9081, 0.0919],
        [0.8586, 0.1414],
        [0.8586, 0.1414],
        [0.9081, 0.0919],
        [0.7821, 0.2179]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.0964, -0.1580, -0.1580, -0.0964, -0.0964, -0.0964, -1.9561, -0.1525,
        -0.0964, -0.2457], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False False  True  True  True  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-1.2870, -1.2870, -0.3231, -0.2034, -0.3231, -0.2034, -0.3231, -0.2034,
         -0.2034, -1.6927],
        [-0.2457, -0.1580, -1.9561, -0.0964, -0.0964, -0.0964, -0.1525, -0.1525,
         -0.0964, -0.2457],
        [-0.0964, -0.1525, -1.9234, -0.0964, -0.0964, -0.0964, -1.9561, -0.1525,
         -0.0964, -0.0964],
        [-0.0964, -1.9561, -1.9234, -0.0964, -0.0964, -0.0964, -0.1580, -0.1525,
         -0.0964, -2.3872],
        [-0.0964, -0.1580, -0.1580, -0.0964, -0.0964, -0.0964, -1.9561, -0.1525,
         -0.0964, -0.2457]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 38: Cumulative reward: 18.143897846341133
INFO:src.train:Episode 38: Reward Differences: 5.403395667672157
INFO:src.train:Episode 38: Average loss: 2.6281206607818604
INFO:src.train:Episode 38: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 39: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 39: Target words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7305, 0.2695],
        [0.7305, 0.2695],
        [0.7305, 0.2695],
        [0.7305, 0.2695],
        [0.8201, 0.1799],
        [0.7305, 0.2695],
        [0.8201, 0.1799],
        [0.8201, 0.1799],
        [0.8201, 0.1799],
        [0.8201, 0.1799]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3140, -0.3140, -0.3140, -0.3140, -0.1983, -0.3140, -0.1983, -1.7155,
        -0.1983, -0.1983], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [False  True  True  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.8634, 0.1366],
        [0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.7898, 0.2102],
        [0.9130, 0.0870],
        [0.8634, 0.1366]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1468, -0.0910, -0.0910, -0.0910, -0.1468, -0.1468, -0.0910, -0.2359,
        -0.0910, -1.9909], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [False  True  True  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.8634, 0.1366],
        [0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.8619, 0.1381]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1468, -0.0910, -0.0910, -0.0910, -1.9909, -0.1468, -2.4420, -0.0910,
        -0.0910, -0.1487], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [False  True  True  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.8619, 0.1381],
        [0.8634, 0.1366],
        [0.7898, 0.2102],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.8634, 0.1366]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1468, -0.0910, -0.0910, -2.4420, -1.9795, -0.1468, -0.2359, -0.0910,
        -0.0910, -0.1468], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [False  True  True False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.7898, 0.2102],
        [0.8619, 0.1381],
        [0.8634, 0.1366],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.9130, 0.0870],
        [0.8634, 0.1366]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1468, -0.0910, -0.0910, -0.2359, -0.1487, -1.9909, -0.0910, -0.0910,
        -0.0910, -0.1468], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [False  True  True  True False  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.3140, -0.3140, -0.3140, -0.3140, -0.1983, -0.3140, -0.1983, -1.7155,
         -0.1983, -0.1983],
        [-0.1468, -0.0910, -0.0910, -0.0910, -0.1468, -0.1468, -0.0910, -0.2359,
         -0.0910, -1.9909],
        [-0.1468, -0.0910, -0.0910, -0.0910, -1.9909, -0.1468, -2.4420, -0.0910,
         -0.0910, -0.1487],
        [-0.1468, -0.0910, -0.0910, -2.4420, -1.9795, -0.1468, -0.2359, -0.0910,
         -0.0910, -0.1468],
        [-0.1468, -0.0910, -0.0910, -0.2359, -0.1487, -1.9909, -0.0910, -0.0910,
         -0.0910, -0.1468]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 39: Cumulative reward: 17.679872199892998
INFO:src.train:Episode 39: Reward Differences: 5.403395667672157
INFO:src.train:Episode 39: Average loss: 2.282156467437744
INFO:src.train:Episode 39: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 40: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 40: Target words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.8229, 0.1771],
        [0.7372, 0.2628],
        [0.7372, 0.2628],
        [0.7372, 0.2628],
        [0.8229, 0.1771],
        [0.8229, 0.1771],
        [0.7372, 0.2628],
        [0.8229, 0.1771],
        [0.7372, 0.2628],
        [0.7372, 0.2628]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1949, -0.3049, -0.3049, -1.3363, -0.1949, -1.7312, -0.3049, -0.1949,
        -0.3049, -1.3363], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True False False False  True False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.9162, 0.0838],
        [0.8666, 0.1334],
        [0.8666, 0.1334],
        [0.7969, 0.2031],
        [0.9162, 0.0838],
        [0.7969, 0.2031],
        [0.9162, 0.0838],
        [0.8666, 0.1334],
        [0.8666, 0.1334],
        [0.7969, 0.2031]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.0875, -0.1431, -0.1431, -0.2271, -0.0875, -0.2271, -0.0875, -0.1431,
        -0.1431, -0.2271], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True False False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9162, 0.0838],
        [0.8666, 0.1334],
        [0.8666, 0.1334],
        [0.9162, 0.0838],
        [0.9162, 0.0838],
        [0.9162, 0.0838],
        [0.9162, 0.0838],
        [0.8666, 0.1334],
        [0.8666, 0.1334],
        [0.9162, 0.0838]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.0875, -2.0147, -0.1431, -0.0875, -0.0875, -0.0875, -2.4792, -0.1431,
        -0.1431, -0.0875], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9162, 0.0838],
        [0.8684, 0.1316],
        [0.8666, 0.1334],
        [0.9162, 0.0838],
        [0.9162, 0.0838],
        [0.9162, 0.0838],
        [0.7969, 0.2031],
        [0.8666, 0.1334],
        [0.8666, 0.1334],
        [0.9162, 0.0838]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-2.4792, -0.1411, -0.1431, -0.0875, -2.4792, -0.0875, -0.2271, -2.0147,
        -0.1431, -0.0875], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [False False False  True False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7969, 0.2031],
        [0.8666, 0.1334],
        [0.8666, 0.1334],
        [0.9162, 0.0838],
        [0.7969, 0.2031],
        [0.9162, 0.0838],
        [0.9162, 0.0838],
        [0.8684, 0.1316],
        [0.8666, 0.1334],
        [0.9162, 0.0838]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2271, -2.0147, -0.1431, -0.0875, -0.2271, -2.4792, -0.0875, -0.1411,
        -2.0147, -0.0875], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.1949, -0.3049, -0.3049, -1.3363, -0.1949, -1.7312, -0.3049, -0.1949,
         -0.3049, -1.3363],
        [-0.0875, -0.1431, -0.1431, -0.2271, -0.0875, -0.2271, -0.0875, -0.1431,
         -0.1431, -0.2271],
        [-0.0875, -2.0147, -0.1431, -0.0875, -0.0875, -0.0875, -2.4792, -0.1431,
         -0.1431, -0.0875],
        [-2.4792, -0.1411, -0.1431, -0.0875, -2.4792, -0.0875, -0.2271, -2.0147,
         -0.1431, -0.0875],
        [-0.2271, -2.0147, -0.1431, -0.0875, -0.2271, -2.4792, -0.0875, -0.1411,
         -2.0147, -0.0875]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 40: Cumulative reward: 17.414714694023132
INFO:src.train:Episode 40: Reward Differences: 5.469685047864914
INFO:src.train:Episode 40: Average loss: 3.1161115169525146
INFO:src.train:Episode 40: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 41: Input words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 41: Target words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7360, 0.2640],
        [0.8177, 0.1823],
        [0.8177, 0.1823],
        [0.7360, 0.2640],
        [0.7360, 0.2640],
        [0.8177, 0.1823],
        [0.7360, 0.2640],
        [0.8177, 0.1823],
        [0.8177, 0.1823],
        [0.8177, 0.1823]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3065, -0.2013, -0.2013, -0.3065, -0.3065, -1.7020, -0.3065, -0.2013,
        -0.2013, -0.2013], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False  True  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8621, 0.1379],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.7954, 0.2046],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.8621, 0.1379],
        [0.9128, 0.0872]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1484, -0.1484, -0.0912, -0.0912, -0.0912, -1.5866, -0.1484, -0.0912,
        -0.1484, -0.0912], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False  True  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8621, 0.1379],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.7954, 0.2046],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.8621, 0.1379],
        [0.9128, 0.0872]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1484, -0.1484, -0.0912, -0.0912, -0.0912, -0.2289, -0.1484, -0.0912,
        -0.1484, -2.4396], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False  True  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8621, 0.1379],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.8621, 0.1379],
        [0.7954, 0.2046]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.9813, -0.1484, -0.0912, -0.0912, -0.0912, -0.0912, -0.1484, -0.0912,
        -0.1484, -0.2289], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [ True False  True  True  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8668, 0.1332],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.9128, 0.0872],
        [0.8621, 0.1379],
        [0.9128, 0.0872],
        [0.8621, 0.1379],
        [0.9128, 0.0872]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1429, -1.9813, -0.0912, -0.0912, -0.0912, -0.0912, -1.9813, -0.0912,
        -0.1484, -0.0912], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False  True  True  True  True  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.3065, -0.2013, -0.2013, -0.3065, -0.3065, -1.7020, -0.3065, -0.2013,
         -0.2013, -0.2013],
        [-0.1484, -0.1484, -0.0912, -0.0912, -0.0912, -1.5866, -0.1484, -0.0912,
         -0.1484, -0.0912],
        [-0.1484, -0.1484, -0.0912, -0.0912, -0.0912, -0.2289, -0.1484, -0.0912,
         -0.1484, -2.4396],
        [-1.9813, -0.1484, -0.0912, -0.0912, -0.0912, -0.0912, -0.1484, -0.0912,
         -0.1484, -0.2289],
        [-0.1429, -1.9813, -0.0912, -0.0912, -0.0912, -0.0912, -1.9813, -0.0912,
         -0.1484, -0.0912]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 41: Cumulative reward: 17.878740325570107
INFO:src.train:Episode 41: Reward Differences: 5.801131948828697
INFO:src.train:Episode 41: Average loss: 2.1012368202209473
INFO:src.train:Episode 41: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 42: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 42: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7374, 0.2626],
        [0.8143, 0.1857],
        [0.7374, 0.2626],
        [0.7374, 0.2626],
        [0.7374, 0.2626],
        [0.8143, 0.1857],
        [0.8143, 0.1857],
        [0.8143, 0.1857],
        [0.8143, 0.1857],
        [0.8143, 0.1857]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.3371, -0.2055, -0.3046, -1.3371, -0.3046, -0.2055, -0.2055, -0.2055,
        -0.2055, -1.6834], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [ True False  True  True False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8673, 0.1327],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.8673, 0.1327],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.9107, 0.0893],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.7963, 0.2037]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1424, -1.9607, -0.0935, -0.1424, -0.1517, -0.0935, -0.0935, -1.9607,
        -0.0935, -0.2277], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False  True  True False False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8592, 0.1408],
        [0.8673, 0.1327],
        [0.9107, 0.0893],
        [0.8592, 0.1408],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.9107, 0.0893],
        [0.8673, 0.1327],
        [0.9107, 0.0893],
        [0.9107, 0.0893]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1517, -0.1424, -0.0935, -0.1517, -0.1517, -0.0935, -0.0935, -0.1424,
        -0.0935, -0.0935], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False False  True False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8592, 0.1408],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.8592, 0.1408],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.9107, 0.0893],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.9107, 0.0893]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.9607, -0.1517, -0.0935, -0.1517, -0.1517, -0.0935, -0.0935, -0.1517,
        -0.0935, -0.0935], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [ True False  True False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8673, 0.1327],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.8592, 0.1408],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.9107, 0.0893],
        [0.8592, 0.1408],
        [0.9107, 0.0893],
        [0.9107, 0.0893]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1424, -0.1517, -0.0935, -0.1517, -0.1517, -0.0935, -0.0935, -0.1517,
        -0.0935, -0.0935], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False False  True False False  True  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-1.3371, -0.2055, -0.3046, -1.3371, -0.3046, -0.2055, -0.2055, -0.2055,
         -0.2055, -1.6834],
        [-0.1424, -1.9607, -0.0935, -0.1424, -0.1517, -0.0935, -0.0935, -1.9607,
         -0.0935, -0.2277],
        [-0.1517, -0.1424, -0.0935, -0.1517, -0.1517, -0.0935, -0.0935, -0.1424,
         -0.0935, -0.0935],
        [-1.9607, -0.1517, -0.0935, -0.1517, -0.1517, -0.0935, -0.0935, -0.1517,
         -0.0935, -0.0935],
        [-0.1424, -0.1517, -0.0935, -0.1517, -0.1517, -0.0935, -0.0935, -0.1517,
         -0.0935, -0.0935]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 42: Cumulative reward: 17.01697839796543
INFO:src.train:Episode 42: Reward Differences: 4.873080626130104
INFO:src.train:Episode 42: Average loss: 1.5996828079223633
INFO:src.train:Episode 42: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 43: Input words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 43: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7405, 0.2595],
        [0.8132, 0.1868],
        [0.7405, 0.2595],
        [0.7405, 0.2595],
        [0.8132, 0.1868],
        [0.7405, 0.2595],
        [0.7405, 0.2595],
        [0.8132, 0.1868],
        [0.8132, 0.1868],
        [0.7405, 0.2595]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.3492, -1.6775, -1.3492, -1.3492, -0.2068, -0.3004, -1.3492, -1.6775,
        -0.2068, -1.3492], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [False False False False  True False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7996, 0.2004],
        [0.7996, 0.2004],
        [0.7996, 0.2004],
        [0.7996, 0.2004],
        [0.9109, 0.0891],
        [0.8588, 0.1412],
        [0.7996, 0.2004],
        [0.7996, 0.2004],
        [0.8588, 0.1412],
        [0.7996, 0.2004]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2237, -0.2237, -0.2237, -0.2237, -0.0933, -0.1522, -0.2237, -0.2237,
        -0.1522, -0.2237], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.8588, 0.1412],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.8588, 0.1412],
        [0.9109, 0.0891]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.0933, -0.0933, -0.0933, -0.0933, -0.0933, -0.1522, -0.0933, -0.0933,
        -1.9578, -0.0933], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True  True  True  True  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.8588, 0.1412],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.8703, 0.1297],
        [0.9109, 0.0891]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.0933, -0.0933, -2.4184, -2.4184, -0.0933, -0.1522, -0.0933, -0.0933,
        -0.1390, -0.0933], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True  True False False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.7996, 0.2004],
        [0.7996, 0.2004],
        [0.9109, 0.0891],
        [0.8588, 0.1412],
        [0.9109, 0.0891],
        [0.9109, 0.0891],
        [0.8588, 0.1412],
        [0.9109, 0.0891]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.0933, -0.0933, -0.2237, -0.2237, -0.0933, -1.9578, -0.0933, -0.0933,
        -0.1522, -0.0933], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True  True  True  True  True  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[-1.3492, -1.6775, -1.3492, -1.3492, -0.2068, -0.3004, -1.3492, -1.6775,
         -0.2068, -1.3492],
        [-0.2237, -0.2237, -0.2237, -0.2237, -0.0933, -0.1522, -0.2237, -0.2237,
         -0.1522, -0.2237],
        [-0.0933, -0.0933, -0.0933, -0.0933, -0.0933, -0.1522, -0.0933, -0.0933,
         -1.9578, -0.0933],
        [-0.0933, -0.0933, -2.4184, -2.4184, -0.0933, -0.1522, -0.0933, -0.0933,
         -0.1390, -0.0933],
        [-0.0933, -0.0933, -0.2237, -0.2237, -0.0933, -1.9578, -0.0933, -0.0933,
         -0.1522, -0.0933]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 43: Cumulative reward: 18.674212902784348
INFO:src.train:Episode 43: Reward Differences: 5.867421329021454
INFO:src.train:Episode 43: Average loss: 2.8678719997406006
INFO:src.train:Episode 43: Last Step Accuracy: 0.8999999761581421
DEBUG:src.train:Episode 44: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 44: Target words: ['orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7346, 0.2654],
        [0.7346, 0.2654],
        [0.8060, 0.1940],
        [0.8060, 0.1940],
        [0.8060, 0.1940],
        [0.8060, 0.1940],
        [0.8060, 0.1940],
        [0.8060, 0.1940],
        [0.8060, 0.1940],
        [0.8060, 0.1940]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3085, -1.3263, -0.2157, -0.2157, -1.6399, -1.6399, -0.2157, -1.6399,
        -0.2157, -0.2157], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False  True False  True  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8532, 0.1468],
        [0.8670, 0.1330],
        [0.8532, 0.1468],
        [0.9073, 0.0927],
        [0.8670, 0.1330],
        [0.7948, 0.2052],
        [0.9073, 0.0927],
        [0.8670, 0.1330],
        [0.9073, 0.0927],
        [0.8532, 0.1468]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1587, -0.1427, -0.1587, -0.0973, -2.0177, -0.2297, -0.0973, -0.1427,
        -0.0973, -0.1587], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False False False  True  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8532, 0.1468],
        [0.8532, 0.1468],
        [0.8532, 0.1468],
        [0.9073, 0.0927],
        [0.8670, 0.1330],
        [0.9073, 0.0927],
        [0.9073, 0.0927],
        [0.8532, 0.1468],
        [0.9073, 0.0927],
        [0.8532, 0.1468]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1587, -0.1587, -0.1587, -0.0973, -0.1427, -0.0973, -0.0973, -0.1587,
        -0.0973, -1.9189], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False False False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8532, 0.1468],
        [0.8532, 0.1468],
        [0.8532, 0.1468],
        [0.9073, 0.0927],
        [0.8532, 0.1468],
        [0.9073, 0.0927],
        [0.9073, 0.0927],
        [0.8532, 0.1468],
        [0.9073, 0.0927],
        [0.8670, 0.1330]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1587, -0.1587, -1.9189, -0.0973, -1.9189, -0.0973, -0.0973, -1.9189,
        -0.0973, -0.1427], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False False  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8532, 0.1468],
        [0.8532, 0.1468],
        [0.8670, 0.1330],
        [0.9073, 0.0927],
        [0.8670, 0.1330],
        [0.9073, 0.0927],
        [0.9073, 0.0927],
        [0.8670, 0.1330],
        [0.9073, 0.0927],
        [0.8532, 0.1468]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1587, -0.1587, -2.0177, -0.0973, -0.1427, -2.3786, -2.3786, -0.1427,
        -0.0973, -0.1587], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False False  True  True False False False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.3085, -1.3263, -0.2157, -0.2157, -1.6399, -1.6399, -0.2157, -1.6399,
         -0.2157, -0.2157],
        [-0.1587, -0.1427, -0.1587, -0.0973, -2.0177, -0.2297, -0.0973, -0.1427,
         -0.0973, -0.1587],
        [-0.1587, -0.1587, -0.1587, -0.0973, -0.1427, -0.0973, -0.0973, -0.1587,
         -0.0973, -1.9189],
        [-0.1587, -0.1587, -1.9189, -0.0973, -1.9189, -0.0973, -0.0973, -1.9189,
         -0.0973, -0.1427],
        [-0.1587, -0.1587, -2.0177, -0.0973, -0.1427, -2.3786, -2.3786, -0.1427,
         -0.0973, -0.1587]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 44: Cumulative reward: 16.552952721714973
INFO:src.train:Episode 44: Reward Differences: 4.475344344973564
INFO:src.train:Episode 44: Average loss: 2.538053512573242
INFO:src.train:Episode 44: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 45: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 45: Target words: ['apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7205, 0.2795],
        [0.7205, 0.2795],
        [0.7205, 0.2795],
        [0.7923, 0.2077],
        [0.7205, 0.2795],
        [0.7205, 0.2795],
        [0.7205, 0.2795],
        [0.7923, 0.2077],
        [0.7205, 0.2795],
        [0.7205, 0.2795]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3278, -1.2748, -1.2748, -0.2328, -0.3278, -1.2748, -1.2748, -0.2328,
        -0.3278, -0.3278], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [ True False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8984, 0.1016],
        [0.7818, 0.2182],
        [0.8566, 0.1434],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8566, 0.1434],
        [0.7818, 0.2182],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8413, 0.1587]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1072, -0.2461, -0.1548, -0.1072, -0.1072, -0.1548, -1.5225, -0.1072,
        -0.1072, -0.1727], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [ True  True False  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8413, 0.1587],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8413, 0.1587],
        [0.7818, 0.2182],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8413, 0.1587]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1072, -0.1072, -0.1727, -0.1072, -0.1072, -1.8411, -0.2461, -0.1072,
        -0.1072, -0.1727], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [ True  True False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8413, 0.1587],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8566, 0.1434],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8413, 0.1587]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1072, -0.1072, -1.8411, -0.1072, -2.2863, -1.9419, -0.1072, -0.1072,
        -0.1072, -1.8411], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [ True  True  True  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8566, 0.1434],
        [0.8984, 0.1016],
        [0.7818, 0.2182],
        [0.8566, 0.1434],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8984, 0.1016],
        [0.8566, 0.1434]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1072, -0.1072, -0.1548, -2.2863, -0.2461, -0.1548, -2.2863, -0.1072,
        -0.1072, -0.1548], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [ True  True False False  True False False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.3278, -1.2748, -1.2748, -0.2328, -0.3278, -1.2748, -1.2748, -0.2328,
         -0.3278, -0.3278],
        [-0.1072, -0.2461, -0.1548, -0.1072, -0.1072, -0.1548, -1.5225, -0.1072,
         -0.1072, -0.1727],
        [-0.1072, -0.1072, -0.1727, -0.1072, -0.1072, -1.8411, -0.2461, -0.1072,
         -0.1072, -0.1727],
        [-0.1072, -0.1072, -1.8411, -0.1072, -2.2863, -1.9419, -0.1072, -0.1072,
         -0.1072, -1.8411],
        [-0.1072, -0.1072, -0.1548, -2.2863, -0.2461, -0.1548, -2.2863, -0.1072,
         -0.1072, -0.1548]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 45: Cumulative reward: 17.94502967596054
INFO:src.train:Episode 45: Reward Differences: 4.939370006322861
INFO:src.train:Episode 45: Average loss: 2.66764760017395
INFO:src.train:Episode 45: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 46: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 46: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6990, 0.3010],
        [0.7731, 0.2269],
        [0.7731, 0.2269],
        [0.7731, 0.2269],
        [0.6990, 0.3010],
        [0.6990, 0.3010],
        [0.7731, 0.2269],
        [0.7731, 0.2269],
        [0.7731, 0.2269],
        [0.7731, 0.2269]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3581, -0.2573, -0.2573, -0.2573, -0.3581, -0.3581, -0.2573, -0.2573,
        -0.2573, -0.2573], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False  True False False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8239, 0.1761],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8239, 0.1761],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.8239, 0.1761],
        [0.8239, 0.1761]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.7369, -0.1937, -0.1228, -0.1937, -0.1937, -0.1228, -0.1228, -0.1228,
        -1.7369, -1.7369], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [ True False  True False False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.8391, 0.1609],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8239, 0.1761],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.8391, 0.1609],
        [0.8391, 0.1609]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1754, -0.1937, -0.1228, -0.1937, -0.1937, -0.1228, -0.1228, -2.1580,
        -0.1754, -0.1754], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False  True False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8239, 0.1761],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8239, 0.1761],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.7613, 0.2387],
        [0.8239, 0.1761],
        [0.8239, 0.1761]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1937, -1.7369, -0.1228, -0.1937, -0.1937, -0.1228, -0.1228, -0.2728,
        -0.1937, -0.1937], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False  True  True False False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8239, 0.1761],
        [0.8391, 0.1609],
        [0.8844, 0.1156],
        [0.8239, 0.1761],
        [0.8239, 0.1761],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.8844, 0.1156],
        [0.8239, 0.1761],
        [0.8239, 0.1761]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1937, -0.1754, -0.1228, -1.7369, -0.1937, -0.1228, -2.1580, -0.1228,
        -1.7369, -0.1937], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False  True  True False  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.3581, -0.2573, -0.2573, -0.2573, -0.3581, -0.3581, -0.2573, -0.2573,
         -0.2573, -0.2573],
        [-1.7369, -0.1937, -0.1228, -0.1937, -0.1937, -0.1228, -0.1228, -0.1228,
         -1.7369, -1.7369],
        [-0.1754, -0.1937, -0.1228, -0.1937, -0.1937, -0.1228, -0.1228, -2.1580,
         -0.1754, -0.1754],
        [-0.1937, -1.7369, -0.1228, -0.1937, -0.1937, -0.1228, -0.1228, -0.2728,
         -0.1937, -0.1937],
        [-0.1937, -0.1754, -0.1228, -1.7369, -0.1937, -0.1228, -2.1580, -0.1228,
         -1.7369, -0.1937]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 46: Cumulative reward: 16.552952751517296
INFO:src.train:Episode 46: Reward Differences: 4.873080626130104
INFO:src.train:Episode 46: Average loss: 2.2314035892486572
INFO:src.train:Episode 46: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 47: Input words: ['orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 47: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6814, 0.3186],
        [0.7554, 0.2446],
        [0.7554, 0.2446],
        [0.6814, 0.3186],
        [0.7554, 0.2446],
        [0.7554, 0.2446],
        [0.7554, 0.2446],
        [0.6814, 0.3186],
        [0.7554, 0.2446],
        [0.7554, 0.2446]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.1437, -0.2805, -0.2805, -1.1437, -1.4082, -1.4082, -0.2805, -0.3837,
        -0.2805, -0.2805], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [ True False  True  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8233, 0.1767],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8233, 0.1767],
        [0.7437, 0.2563],
        [0.8233, 0.1767],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8074, 0.1926]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1944, -0.2140, -0.1385, -0.1944, -0.2961, -0.1944, -1.6470, -0.1385,
        -0.2140, -1.6470], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False  True False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8074, 0.1926],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8233, 0.1767],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8233, 0.1767]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2140, -0.2140, -0.1385, -0.2140, -0.1385, -0.2140, -0.1944, -0.1385,
        -0.2140, -0.1944], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False  True False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8074, 0.1926],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8074, 0.1926]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.6470, -0.2140, -0.1385, -0.2140, -0.1385, -0.2140, -0.2140, -0.1385,
        -0.2140, -0.2140], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [ True False  True False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8233, 0.1767],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8074, 0.1926],
        [0.8706, 0.1294],
        [0.8074, 0.1926],
        [0.8074, 0.1926]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1944, -0.2140, -0.1385, -0.2140, -2.0450, -0.2140, -0.2140, -0.1385,
        -0.2140, -0.2140], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False  True False False False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-1.1437, -0.2805, -0.2805, -1.1437, -1.4082, -1.4082, -0.2805, -0.3837,
         -0.2805, -0.2805],
        [-0.1944, -0.2140, -0.1385, -0.1944, -0.2961, -0.1944, -1.6470, -0.1385,
         -0.2140, -1.6470],
        [-0.2140, -0.2140, -0.1385, -0.2140, -0.1385, -0.2140, -0.1944, -0.1385,
         -0.2140, -0.1944],
        [-1.6470, -0.2140, -0.1385, -0.2140, -0.1385, -0.2140, -0.2140, -0.1385,
         -0.2140, -0.2140],
        [-0.1944, -0.2140, -0.1385, -0.2140, -2.0450, -0.2140, -0.2140, -0.1385,
         -0.2140, -0.2140]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 47: Cumulative reward: 15.426033303141594
INFO:src.train:Episode 47: Reward Differences: 4.2101868242025375
INFO:src.train:Episode 47: Average loss: 1.7505592107772827
INFO:src.train:Episode 47: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 48: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 48: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6682, 0.3318],
        [0.6682, 0.3318],
        [0.7419, 0.2581],
        [0.7419, 0.2581],
        [0.6682, 0.3318],
        [0.6682, 0.3318],
        [0.7419, 0.2581],
        [0.7419, 0.2581],
        [0.6682, 0.3318],
        [0.6682, 0.3318]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.1033, -0.4031, -1.3542, -1.3542, -0.4031, -1.1033, -0.2986, -1.3542,
        -0.4031, -0.4031], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True  True  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7309, 0.2691],
        [0.8603, 0.1397],
        [0.8119, 0.1881],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.7948, 0.2052]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.3125, -0.1505, -1.6708, -0.2084, -1.5840, -0.2084, -0.2296, -0.2084,
        -1.5840, -1.5840], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True  True False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7309, 0.2691],
        [0.8603, 0.1397],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.8119, 0.1881]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3135, -0.1505, -0.2084, -1.5840, -0.2084, -0.2296, -0.2296, -0.2296,
        -1.6708, -0.2084], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [ True  True False  True False False False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8603, 0.1397],
        [0.8603, 0.1397],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.7948, 0.2052]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1505, -0.1505, -0.2296, -0.2084, -0.2296, -0.2296, -1.5840, -0.2296,
        -0.2084, -1.5840], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [ True  True False False False False  True False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.8603, 0.1397],
        [0.8603, 0.1397],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.8119, 0.1881],
        [0.7948, 0.2052],
        [0.7948, 0.2052],
        [0.8119, 0.1881]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1505, -0.1505, -0.2296, -0.2296, -1.5840, -0.2296, -0.2084, -1.5840,
        -0.2296, -0.2084], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [ True  True False False  True False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-1.1033, -0.4031, -1.3542, -1.3542, -0.4031, -1.1033, -0.2986, -1.3542,
         -0.4031, -0.4031],
        [-1.3125, -0.1505, -1.6708, -0.2084, -1.5840, -0.2084, -0.2296, -0.2084,
         -1.5840, -1.5840],
        [-0.3135, -0.1505, -0.2084, -1.5840, -0.2084, -0.2296, -0.2296, -0.2296,
         -1.6708, -0.2084],
        [-0.1505, -0.1505, -0.2296, -0.2084, -0.2296, -0.2296, -1.5840, -0.2296,
         -0.2084, -1.5840],
        [-0.1505, -0.1505, -0.2296, -0.2296, -1.5840, -0.2296, -0.2084, -1.5840,
         -0.2296, -0.2084]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 48: Cumulative reward: 16.08892710506916
INFO:src.train:Episode 48: Reward Differences: 4.740501865744591
INFO:src.train:Episode 48: Average loss: 2.9923906326293945
INFO:src.train:Episode 48: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 49: Input words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 49: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6484, 0.3516],
        [0.7216, 0.2784],
        [0.6484, 0.3516],
        [0.7216, 0.2784],
        [0.7216, 0.2784],
        [0.6484, 0.3516],
        [0.6484, 0.3516],
        [0.6484, 0.3516],
        [0.6484, 0.3516],
        [0.6484, 0.3516]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.0454, -1.2786, -0.4332, -0.3263, -0.3263, -0.4332, -1.0454, -1.0454,
        -0.4332, -1.0454], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [False False False False  True  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7110, 0.2890],
        [0.7110, 0.2890],
        [0.7756, 0.2244],
        [0.7756, 0.2244],
        [0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.7110, 0.2890],
        [0.7110, 0.2890],
        [0.7756, 0.2244],
        [0.7110, 0.2890]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.3411, -0.3411, -0.2541, -1.4943, -0.1699, -1.8565, -1.2412, -1.2412,
        -0.2541, -0.3411], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [ True  True False  True  True False False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.7756, 0.2244],
        [0.7936, 0.2064],
        [0.8438, 0.1562],
        [0.7110, 0.2890],
        [0.7110, 0.2890],
        [0.7110, 0.2890],
        [0.7756, 0.2244],
        [0.8438, 0.1562]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1699, -0.1699, -0.2541, -0.2312, -0.1699, -0.3411, -0.3411, -1.2412,
        -0.2541, -0.1699], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [ True  True False False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.7756, 0.2244],
        [0.7756, 0.2244],
        [0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.7110, 0.2890],
        [0.7756, 0.2244],
        [0.8438, 0.1562]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1699, -0.1699, -0.2541, -0.2541, -0.1699, -0.1699, -0.1699, -0.3411,
        -1.4943, -1.8565], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [ True  True False False  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.7756, 0.2244],
        [0.7756, 0.2244],
        [0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.8438, 0.1562],
        [0.7936, 0.2064],
        [0.7110, 0.2890]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1699, -0.1699, -0.2541, -0.2541, -0.1699, -0.1699, -1.8565, -0.1699,
        -0.2312, -0.3411], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [ True  True False False  True  True False  True False  True]
DEBUG:src.train:Log Probs: tensor([[-1.0454, -1.2786, -0.4332, -0.3263, -0.3263, -0.4332, -1.0454, -1.0454,
         -0.4332, -1.0454],
        [-0.3411, -0.3411, -0.2541, -1.4943, -0.1699, -1.8565, -1.2412, -1.2412,
         -0.2541, -0.3411],
        [-0.1699, -0.1699, -0.2541, -0.2312, -0.1699, -0.3411, -0.3411, -1.2412,
         -0.2541, -0.1699],
        [-0.1699, -0.1699, -0.2541, -0.2541, -0.1699, -0.1699, -0.1699, -0.3411,
         -1.4943, -1.8565],
        [-0.1699, -0.1699, -0.2541, -0.2541, -0.1699, -0.1699, -1.8565, -0.1699,
         -0.2312, -0.3411]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 49: Cumulative reward: 17.481004044413567
INFO:src.train:Episode 49: Reward Differences: 5.270816907286644
INFO:src.train:Episode 49: Average loss: 2.859445095062256
INFO:src.train:Episode 49: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 50: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 50: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6273, 0.3727],
        [0.6273, 0.3727],
        [0.6273, 0.3727],
        [0.6273, 0.3727],
        [0.7008, 0.2992],
        [0.6273, 0.3727],
        [0.6273, 0.3727],
        [0.7008, 0.2992],
        [0.6273, 0.3727],
        [0.6273, 0.3727]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4663, -0.4663, -0.9871, -0.9871, -0.3556, -0.4663, -0.9871, -0.3556,
        -0.4663, -0.4663], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [False False  True  True False  True False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.7737, 0.2263],
        [0.7737, 0.2263],
        [0.7556, 0.2444],
        [0.8263, 0.1737],
        [0.6897, 0.3103],
        [0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.8263, 0.1737]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2802, -0.2802, -1.4860, -1.4860, -1.4090, -0.1908, -0.3715, -0.2802,
        -0.2802, -0.1908], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [False False  True  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.7737, 0.2263],
        [0.7737, 0.2263],
        [0.7737, 0.2263],
        [0.8263, 0.1737],
        [0.8263, 0.1737],
        [0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.8263, 0.1737]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.2802, -0.2802, -0.2565, -0.2565, -0.2565, -0.1908, -0.1908, -0.2802,
        -1.4090, -0.1908], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.7556, 0.2444],
        [0.8263, 0.1737],
        [0.8263, 0.1737],
        [0.7556, 0.2444],
        [0.7737, 0.2263],
        [0.8263, 0.1737]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.2802, -1.4090, -1.4090, -1.4090, -0.2802, -0.1908, -0.1908, -0.2802,
        -1.4860, -0.1908], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [False  True  True  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7556, 0.2444],
        [0.7737, 0.2263],
        [0.7737, 0.2263],
        [0.7737, 0.2263],
        [0.7556, 0.2444],
        [0.8263, 0.1737],
        [0.8263, 0.1737],
        [0.7556, 0.2444],
        [0.7737, 0.2263],
        [0.8263, 0.1737]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2802, -0.2565, -0.2565, -0.2565, -0.2802, -0.1908, -0.1908, -0.2802,
        -0.2565, -0.1908], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [False False False False False  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.4663, -0.4663, -0.9871, -0.9871, -0.3556, -0.4663, -0.9871, -0.3556,
         -0.4663, -0.4663],
        [-0.2802, -0.2802, -1.4860, -1.4860, -1.4090, -0.1908, -0.3715, -0.2802,
         -0.2802, -0.1908],
        [-0.2802, -0.2802, -0.2565, -0.2565, -0.2565, -0.1908, -0.1908, -0.2802,
         -1.4090, -0.1908],
        [-0.2802, -1.4090, -1.4090, -1.4090, -0.2802, -0.1908, -0.1908, -0.2802,
         -1.4860, -0.1908],
        [-0.2802, -0.2565, -0.2565, -0.2565, -0.2802, -0.1908, -0.1908, -0.2802,
         -0.2565, -0.1908]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 50: Cumulative reward: 16.486663341522217
INFO:src.train:Episode 50: Reward Differences: 4.4090549647808075
INFO:src.train:Episode 50: Average loss: 2.241189956665039
INFO:src.train:Episode 50: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 51: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 51: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6102, 0.3898],
        [0.6102, 0.3898],
        [0.6102, 0.3898],
        [0.6102, 0.3898],
        [0.6841, 0.3159],
        [0.6841, 0.3159],
        [0.6841, 0.3159],
        [0.6841, 0.3159],
        [0.6841, 0.3159],
        [0.6841, 0.3159]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4939, -0.4939, -0.9422, -0.4939, -1.1525, -0.3796, -0.3796, -0.3796,
        -1.1525, -0.3796], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True  True  True False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8123, 0.1877],
        [0.8123, 0.1877],
        [0.7577, 0.2423],
        [0.7397, 0.2603],
        [0.6725, 0.3275],
        [0.8123, 0.1877],
        [0.7397, 0.2603],
        [0.7397, 0.2603],
        [0.7577, 0.2423],
        [0.7397, 0.2603]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2079, -0.2079, -1.4177, -1.3457, -0.3967, -0.2079, -1.3457, -0.3016,
        -1.4177, -0.3016], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True  True  True  True  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.8123, 0.1877],
        [0.8123, 0.1877],
        [0.7577, 0.2423],
        [0.7577, 0.2423],
        [0.8123, 0.1877],
        [0.8123, 0.1877],
        [0.7577, 0.2423],
        [0.7397, 0.2603],
        [0.7577, 0.2423],
        [0.7397, 0.2603]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2079, -0.2079, -0.2774, -0.2774, -1.6727, -0.2079, -0.2774, -1.3457,
        -0.2774, -0.3016], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True  True False False False  True False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8123, 0.1877],
        [0.8123, 0.1877],
        [0.7397, 0.2603],
        [0.7397, 0.2603],
        [0.6725, 0.3275],
        [0.8123, 0.1877],
        [0.7397, 0.2603],
        [0.7577, 0.2423],
        [0.7397, 0.2603],
        [0.7397, 0.2603]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2079, -0.2079, -1.3457, -1.3457, -0.3967, -0.2079, -0.3016, -0.2774,
        -0.3016, -0.3016], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True  True  True  True  True  True False False False False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.8123, 0.1877],
        [0.8123, 0.1877],
        [0.7577, 0.2423],
        [0.7577, 0.2423],
        [0.8123, 0.1877],
        [0.8123, 0.1877],
        [0.7397, 0.2603],
        [0.7397, 0.2603],
        [0.7397, 0.2603],
        [0.7397, 0.2603]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.2079, -0.2079, -1.4177, -1.4177, -0.2079, -0.2079, -0.3016, -0.3016,
        -0.3016, -0.3016], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True  True  True  True  True  True False False False False]
DEBUG:src.train:Log Probs: tensor([[-0.4939, -0.4939, -0.9422, -0.4939, -1.1525, -0.3796, -0.3796, -0.3796,
         -1.1525, -0.3796],
        [-0.2079, -0.2079, -1.4177, -1.3457, -0.3967, -0.2079, -1.3457, -0.3016,
         -1.4177, -0.3016],
        [-0.2079, -0.2079, -0.2774, -0.2774, -1.6727, -0.2079, -0.2774, -1.3457,
         -0.2774, -0.3016],
        [-0.2079, -0.2079, -1.3457, -1.3457, -0.3967, -0.2079, -0.3016, -0.2774,
         -0.3016, -0.3016],
        [-0.2079, -0.2079, -1.4177, -1.4177, -0.2079, -0.2079, -0.3016, -0.3016,
         -0.3016, -0.3016]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 51: Cumulative reward: 17.2158465385437
INFO:src.train:Episode 51: Reward Differences: 5.071948766708374
INFO:src.train:Episode 51: Average loss: 2.8624842166900635
INFO:src.train:Episode 51: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 52: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 52: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6685, 0.3315],
        [0.6685, 0.3315],
        [0.5940, 0.4060],
        [0.6685, 0.3315],
        [0.5940, 0.4060],
        [0.6685, 0.3315],
        [0.5940, 0.4060],
        [0.5940, 0.4060],
        [0.6685, 0.3315],
        [0.6685, 0.3315]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.1042, -0.4027, -0.5208, -0.4027, -0.5208, -0.4027, -0.5208, -0.5208,
        -1.1042, -0.4027], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [ True  True  True  True  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7419, 0.2581],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7244, 0.2756],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7419, 0.2581],
        [0.7985, 0.2015]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2986, -0.2251, -0.2251, -0.2251, -1.6017, -1.2886, -0.2251, -1.6017,
        -1.3543, -0.2251], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True  True  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7244, 0.2756],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.6560, 0.3440],
        [0.7419, 0.2581],
        [0.7985, 0.2015],
        [0.6560, 0.3440],
        [0.7419, 0.2581],
        [0.7985, 0.2015]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3225, -0.2251, -0.2251, -0.2251, -1.0670, -0.2986, -1.6017, -0.4217,
        -0.2986, -1.6017], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True  True  True False False False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7244, 0.2756],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.6560, 0.3440],
        [0.7244, 0.2756],
        [0.6560, 0.3440],
        [0.7985, 0.2015],
        [0.7244, 0.2756],
        [0.6560, 0.3440]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.2886, -0.2251, -0.2251, -0.2251, -0.4217, -0.3225, -0.4217, -0.2251,
        -0.3225, -1.0670], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [ True  True  True  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7419, 0.2581],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7244, 0.2756],
        [0.7985, 0.2015],
        [0.7985, 0.2015],
        [0.7244, 0.2756],
        [0.6560, 0.3440]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2986, -0.2251, -1.6017, -1.6017, -1.6017, -0.3225, -1.6017, -1.6017,
        -0.3225, -0.4217], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True False False False False False False False  True]
DEBUG:src.train:Log Probs: tensor([[-1.1042, -0.4027, -0.5208, -0.4027, -0.5208, -0.4027, -0.5208, -0.5208,
         -1.1042, -0.4027],
        [-0.2986, -0.2251, -0.2251, -0.2251, -1.6017, -1.2886, -0.2251, -1.6017,
         -1.3543, -0.2251],
        [-0.3225, -0.2251, -0.2251, -0.2251, -1.0670, -0.2986, -1.6017, -0.4217,
         -0.2986, -1.6017],
        [-1.2886, -0.2251, -0.2251, -0.2251, -0.4217, -0.3225, -0.4217, -0.2251,
         -0.3225, -1.0670],
        [-0.2986, -0.2251, -1.6017, -1.6017, -1.6017, -0.3225, -1.6017, -1.6017,
         -0.3225, -0.4217]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 52: Cumulative reward: 16.287795200943947
INFO:src.train:Episode 52: Reward Differences: 4.077608063817024
INFO:src.train:Episode 52: Average loss: 2.7567009925842285
INFO:src.train:Episode 52: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 53: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 53: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5764, 0.4236],
        [0.5764, 0.4236],
        [0.5764, 0.4236],
        [0.6490, 0.3510],
        [0.5764, 0.4236],
        [0.5764, 0.4236],
        [0.5764, 0.4236],
        [0.5764, 0.4236],
        [0.5764, 0.4236],
        [0.5764, 0.4236]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.8589, -0.8589, -0.5510, -0.4323, -0.5510, -0.8589, -0.8589, -0.5510,
        -0.8589, -0.5510], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [False  True  True  True False  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6363, 0.3637],
        [0.7209, 0.2791],
        [0.7783, 0.2217],
        [0.7783, 0.2217],
        [0.7039, 0.2961],
        [0.7209, 0.2791],
        [0.6363, 0.3637],
        [0.7039, 0.2961],
        [0.7209, 0.2791],
        [0.7783, 0.2217]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.4522, -1.2761, -1.5064, -1.5064, -1.2172, -0.3273, -1.0113, -0.3511,
        -0.3273, -1.5064], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [ True  True False False  True False False False False False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7783, 0.2217],
        [0.7209, 0.2791],
        [0.6363, 0.3637],
        [0.6363, 0.3637],
        [0.7209, 0.2791],
        [0.7039, 0.2961],
        [0.6363, 0.3637],
        [0.7039, 0.2961],
        [0.7039, 0.2961],
        [0.6363, 0.3637]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2506, -0.3273, -0.4522, -1.0113, -0.3273, -1.2172, -1.0113, -1.2172,
        -1.2172, -1.0113], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [ True False  True False False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7783, 0.2217],
        [0.7039, 0.2961],
        [0.7783, 0.2217],
        [0.6363, 0.3637],
        [0.7039, 0.2961],
        [0.7209, 0.2791],
        [0.6363, 0.3637],
        [0.7209, 0.2791],
        [0.7209, 0.2791],
        [0.6363, 0.3637]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2506, -1.2172, -1.5064, -0.4522, -0.3511, -0.3273, -0.4522, -0.3273,
        -1.2761, -1.0113], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [ True  True False  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7783, 0.2217],
        [0.7209, 0.2791],
        [0.6363, 0.3637],
        [0.7783, 0.2217],
        [0.7039, 0.2961],
        [0.7039, 0.2961],
        [0.7783, 0.2217],
        [0.7039, 0.2961],
        [0.7209, 0.2791],
        [0.6363, 0.3637]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.2506, -1.2761, -1.0113, -0.2506, -0.3511, -0.3511, -0.2506, -0.3511,
        -0.3273, -1.0113], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [ True  True False  True False False  True False False False]
DEBUG:src.train:Log Probs: tensor([[-0.8589, -0.8589, -0.5510, -0.4323, -0.5510, -0.8589, -0.8589, -0.5510,
         -0.8589, -0.5510],
        [-0.4522, -1.2761, -1.5064, -1.5064, -1.2172, -0.3273, -1.0113, -0.3511,
         -0.3273, -1.5064],
        [-0.2506, -0.3273, -0.4522, -1.0113, -0.3273, -1.2172, -1.0113, -1.2172,
         -1.2172, -1.0113],
        [-0.2506, -1.2172, -1.5064, -0.4522, -0.3511, -0.3273, -0.4522, -0.3273,
         -1.2761, -1.0113],
        [-0.2506, -1.2761, -1.0113, -0.2506, -0.3511, -0.3511, -0.2506, -0.3511,
         -0.3273, -1.0113]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 53: Cumulative reward: 16.28779523074627
INFO:src.train:Episode 53: Reward Differences: 4.873080626130104
INFO:src.train:Episode 53: Average loss: 3.6117165088653564
INFO:src.train:Episode 53: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 54: Input words: ['apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 54: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6196, 0.3804],
        [0.6196, 0.3804],
        [0.6196, 0.3804],
        [0.5475, 0.4525],
        [0.5475, 0.4525],
        [0.5475, 0.4525],
        [0.5475, 0.4525],
        [0.6196, 0.3804],
        [0.5475, 0.4525],
        [0.6196, 0.3804]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4786, -0.4786, -0.9666, -0.7930, -0.6024, -0.6024, -0.7930, -0.9666,
        -0.6024, -0.9666], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6722, 0.3278],
        [0.6722, 0.3278],
        [0.6037, 0.3963],
        [0.6853, 0.3147],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.6037, 0.3963],
        [0.6037, 0.3963],
        [0.7456, 0.2544],
        [0.6037, 0.3963]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.3972, -0.3972, -0.9256, -1.1561, -0.2935, -0.2935, -0.9256, -0.5047,
        -0.2935, -0.9256], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False False  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6722, 0.3278],
        [0.6722, 0.3278],
        [0.6037, 0.3963],
        [0.6853, 0.3147],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.6037, 0.3963],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.6037, 0.3963]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3972, -0.3972, -0.5047, -0.3779, -1.3690, -0.2935, -0.5047, -0.2935,
        -0.2935, -0.9256], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6722, 0.3278],
        [0.6722, 0.3278],
        [0.7456, 0.2544],
        [0.6722, 0.3278],
        [0.6037, 0.3963],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.6037, 0.3963]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.3972, -1.1155, -1.3690, -0.3972, -0.9256, -0.2935, -0.2935, -0.2935,
        -0.2935, -0.5047], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False  True False False False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6722, 0.3278],
        [0.6853, 0.3147],
        [0.6037, 0.3963],
        [0.6722, 0.3278],
        [0.6037, 0.3963],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.7456, 0.2544],
        [0.7456, 0.2544]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.3972, -0.3779, -0.9256, -1.1155, -0.5047, -0.2935, -0.2935, -0.2935,
        -0.2935, -0.2935], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False False  True  True  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.4786, -0.4786, -0.9666, -0.7930, -0.6024, -0.6024, -0.7930, -0.9666,
         -0.6024, -0.9666],
        [-0.3972, -0.3972, -0.9256, -1.1561, -0.2935, -0.2935, -0.9256, -0.5047,
         -0.2935, -0.9256],
        [-0.3972, -0.3972, -0.5047, -0.3779, -1.3690, -0.2935, -0.5047, -0.2935,
         -0.2935, -0.9256],
        [-0.3972, -1.1155, -1.3690, -0.3972, -0.9256, -0.2935, -0.2935, -0.2935,
         -0.2935, -0.5047],
        [-0.3972, -0.3779, -0.9256, -1.1155, -0.5047, -0.2935, -0.2935, -0.2935,
         -0.2935, -0.2935]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 54: Cumulative reward: 17.41471467912197
INFO:src.train:Episode 54: Reward Differences: 5.535974428057671
INFO:src.train:Episode 54: Average loss: 3.2541251182556152
INFO:src.train:Episode 54: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 55: Input words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 55: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5229, 0.4771],
        [0.5953, 0.4047],
        [0.5229, 0.4771],
        [0.5229, 0.4771],
        [0.5953, 0.4047],
        [0.5229, 0.4771],
        [0.5953, 0.4047],
        [0.5953, 0.4047],
        [0.5229, 0.4771],
        [0.5229, 0.4771]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6483, -0.5186, -0.6483, -0.6483, -0.5186, -0.6483, -0.9047, -0.9047,
        -0.7401, -0.6483], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True False  True False  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7184, 0.2816],
        [0.7184, 0.2816],
        [0.6461, 0.3539],
        [0.7184, 0.2816],
        [0.6461, 0.3539],
        [0.7184, 0.2816],
        [0.6553, 0.3447],
        [0.5763, 0.4237],
        [0.5763, 0.4237],
        [0.6461, 0.3539]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.3307, -0.3307, -1.0387, -0.3307, -1.0387, -1.2673, -0.4227, -0.8587,
        -0.8587, -1.0387], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True  True  True False False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.7184, 0.2816],
        [0.7184, 0.2816],
        [0.6553, 0.3447],
        [0.7184, 0.2816],
        [0.6553, 0.3447],
        [0.5763, 0.4237],
        [0.6461, 0.3539],
        [0.5763, 0.4237],
        [0.5763, 0.4237],
        [0.6553, 0.3447]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3307, -0.3307, -0.4227, -0.3307, -1.0650, -0.8587, -1.0387, -0.5511,
        -0.5511, -1.0650], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True False  True  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.7184, 0.2816],
        [0.7184, 0.2816],
        [0.6461, 0.3539],
        [0.7184, 0.2816],
        [0.6553, 0.3447],
        [0.5763, 0.4237],
        [0.6553, 0.3447],
        [0.7184, 0.2816],
        [0.7184, 0.2816],
        [0.6553, 0.3447]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3307, -0.3307, -0.4368, -0.3307, -0.4227, -0.5511, -0.4227, -0.3307,
        -1.2673, -0.4227], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.7184, 0.2816],
        [0.7184, 0.2816],
        [0.6461, 0.3539],
        [0.7184, 0.2816],
        [0.6461, 0.3539],
        [0.7184, 0.2816],
        [0.6461, 0.3539],
        [0.7184, 0.2816],
        [0.5763, 0.4237],
        [0.6461, 0.3539]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.3307, -0.3307, -1.0387, -1.2673, -1.0387, -0.3307, -0.4368, -0.3307,
        -0.8587, -0.4368], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True False  True  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.6483, -0.5186, -0.6483, -0.6483, -0.5186, -0.6483, -0.9047, -0.9047,
         -0.7401, -0.6483],
        [-0.3307, -0.3307, -1.0387, -0.3307, -1.0387, -1.2673, -0.4227, -0.8587,
         -0.8587, -1.0387],
        [-0.3307, -0.3307, -0.4227, -0.3307, -1.0650, -0.8587, -1.0387, -0.5511,
         -0.5511, -1.0650],
        [-0.3307, -0.3307, -0.4368, -0.3307, -0.4227, -0.5511, -0.4227, -0.3307,
         -1.2673, -0.4227],
        [-0.3307, -0.3307, -1.0387, -1.2673, -1.0387, -0.3307, -0.4368, -0.3307,
         -0.8587, -0.4368]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 55: Cumulative reward: 17.414714694023132
INFO:src.train:Episode 55: Reward Differences: 5.204527527093887
INFO:src.train:Episode 55: Average loss: 3.34492564201355
INFO:src.train:Episode 55: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 56: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 56: Target words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 0 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 0, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5018, 0.4982],
        [0.5018, 0.4982],
        [0.5731, 0.4269],
        [0.5731, 0.4269],
        [0.5018, 0.4982],
        [0.5731, 0.4269],
        [0.5731, 0.4269],
        [0.5018, 0.4982],
        [0.5731, 0.4269],
        [0.5018, 0.4982]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6967, -0.6967, -0.8513, -0.5567, -0.6967, -0.5567, -0.5567, -0.6967,
        -0.5567, -0.6896], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [ True False False  True  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6284, 0.3716],
        [0.5524, 0.4476],
        [0.5524, 0.4476],
        [0.6927, 0.3073],
        [0.6284, 0.3716],
        [0.6219, 0.3781],
        [0.6927, 0.3073],
        [0.6284, 0.3716],
        [0.6927, 0.3073],
        [0.6219, 0.3781]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.9899, -0.8038, -0.5935, -1.1799, -0.9899, -0.9727, -1.1799, -0.4646,
        -0.3672, -0.9727], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [ True False  True False  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.6284, 0.3716],
        [0.5524, 0.4476],
        [0.6927, 0.3073],
        [0.5524, 0.4476],
        [0.6284, 0.3716],
        [0.6284, 0.3716],
        [0.5524, 0.4476],
        [0.6219, 0.3781],
        [0.6927, 0.3073],
        [0.6284, 0.3716]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.4646, -0.5935, -0.3672, -0.8038, -0.4646, -0.4646, -0.5935, -0.9727,
        -1.1799, -0.4646], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False  True  True False False False  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6219, 0.3781],
        [0.6927, 0.3073],
        [0.6927, 0.3073],
        [0.5524, 0.4476],
        [0.6219, 0.3781],
        [0.6219, 0.3781],
        [0.6927, 0.3073],
        [0.6284, 0.3716],
        [0.5524, 0.4476],
        [0.6219, 0.3781]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.4749, -1.1799, -0.3672, -0.5935, -0.9727, -0.4749, -0.3672, -0.9899,
        -0.8038, -0.9727], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.6219, 0.3781],
        [0.5524, 0.4476],
        [0.6927, 0.3073],
        [0.6927, 0.3073],
        [0.6284, 0.3716],
        [0.6219, 0.3781],
        [0.6927, 0.3073],
        [0.6284, 0.3716],
        [0.5524, 0.4476],
        [0.6284, 0.3716]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.4749, -0.8038, -0.3672, -1.1799, -0.4646, -0.4749, -0.3672, -0.9899,
        -0.8038, -0.9899], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True False False False  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.6967, -0.6967, -0.8513, -0.5567, -0.6967, -0.5567, -0.5567, -0.6967,
         -0.5567, -0.6896],
        [-0.9899, -0.8038, -0.5935, -1.1799, -0.9899, -0.9727, -1.1799, -0.4646,
         -0.3672, -0.9727],
        [-0.4646, -0.5935, -0.3672, -0.8038, -0.4646, -0.4646, -0.5935, -0.9727,
         -1.1799, -0.4646],
        [-0.4749, -1.1799, -0.3672, -0.5935, -0.9727, -0.4749, -0.3672, -0.9899,
         -0.8038, -0.9727],
        [-0.4749, -0.8038, -0.3672, -1.1799, -0.4646, -0.4749, -0.3672, -0.9899,
         -0.8038, -0.9899]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 56: Cumulative reward: 16.552952736616135
INFO:src.train:Episode 56: Reward Differences: 4.674212485551834
INFO:src.train:Episode 56: Average loss: 3.323382616043091
INFO:src.train:Episode 56: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 57: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 57: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5458, 0.4542],
        [0.4758, 0.5242],
        [0.4758, 0.5242],
        [0.5458, 0.4542],
        [0.5458, 0.4542],
        [0.4758, 0.5242],
        [0.5458, 0.4542],
        [0.5458, 0.4542],
        [0.4758, 0.5242],
        [0.5458, 0.4542]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6055, -0.6459, -0.6459, -0.6055, -0.7892, -0.6459, -0.6055, -0.6055,
        -0.7427, -0.6055], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5915, 0.4085],
        [0.5936, 0.4064],
        [0.5224, 0.4776],
        [0.5915, 0.4085],
        [0.5936, 0.4064],
        [0.5936, 0.4064],
        [0.6591, 0.3409],
        [0.6591, 0.3409],
        [0.5915, 0.4085],
        [0.6591, 0.3409]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.5251, -0.9004, -0.7390, -0.5251, -0.9004, -0.5215, -0.4168, -0.4168,
        -0.8953, -0.4168], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [False  True False False  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5915, 0.4085],
        [0.5936, 0.4064],
        [0.5224, 0.4776],
        [0.5915, 0.4085],
        [0.5936, 0.4064],
        [0.5915, 0.4085],
        [0.6591, 0.3409],
        [0.6591, 0.3409],
        [0.5936, 0.4064],
        [0.6591, 0.3409]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.8953, -0.5215, -0.6493, -0.5251, -0.5215, -0.5251, -0.4168, -0.4168,
        -0.9004, -0.4168], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False  True False False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5936, 0.4064],
        [0.5915, 0.4085],
        [0.6591, 0.3409],
        [0.5915, 0.4085],
        [0.5915, 0.4085],
        [0.5915, 0.4085],
        [0.6591, 0.3409],
        [0.6591, 0.3409],
        [0.5936, 0.4064],
        [0.6591, 0.3409]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.9004, -0.5251, -1.0763, -0.5251, -0.5251, -0.8953, -0.4168, -0.4168,
        -0.5215, -0.4168], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5936, 0.4064],
        [0.5915, 0.4085],
        [0.5224, 0.4776],
        [0.5915, 0.4085],
        [0.5915, 0.4085],
        [0.5936, 0.4064],
        [0.6591, 0.3409],
        [0.6591, 0.3409],
        [0.5915, 0.4085],
        [0.6591, 0.3409]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.9004, -0.5251, -0.6493, -0.5251, -0.8953, -0.5215, -0.4168, -0.4168,
        -0.8953, -0.4168], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False  True False  True False  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.6055, -0.6459, -0.6459, -0.6055, -0.7892, -0.6459, -0.6055, -0.6055,
         -0.7427, -0.6055],
        [-0.5251, -0.9004, -0.7390, -0.5251, -0.9004, -0.5215, -0.4168, -0.4168,
         -0.8953, -0.4168],
        [-0.8953, -0.5215, -0.6493, -0.5251, -0.5215, -0.5251, -0.4168, -0.4168,
         -0.9004, -0.4168],
        [-0.9004, -0.5251, -1.0763, -0.5251, -0.5251, -0.8953, -0.4168, -0.4168,
         -0.5215, -0.4168],
        [-0.9004, -0.5251, -0.6493, -0.5251, -0.8953, -0.5215, -0.4168, -0.4168,
         -0.8953, -0.4168]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 57: Cumulative reward: 17.414714694023132
INFO:src.train:Episode 57: Reward Differences: 5.469685047864914
INFO:src.train:Episode 57: Average loss: 3.382995367050171
INFO:src.train:Episode 57: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 58: Input words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 58: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4592, 0.5408],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.5299, 0.4701],
        [0.4592, 0.5408]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6146, -0.7548, -0.6350, -0.7548, -0.7548, -0.7548, -0.6350, -0.6350,
        -0.6350, -0.7783], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False False  True False False False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5037, 0.4963],
        [0.5037, 0.4963],
        [0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.5037, 0.4963],
        [0.5037, 0.4963],
        [0.5740, 0.4260],
        [0.5740, 0.4260],
        [0.5740, 0.4260],
        [0.5740, 0.4260]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6858, -0.7006, -0.4464, -0.7006, -0.7006, -0.7006, -0.5551, -0.5551,
        -0.5551, -0.5551], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [ True False  True False False False False False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.5037, 0.4963],
        [0.5037, 0.4963],
        [0.5740, 0.4260],
        [0.5740, 0.4260],
        [0.5740, 0.4260],
        [0.5740, 0.4260]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.4464, -0.6858, -1.0215, -0.7006, -0.6858, -0.7006, -0.8534, -0.5551,
        -0.8534, -0.5551], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [ True  True False False  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6399, 0.3601],
        [0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.5037, 0.4963],
        [0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.5724, 0.4276],
        [0.5740, 0.4260],
        [0.5724, 0.4276],
        [0.5740, 0.4260]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.0215, -0.4464, -0.6858, -0.7006, -0.4464, -0.7006, -0.5579, -0.8534,
        -0.5579, -0.5551], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False  True  True False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5037, 0.4963],
        [0.6399, 0.3601],
        [0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.6399, 0.3601],
        [0.5037, 0.4963],
        [0.5740, 0.4260],
        [0.5724, 0.4276],
        [0.5740, 0.4260],
        [0.5740, 0.4260]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.7006, -0.4464, -1.0215, -0.7006, -0.4464, -0.6858, -0.5551, -0.8496,
        -0.8534, -0.5551], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False  True False False  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.6146, -0.7548, -0.6350, -0.7548, -0.7548, -0.7548, -0.6350, -0.6350,
         -0.6350, -0.7783],
        [-0.6858, -0.7006, -0.4464, -0.7006, -0.7006, -0.7006, -0.5551, -0.5551,
         -0.5551, -0.5551],
        [-0.4464, -0.6858, -1.0215, -0.7006, -0.6858, -0.7006, -0.8534, -0.5551,
         -0.8534, -0.5551],
        [-1.0215, -0.4464, -0.6858, -0.7006, -0.4464, -0.7006, -0.5579, -0.8534,
         -0.5579, -0.5551],
        [-0.7006, -0.4464, -1.0215, -0.7006, -0.4464, -0.6858, -0.5551, -0.8496,
         -0.8534, -0.5551]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 58: Cumulative reward: 16.28779524564743
INFO:src.train:Episode 58: Reward Differences: 5.204527527093887
INFO:src.train:Episode 58: Average loss: 3.487501621246338
INFO:src.train:Episode 58: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 59: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 59: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5152, 0.4848],
        [0.4431, 0.5569],
        [0.4431, 0.5569],
        [0.4431, 0.5569],
        [0.5152, 0.4848],
        [0.5152, 0.4848],
        [0.4431, 0.5569],
        [0.5152, 0.4848],
        [0.5152, 0.4848],
        [0.5152, 0.4848]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7241, -0.8139, -0.8139, -0.8139, -0.6631, -0.7241, -0.5854, -0.6631,
        -0.7241, -0.7241], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [ True  True False False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5523, 0.4477],
        [0.6224, 0.3776],
        [0.5580, 0.4420],
        [0.5580, 0.4420],
        [0.6224, 0.3776],
        [0.5523, 0.4477],
        [0.4859, 0.5141],
        [0.6224, 0.3776],
        [0.5523, 0.4477],
        [0.4859, 0.5141]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.5936, -0.4742, -0.8164, -0.5834, -0.4742, -0.8037, -0.7218, -0.9738,
        -0.5936, -0.6653], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False  True  True False  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5580, 0.4420],
        [0.6224, 0.3776],
        [0.5523, 0.4477],
        [0.5580, 0.4420],
        [0.6224, 0.3776],
        [0.5523, 0.4477],
        [0.6224, 0.3776],
        [0.4859, 0.5141],
        [0.5580, 0.4420],
        [0.4859, 0.5141]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.8164, -0.4742, -0.5936, -0.5834, -0.9738, -0.8037, -0.4742, -0.6653,
        -0.8164, -0.6653], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [ True  True False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5523, 0.4477],
        [0.6224, 0.3776],
        [0.5580, 0.4420],
        [0.5580, 0.4420],
        [0.4859, 0.5141],
        [0.5523, 0.4477],
        [0.6224, 0.3776],
        [0.4859, 0.5141],
        [0.5523, 0.4477],
        [0.4859, 0.5141]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.5936, -0.4742, -0.8164, -0.5834, -0.6653, -0.5936, -0.9738, -0.6653,
        -0.5936, -0.7218], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False  True  True False False False False False False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5580, 0.4420],
        [0.6224, 0.3776],
        [0.5523, 0.4477],
        [0.5580, 0.4420],
        [0.4859, 0.5141],
        [0.5580, 0.4420],
        [0.4859, 0.5141],
        [0.4859, 0.5141],
        [0.5580, 0.4420],
        [0.6224, 0.3776]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.8164, -0.9738, -0.5936, -0.5834, -0.7218, -0.8164, -0.7218, -0.6653,
        -0.5834, -0.4742], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [ True False False False  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.7241, -0.8139, -0.8139, -0.8139, -0.6631, -0.7241, -0.5854, -0.6631,
         -0.7241, -0.7241],
        [-0.5936, -0.4742, -0.8164, -0.5834, -0.4742, -0.8037, -0.7218, -0.9738,
         -0.5936, -0.6653],
        [-0.8164, -0.4742, -0.5936, -0.5834, -0.9738, -0.8037, -0.4742, -0.6653,
         -0.8164, -0.6653],
        [-0.5936, -0.4742, -0.8164, -0.5834, -0.6653, -0.5936, -0.9738, -0.6653,
         -0.5936, -0.7218],
        [-0.8164, -0.9738, -0.5936, -0.5834, -0.7218, -0.8164, -0.7218, -0.6653,
         -0.5834, -0.4742]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 59: Cumulative reward: 16.28779526054859
INFO:src.train:Episode 59: Reward Differences: 5.005659386515617
INFO:src.train:Episode 59: Average loss: 3.4486520290374756
INFO:src.train:Episode 59: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 60: Input words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 60: Target words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5018, 0.4982],
        [0.5018, 0.4982],
        [0.4298, 0.5702],
        [0.4298, 0.5702],
        [0.4298, 0.5702],
        [0.4298, 0.5702],
        [0.5018, 0.4982],
        [0.4298, 0.5702],
        [0.4298, 0.5702],
        [0.5018, 0.4982]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.6968, -0.6968, -0.8445, -0.5617, -0.5617, -0.5617, -0.6968, -0.5617,
        -0.8445, -0.6968], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False  True False False False False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4709, 0.5291],
        [0.5352, 0.4648],
        [0.5432, 0.4568],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.6061, 0.3939],
        [0.5352, 0.4648]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.7532, -0.7661, -0.6102, -0.6365, -0.6365, -0.6365, -0.6365, -0.7532,
        -0.5007, -0.6251], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [ True  True False False False False False  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.6061, 0.3939],
        [0.5352, 0.4648],
        [0.5432, 0.4568],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.6061, 0.3939],
        [0.6061, 0.3939],
        [0.5432, 0.4568]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.5007, -0.7661, -0.6102, -0.7532, -0.6365, -0.6365, -0.6365, -0.9317,
        -0.9317, -0.6102], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [ True  True False  True False False False False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.6061, 0.3939],
        [0.5352, 0.4648],
        [0.5432, 0.4568],
        [0.6061, 0.3939],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.4709, 0.5291],
        [0.5432, 0.4568]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.9317, -0.6251, -0.6102, -0.5007, -0.6365, -0.7532, -0.7532, -0.6365,
        -0.7532, -0.6102], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False False  True False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4709, 0.5291],
        [0.5432, 0.4568],
        [0.5432, 0.4568],
        [0.6061, 0.3939],
        [0.4709, 0.5291],
        [0.6061, 0.3939],
        [0.6061, 0.3939],
        [0.4709, 0.5291],
        [0.6061, 0.3939],
        [0.5432, 0.4568]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.6365, -0.6102, -0.7836, -0.9317, -0.7532, -0.9317, -0.9317, -0.7532,
        -0.5007, -0.6102], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False  True False  True False False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.6968, -0.6968, -0.8445, -0.5617, -0.5617, -0.5617, -0.6968, -0.5617,
         -0.8445, -0.6968],
        [-0.7532, -0.7661, -0.6102, -0.6365, -0.6365, -0.6365, -0.6365, -0.7532,
         -0.5007, -0.6251],
        [-0.5007, -0.7661, -0.6102, -0.7532, -0.6365, -0.6365, -0.6365, -0.9317,
         -0.9317, -0.6102],
        [-0.9317, -0.6251, -0.6102, -0.5007, -0.6365, -0.7532, -0.7532, -0.6365,
         -0.7532, -0.6102],
        [-0.6365, -0.6102, -0.7836, -0.9317, -0.7532, -0.9317, -0.9317, -0.7532,
         -0.5007, -0.6102]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 60: Cumulative reward: 15.89005896449089
INFO:src.train:Episode 60: Reward Differences: 4.806791245937347
INFO:src.train:Episode 60: Average loss: 3.3209314346313477
INFO:src.train:Episode 60: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 61: Input words: ['apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 61: Target words: ['apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4865, 0.5135],
        [0.4151, 0.5849],
        [0.4865, 0.5135],
        [0.4865, 0.5135],
        [0.4151, 0.5849],
        [0.4151, 0.5849],
        [0.4151, 0.5849],
        [0.4865, 0.5135],
        [0.4865, 0.5135],
        [0.4865, 0.5135]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7206, -0.5363, -0.7206, -0.7206, -0.8792, -0.5363, -0.5363, -0.6665,
        -0.6665, -0.6665], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [ True  True  True False False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5869, 0.4131],
        [0.5156, 0.4844],
        [0.5869, 0.4131],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.5156, 0.4844],
        [0.4541, 0.5459],
        [0.5156, 0.4844],
        [0.5156, 0.4844],
        [0.4541, 0.5459]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.5329, -0.6625, -0.5329, -0.7469, -0.6421, -0.7248, -0.7894, -0.6625,
        -0.7248, -0.6053], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [ True False  True  True False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5869, 0.4131],
        [0.5262, 0.4738],
        [0.5869, 0.4131],
        [0.5156, 0.4844],
        [0.5262, 0.4738],
        [0.5156, 0.4844],
        [0.5869, 0.4131],
        [0.5262, 0.4738],
        [0.5156, 0.4844],
        [0.4541, 0.5459]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.5329, -0.7469, -0.8841, -0.6625, -0.6421, -0.7248, -0.8841, -0.7469,
        -0.7248, -0.6053], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [ True  True False False False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5869, 0.4131],
        [0.5156, 0.4844],
        [0.4541, 0.5459],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.5156, 0.4844],
        [0.4541, 0.5459],
        [0.5156, 0.4844],
        [0.5156, 0.4844],
        [0.4541, 0.5459]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.5329, -0.7248, -0.6053, -0.7469, -0.6421, -0.6625, -0.6053, -0.6625,
        -0.6625, -0.6053], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [ True  True False  True False False False False False False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.5869, 0.4131],
        [0.5156, 0.4844],
        [0.4541, 0.5459],
        [0.5156, 0.4844],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.4541, 0.5459],
        [0.5262, 0.4738],
        [0.5262, 0.4738],
        [0.4541, 0.5459]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.8841, -0.7248, -0.7894, -0.6625, -0.7469, -0.7469, -0.6053, -0.7469,
        -0.6421, -0.6053], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [False  True  True False  True  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.7206, -0.5363, -0.7206, -0.7206, -0.8792, -0.5363, -0.5363, -0.6665,
         -0.6665, -0.6665],
        [-0.5329, -0.6625, -0.5329, -0.7469, -0.6421, -0.7248, -0.7894, -0.6625,
         -0.7248, -0.6053],
        [-0.5329, -0.7469, -0.8841, -0.6625, -0.6421, -0.7248, -0.8841, -0.7469,
         -0.7248, -0.6053],
        [-0.5329, -0.7248, -0.6053, -0.7469, -0.6421, -0.6625, -0.6053, -0.6625,
         -0.6625, -0.6053],
        [-0.8841, -0.7248, -0.7894, -0.6625, -0.7469, -0.7469, -0.6053, -0.7469,
         -0.6421, -0.6053]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 61: Cumulative reward: 16.35408464074135
INFO:src.train:Episode 61: Reward Differences: 4.939370006322861
INFO:src.train:Episode 61: Average loss: 3.3619515895843506
INFO:src.train:Episode 61: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 62: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 62: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3976, 0.6024],
        [0.3976, 0.6024],
        [0.4678, 0.5322],
        [0.3976, 0.6024],
        [0.4678, 0.5322],
        [0.3976, 0.6024],
        [0.3976, 0.6024],
        [0.3976, 0.6024],
        [0.3976, 0.6024],
        [0.4678, 0.5322]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.9224, -0.5068, -0.7597, -0.5068, -0.7597, -0.5068, -0.5068, -0.5068,
        -0.9224, -0.7597], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [False False  True  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5053, 0.4947],
        [0.4340, 0.5660],
        [0.5632, 0.4368],
        [0.4919, 0.5081],
        [0.5053, 0.4947],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.5053, 0.4947],
        [0.5053, 0.4947]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6826, -0.8346, -0.5741, -0.7095, -0.7038, -0.7095, -0.6771, -0.6771,
        -0.7038, -0.6826], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [False  True  True False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.5053, 0.4947],
        [0.5632, 0.4368],
        [0.5632, 0.4368],
        [0.5053, 0.4947],
        [0.4919, 0.5081],
        [0.5053, 0.4947],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.5053, 0.4947]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.6826, -0.8283, -0.5741, -0.6826, -0.6771, -0.7038, -0.7095, -0.6771,
        -0.6771, -0.7038], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [False False  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5053, 0.4947],
        [0.4340, 0.5660],
        [0.5632, 0.4368],
        [0.5053, 0.4947],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.5053, 0.4947],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.4919, 0.5081]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.6826, -0.5692, -0.5741, -0.6826, -0.7095, -0.7095, -0.6826, -0.6771,
        -0.6771, -0.6771], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [False False  True False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5053, 0.4947],
        [0.4340, 0.5660],
        [0.5632, 0.4368],
        [0.5053, 0.4947],
        [0.5053, 0.4947],
        [0.5053, 0.4947],
        [0.5053, 0.4947],
        [0.4919, 0.5081],
        [0.4919, 0.5081],
        [0.4919, 0.5081]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.7038, -0.8346, -0.5741, -0.6826, -0.6826, -0.6826, -0.7038, -0.6771,
        -0.6771, -0.6771], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [ True  True  True False False False  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.9224, -0.5068, -0.7597, -0.5068, -0.7597, -0.5068, -0.5068, -0.5068,
         -0.9224, -0.7597],
        [-0.6826, -0.8346, -0.5741, -0.7095, -0.7038, -0.7095, -0.6771, -0.6771,
         -0.7038, -0.6826],
        [-0.6826, -0.8283, -0.5741, -0.6826, -0.6771, -0.7038, -0.7095, -0.6771,
         -0.6771, -0.7038],
        [-0.6826, -0.5692, -0.5741, -0.6826, -0.7095, -0.7095, -0.6826, -0.6771,
         -0.6771, -0.6771],
        [-0.7038, -0.8346, -0.5741, -0.6826, -0.6826, -0.6826, -0.7038, -0.6771,
         -0.6771, -0.6771]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 62: Cumulative reward: 17.215846568346024
INFO:src.train:Episode 62: Reward Differences: 5.469685047864914
INFO:src.train:Episode 62: Average loss: 3.7264785766601562
INFO:src.train:Episode 62: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 63: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 63: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3859, 0.6141],
        [0.3859, 0.6141],
        [0.4540, 0.5460],
        [0.3859, 0.6141],
        [0.3859, 0.6141],
        [0.4540, 0.5460],
        [0.4540, 0.5460],
        [0.3859, 0.6141],
        [0.3859, 0.6141],
        [0.4540, 0.5460]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4876, -0.9522, -0.6052, -0.4876, -0.4876, -0.6052, -0.6052, -0.4876,
        -0.4876, -0.6052], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [ True  True  True False  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4731, 0.5269],
        [0.5456, 0.4544],
        [0.4731, 0.5269],
        [0.4180, 0.5820],
        [0.4731, 0.5269],
        [0.4731, 0.5269],
        [0.4731, 0.5269],
        [0.4731, 0.5269],
        [0.4731, 0.5269],
        [0.4180, 0.5820]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6407, -0.6058, -0.7485, -0.8723, -0.6407, -0.6407, -0.6407, -0.7485,
        -0.6407, -0.5413], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [ True  True False  True  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4731, 0.5269],
        [0.5456, 0.4544],
        [0.4899, 0.5101],
        [0.5456, 0.4544],
        [0.4731, 0.5269],
        [0.4731, 0.5269],
        [0.4731, 0.5269],
        [0.4899, 0.5101],
        [0.4731, 0.5269],
        [0.4180, 0.5820]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple'
 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.7485, -0.6058, -0.6732, -0.6058, -0.6407, -0.7485, -0.7485, -0.7135,
        -0.7485, -0.5413], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [False  True  True  True  True False False False False False]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4899, 0.5101],
        [0.5456, 0.4544],
        [0.4731, 0.5269],
        [0.5456, 0.4544],
        [0.4731, 0.5269],
        [0.4899, 0.5101],
        [0.4899, 0.5101],
        [0.4899, 0.5101],
        [0.4899, 0.5101],
        [0.4180, 0.5820]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.6732, -0.7888, -0.7485, -0.7888, -0.6407, -0.7135, -0.6732, -0.7135,
        -0.7135, -0.8723], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [ True False False False  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4731, 0.5269],
        [0.4180, 0.5820],
        [0.4899, 0.5101],
        [0.4180, 0.5820],
        [0.4731, 0.5269],
        [0.4899, 0.5101],
        [0.4731, 0.5269],
        [0.4899, 0.5101],
        [0.4899, 0.5101],
        [0.5456, 0.4544]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.6407, -0.8723, -0.6732, -0.8723, -0.7485, -0.7135, -0.7485, -0.7135,
        -0.6732, -0.7888], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [ True  True  True  True False False False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4876, -0.9522, -0.6052, -0.4876, -0.4876, -0.6052, -0.6052, -0.4876,
         -0.4876, -0.6052],
        [-0.6407, -0.6058, -0.7485, -0.8723, -0.6407, -0.6407, -0.6407, -0.7485,
         -0.6407, -0.5413],
        [-0.7485, -0.6058, -0.6732, -0.6058, -0.6407, -0.7485, -0.7485, -0.7135,
         -0.7485, -0.5413],
        [-0.6732, -0.7888, -0.7485, -0.7888, -0.6407, -0.7135, -0.6732, -0.7135,
         -0.7135, -0.8723],
        [-0.6407, -0.8723, -0.6732, -0.8723, -0.7485, -0.7135, -0.7485, -0.7135,
         -0.6732, -0.7888]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 63: Cumulative reward: 16.4866633862257
INFO:src.train:Episode 63: Reward Differences: 4.873080626130104
INFO:src.train:Episode 63: Average loss: 3.3210787773132324
INFO:src.train:Episode 63: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 64: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 64: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4417, 0.5583],
        [0.4417, 0.5583],
        [0.4417, 0.5583],
        [0.3779, 0.6221],
        [0.4417, 0.5583],
        [0.3779, 0.6221],
        [0.3779, 0.6221],
        [0.4417, 0.5583],
        [0.4417, 0.5583],
        [0.3779, 0.6221]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.8172, -0.5828, -0.8172, -0.4747, -0.5828, -0.9730, -0.4747, -0.5828,
        -0.5828, -0.4747], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True False False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5301, 0.4699],
        [0.4045, 0.5955],
        [0.4762, 0.5238],
        [0.4045, 0.5955],
        [0.4574, 0.5426],
        [0.5301, 0.4699],
        [0.4574, 0.5426],
        [0.4574, 0.5426],
        [0.4045, 0.5955],
        [0.4574, 0.5426]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6347, -0.5184, -0.6466, -0.5184, -0.6113, -0.7552, -0.6113, -0.7823,
        -0.9051, -0.7823], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True False  True False  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.5301, 0.4699],
        [0.4045, 0.5955],
        [0.4574, 0.5426],
        [0.4045, 0.5955],
        [0.4574, 0.5426],
        [0.4045, 0.5955],
        [0.4574, 0.5426],
        [0.4762, 0.5238],
        [0.5301, 0.4699],
        [0.4762, 0.5238]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.6347, -0.5184, -0.6113, -0.5184, -0.7823, -0.9051, -0.7823, -0.6466,
        -0.7552, -0.6466], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True False  True False False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.5301, 0.4699],
        [0.4045, 0.5955],
        [0.4574, 0.5426],
        [0.4045, 0.5955],
        [0.4762, 0.5238],
        [0.5301, 0.4699],
        [0.4762, 0.5238],
        [0.4574, 0.5426],
        [0.4045, 0.5955],
        [0.4574, 0.5426]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.7552, -0.5184, -0.7823, -0.5184, -0.7419, -0.6347, -0.6466, -0.6113,
        -0.5184, -0.6113], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4045, 0.5955],
        [0.4045, 0.5955],
        [0.4762, 0.5238],
        [0.4045, 0.5955],
        [0.4762, 0.5238],
        [0.5301, 0.4699],
        [0.4574, 0.5426],
        [0.4574, 0.5426],
        [0.4045, 0.5955],
        [0.4574, 0.5426]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.9051, -0.5184, -0.6466, -0.5184, -0.6466, -0.7552, -0.7823, -0.6113,
        -0.5184, -0.7823], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True False  True False  True False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.8172, -0.5828, -0.8172, -0.4747, -0.5828, -0.9730, -0.4747, -0.5828,
         -0.5828, -0.4747],
        [-0.6347, -0.5184, -0.6466, -0.5184, -0.6113, -0.7552, -0.6113, -0.7823,
         -0.9051, -0.7823],
        [-0.6347, -0.5184, -0.6113, -0.5184, -0.7823, -0.9051, -0.7823, -0.6466,
         -0.7552, -0.6466],
        [-0.7552, -0.5184, -0.7823, -0.5184, -0.7419, -0.6347, -0.6466, -0.6113,
         -0.5184, -0.6113],
        [-0.9051, -0.5184, -0.6466, -0.5184, -0.6466, -0.7552, -0.7823, -0.6113,
         -0.5184, -0.7823]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 64: Cumulative reward: 16.221505865454674
INFO:src.train:Episode 64: Reward Differences: 4.740501865744591
INFO:src.train:Episode 64: Average loss: 3.124211072921753
INFO:src.train:Episode 64: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 65: Input words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 65: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3669, 0.6331],
        [0.4250, 0.5750],
        [0.3669, 0.6331],
        [0.3669, 0.6331],
        [0.4250, 0.5750],
        [0.3669, 0.6331],
        [0.3669, 0.6331],
        [0.3669, 0.6331],
        [0.4250, 0.5750],
        [0.3669, 0.6331]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4571, -0.8557, -0.4571, -1.0027, -0.5534, -0.4571, -1.0027, -0.4571,
        -0.5534, -0.4571], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True  True False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4370, 0.5630],
        [0.5087, 0.4913],
        [0.4370, 0.5630],
        [0.4575, 0.5425],
        [0.3874, 0.6126],
        [0.4370, 0.5630],
        [0.4575, 0.5425],
        [0.3874, 0.6126],
        [0.4370, 0.5630],
        [0.3874, 0.6126]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.5744, -0.6760, -0.5744, -0.7819, -0.4900, -0.5744, -0.6117, -0.9483,
        -0.5744, -0.4900], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4370, 0.5630],
        [0.5087, 0.4913],
        [0.4370, 0.5630],
        [0.4575, 0.5425],
        [0.3874, 0.6126],
        [0.4370, 0.5630],
        [0.4370, 0.5630],
        [0.5087, 0.4913],
        [0.4370, 0.5630],
        [0.3874, 0.6126]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.8279, -0.6760, -0.5744, -0.6117, -0.4900, -0.8279, -0.5744, -0.6760,
        -0.8279, -0.4900], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [False  True  True  True False False  True  True False False]
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4575, 0.5425],
        [0.5087, 0.4913],
        [0.4370, 0.5630],
        [0.4370, 0.5630],
        [0.3874, 0.6126],
        [0.4575, 0.5425],
        [0.4370, 0.5630],
        [0.5087, 0.4913],
        [0.4575, 0.5425],
        [0.3874, 0.6126]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.6117, -0.7106, -0.8279, -0.5744, -0.9483, -0.6117, -0.5744, -0.6760,
        -0.6117, -0.4900], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True False False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4370, 0.5630],
        [0.3874, 0.6126],
        [0.4575, 0.5425],
        [0.4370, 0.5630],
        [0.5087, 0.4913],
        [0.4370, 0.5630],
        [0.4370, 0.5630],
        [0.5087, 0.4913],
        [0.4370, 0.5630],
        [0.3874, 0.6126]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.8279, -0.4900, -0.6117, -0.8279, -0.6760, -0.5744, -0.5744, -0.7106,
        -0.8279, -0.9483], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.4571, -0.8557, -0.4571, -1.0027, -0.5534, -0.4571, -1.0027, -0.4571,
         -0.5534, -0.4571],
        [-0.5744, -0.6760, -0.5744, -0.7819, -0.4900, -0.5744, -0.6117, -0.9483,
         -0.5744, -0.4900],
        [-0.8279, -0.6760, -0.5744, -0.6117, -0.4900, -0.8279, -0.5744, -0.6760,
         -0.8279, -0.4900],
        [-0.6117, -0.7106, -0.8279, -0.5744, -0.9483, -0.6117, -0.5744, -0.6760,
         -0.6117, -0.4900],
        [-0.8279, -0.4900, -0.6117, -0.8279, -0.6760, -0.5744, -0.5744, -0.7106,
         -0.8279, -0.9483]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 65: Cumulative reward: 17.21584652364254
INFO:src.train:Episode 65: Reward Differences: 4.873080626130104
INFO:src.train:Episode 65: Average loss: 3.199744462966919
INFO:src.train:Episode 65: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 66: Input words: ['apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 66: Target words: ['apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4078, 0.5922],
        [0.3552, 0.6448],
        [0.4078, 0.5922],
        [0.4078, 0.5922],
        [0.3552, 0.6448],
        [0.4078, 0.5922],
        [0.3552, 0.6448],
        [0.4078, 0.5922],
        [0.3552, 0.6448],
        [0.3552, 0.6448]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.5240, -0.4387, -0.8969, -0.5240, -0.4387, -0.5240, -0.4387, -0.5240,
        -0.4387, -1.0352], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [False  True False  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3701, 0.6299],
        [0.4165, 0.5835],
        [0.4385, 0.5615],
        [0.4165, 0.5835],
        [0.4165, 0.5835],
        [0.3701, 0.6299],
        [0.4165, 0.5835],
        [0.4165, 0.5835],
        [0.3701, 0.6299],
        [0.4868, 0.5132]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.4622, -0.5387, -0.8245, -0.5387, -0.5387, -0.9940, -0.5387, -0.8759,
        -0.4622, -0.6671], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [False  True False  True  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3701, 0.6299],
        [0.4165, 0.5835],
        [0.4385, 0.5615],
        [0.4165, 0.5835],
        [0.4165, 0.5835],
        [0.4868, 0.5132],
        [0.4165, 0.5835],
        [0.4385, 0.5615],
        [0.3701, 0.6299],
        [0.3701, 0.6299]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.9940, -0.8759, -0.5771, -0.8759, -0.8759, -0.6671, -0.5387, -0.5771,
        -0.4622, -0.9940], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False False False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.4868, 0.5132],
        [0.4385, 0.5615],
        [0.4165, 0.5835],
        [0.4385, 0.5615],
        [0.4385, 0.5615],
        [0.3701, 0.6299],
        [0.4165, 0.5835],
        [0.4165, 0.5835],
        [0.3701, 0.6299],
        [0.4868, 0.5132]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.6671, -0.8245, -0.5387, -0.8245, -0.8245, -0.4622, -0.5387, -0.5387,
        -0.9940, -0.6671], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [False False  True False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3701, 0.6299],
        [0.4385, 0.5615],
        [0.4165, 0.5835],
        [0.4385, 0.5615],
        [0.4385, 0.5615],
        [0.3701, 0.6299],
        [0.4165, 0.5835],
        [0.4165, 0.5835],
        [0.4868, 0.5132],
        [0.3701, 0.6299]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.9940, -0.8245, -0.5387, -0.8245, -0.5771, -0.9940, -0.8759, -0.8759,
        -0.6671, -0.4622], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False  True  True False False False False]
DEBUG:src.train:Log Probs: tensor([[-0.5240, -0.4387, -0.8969, -0.5240, -0.4387, -0.5240, -0.4387, -0.5240,
         -0.4387, -1.0352],
        [-0.4622, -0.5387, -0.8245, -0.5387, -0.5387, -0.9940, -0.5387, -0.8759,
         -0.4622, -0.6671],
        [-0.9940, -0.8759, -0.5771, -0.8759, -0.8759, -0.6671, -0.5387, -0.5771,
         -0.4622, -0.9940],
        [-0.6671, -0.8245, -0.5387, -0.8245, -0.8245, -0.4622, -0.5387, -0.5387,
         -0.9940, -0.6671],
        [-0.9940, -0.8245, -0.5387, -0.8245, -0.5771, -0.9940, -0.8759, -0.8759,
         -0.6671, -0.4622]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 66: Cumulative reward: 16.221505865454674
INFO:src.train:Episode 66: Reward Differences: 4.740501865744591
INFO:src.train:Episode 66: Average loss: 3.2401437759399414
INFO:src.train:Episode 66: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 67: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 67: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3443, 0.6557],
        [0.3443, 0.6557],
        [0.3443, 0.6557],
        [0.3443, 0.6557],
        [0.3918, 0.6082],
        [0.3918, 0.6082],
        [0.3918, 0.6082],
        [0.3918, 0.6082],
        [0.3918, 0.6082],
        [0.3443, 0.6557]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.0663, -0.4220, -1.0663, -0.4220, -0.4972, -0.4972, -0.4972, -0.4972,
        -0.9371, -0.4220], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True False False  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4654, 0.5346],
        [0.3548, 0.6452],
        [0.4202, 0.5798],
        [0.3978, 0.6022],
        [0.3978, 0.6022],
        [0.3548, 0.6452],
        [0.3548, 0.6452],
        [0.3548, 0.6452],
        [0.4654, 0.5346],
        [0.3978, 0.6022]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.6262, -0.4382, -0.8670, -0.5071, -0.5071, -0.4382, -1.0361, -0.4382,
        -0.7649, -0.9219], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [False False False  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3548, 0.6452],
        [0.3548, 0.6452],
        [0.4202, 0.5798],
        [0.3978, 0.6022],
        [0.3978, 0.6022],
        [0.3548, 0.6452],
        [0.4654, 0.5346],
        [0.3548, 0.6452],
        [0.4654, 0.5346],
        [0.4202, 0.5798]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.4382, -0.4382, -0.5451, -0.5071, -0.5071, -1.0361, -0.6262, -0.4382,
        -0.6262, -0.8670], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [False False  True  True  True  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3548, 0.6452],
        [0.3548, 0.6452],
        [0.3978, 0.6022],
        [0.3978, 0.6022],
        [0.3978, 0.6022],
        [0.4654, 0.5346],
        [0.3548, 0.6452],
        [0.3548, 0.6452],
        [0.3548, 0.6452],
        [0.4202, 0.5798]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.4382, -1.0361, -0.5071, -0.5071, -0.5071, -0.6262, -1.0361, -0.4382,
        -1.0361, -0.8670], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [False  True  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3548, 0.6452],
        [0.4654, 0.5346],
        [0.3978, 0.6022],
        [0.3978, 0.6022],
        [0.3978, 0.6022],
        [0.3548, 0.6452],
        [0.4654, 0.5346],
        [0.3548, 0.6452],
        [0.4654, 0.5346],
        [0.4202, 0.5798]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 1, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-1.0361, -0.7649, -0.9219, -0.5071, -0.5071, -0.4382, -0.7649, -1.0361,
        -0.7649, -0.5451], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True  True False  True  True False  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-1.0663, -0.4220, -1.0663, -0.4220, -0.4972, -0.4972, -0.4972, -0.4972,
         -0.9371, -0.4220],
        [-0.6262, -0.4382, -0.8670, -0.5071, -0.5071, -0.4382, -1.0361, -0.4382,
         -0.7649, -0.9219],
        [-0.4382, -0.4382, -0.5451, -0.5071, -0.5071, -1.0361, -0.6262, -0.4382,
         -0.6262, -0.8670],
        [-0.4382, -1.0361, -0.5071, -0.5071, -0.5071, -0.6262, -1.0361, -0.4382,
         -1.0361, -0.8670],
        [-1.0361, -0.7649, -0.9219, -0.5071, -0.5071, -0.4382, -0.7649, -1.0361,
         -0.7649, -0.5451]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 67: Cumulative reward: 17.481004059314728
INFO:src.train:Episode 67: Reward Differences: 5.867421329021454
INFO:src.train:Episode 67: Average loss: 3.8941903114318848
INFO:src.train:Episode 67: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 68: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 68: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3767, 0.6233],
        [0.3767, 0.6233],
        [0.3767, 0.6233],
        [0.3341, 0.6659],
        [0.3767, 0.6233],
        [0.3341, 0.6659],
        [0.3767, 0.6233],
        [0.3341, 0.6659],
        [0.3767, 0.6233],
        [0.3767, 0.6233]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.4728, -0.4728, -0.4728, -1.0964, -0.4728, -0.4066, -0.9762, -0.4066,
        -0.4728, -0.4728], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [False False False False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3406, 0.6594],
        [0.3406, 0.6594],
        [0.3406, 0.6594],
        [0.4030, 0.5970],
        [0.3802, 0.6198],
        [0.3406, 0.6594],
        [0.4449, 0.5551],
        [0.3802, 0.6198],
        [0.3406, 0.6594],
        [0.3802, 0.6198]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.4165, -1.0769, -1.0769, -0.5159, -0.4783, -0.4165, -0.5886, -0.9672,
        -0.4165, -0.4783], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [False  True  True  True  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3406, 0.6594],
        [0.4449, 0.5551],
        [0.4449, 0.5551],
        [0.3802, 0.6198],
        [0.3802, 0.6198],
        [0.3406, 0.6594],
        [0.3406, 0.6594],
        [0.4030, 0.5970],
        [0.3406, 0.6594],
        [0.3802, 0.6198]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.4165, -0.5886, -0.8099, -0.9672, -0.9672, -1.0769, -0.4165, -0.5159,
        -1.0769, -0.4783], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [False False  True False False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3406, 0.6594],
        [0.3406, 0.6594],
        [0.4449, 0.5551],
        [0.4030, 0.5970],
        [0.4030, 0.5970],
        [0.4449, 0.5551],
        [0.3406, 0.6594],
        [0.3802, 0.6198],
        [0.4449, 0.5551],
        [0.3802, 0.6198]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.4165, -0.4165, -0.5886, -0.9087, -0.5159, -0.5886, -1.0769, -0.4783,
        -0.8099, -0.9672], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [False False False False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3406, 0.6594],
        [0.3406, 0.6594],
        [0.3406, 0.6594],
        [0.4030, 0.5970],
        [0.3802, 0.6198],
        [0.3406, 0.6594],
        [0.4449, 0.5551],
        [0.3802, 0.6198],
        [0.4449, 0.5551],
        [0.4030, 0.5970]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-1.0769, -0.4165, -1.0769, -0.9087, -0.4783, -1.0769, -0.5886, -0.4783,
        -0.8099, -0.9087], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [ True False  True False  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[-0.4728, -0.4728, -0.4728, -1.0964, -0.4728, -0.4066, -0.9762, -0.4066,
         -0.4728, -0.4728],
        [-0.4165, -1.0769, -1.0769, -0.5159, -0.4783, -0.4165, -0.5886, -0.9672,
         -0.4165, -0.4783],
        [-0.4165, -0.5886, -0.8099, -0.9672, -0.9672, -1.0769, -0.4165, -0.5159,
         -1.0769, -0.4783],
        [-0.4165, -0.4165, -0.5886, -0.9087, -0.5159, -0.5886, -1.0769, -0.4783,
         -0.8099, -0.9672],
        [-1.0769, -0.4165, -1.0769, -0.9087, -0.4783, -1.0769, -0.5886, -0.4783,
         -0.8099, -0.9087]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 68: Cumulative reward: 16.751820906996727
INFO:src.train:Episode 68: Reward Differences: 5.270816907286644
INFO:src.train:Episode 68: Average loss: 3.5899341106414795
INFO:src.train:Episode 68: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 69: Input words: ['orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 69: Target words: ['apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 0 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 0, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3259, 0.6741],
        [0.3644, 0.6356],
        [0.3259, 0.6741],
        [0.3644, 0.6356],
        [0.3644, 0.6356],
        [0.3644, 0.6356],
        [0.3644, 0.6356],
        [0.3259, 0.6741],
        [0.3644, 0.6356],
        [0.3259, 0.6741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3943, -1.0096, -0.3943, -0.4531, -1.0096, -0.4531, -1.0096, -1.1212,
        -0.4531, -0.3943], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [False False  True  True False False False False False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3298, 0.6702],
        [0.3887, 0.6113],
        [0.3662, 0.6338],
        [0.3662, 0.6338],
        [0.3887, 0.6113],
        [0.3298, 0.6702],
        [0.3887, 0.6113],
        [0.3887, 0.6113],
        [0.3298, 0.6702],
        [0.3662, 0.6338]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 0, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.1092, -0.4921, -1.0044, -1.0044, -0.9450, -0.4002, -0.9450, -0.4921,
        -0.4002, -0.4561], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [ True  True False False False False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4274, 0.5726],
        [0.3662, 0.6338],
        [0.3887, 0.6113],
        [0.3887, 0.6113],
        [0.3887, 0.6113],
        [0.3298, 0.6702],
        [0.3887, 0.6113],
        [0.3662, 0.6338],
        [0.3298, 0.6702],
        [0.3662, 0.6338]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.8499, -0.4561, -0.4921, -0.9450, -0.4921, -0.4002, -0.4921, -0.4561,
        -0.4002, -0.4561], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [ True  True  True False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4274, 0.5726],
        [0.3662, 0.6338],
        [0.3662, 0.6338],
        [0.3887, 0.6113],
        [0.3662, 0.6338],
        [0.3298, 0.6702],
        [0.3662, 0.6338],
        [0.3662, 0.6338],
        [0.3298, 0.6702],
        [0.3662, 0.6338]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.8499, -1.0044, -1.0044, -0.9450, -1.0044, -0.4002, -0.4561, -0.4561,
        -0.4002, -0.4561], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [ True False False False False False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4274, 0.5726],
        [0.3887, 0.6113],
        [0.3887, 0.6113],
        [0.3887, 0.6113],
        [0.3887, 0.6113],
        [0.3298, 0.6702],
        [0.3662, 0.6338],
        [0.3662, 0.6338],
        [0.3298, 0.6702],
        [0.3662, 0.6338]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.8499, -0.4921, -0.9450, -0.4921, -0.4921, -1.1092, -0.4561, -0.4561,
        -1.1092, -0.4561], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [ True  True False  True  True  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.3943, -1.0096, -0.3943, -0.4531, -1.0096, -0.4531, -1.0096, -1.1212,
         -0.4531, -0.3943],
        [-1.1092, -0.4921, -1.0044, -1.0044, -0.9450, -0.4002, -0.9450, -0.4921,
         -0.4002, -0.4561],
        [-0.8499, -0.4561, -0.4921, -0.9450, -0.4921, -0.4002, -0.4921, -0.4561,
         -0.4002, -0.4561],
        [-0.8499, -1.0044, -1.0044, -0.9450, -1.0044, -0.4002, -0.4561, -0.4561,
         -0.4002, -0.4561],
        [-0.8499, -0.4921, -0.9450, -0.4921, -0.4921, -1.1092, -0.4561, -0.4561,
         -1.1092, -0.4561]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 69: Cumulative reward: 17.746161609888077
INFO:src.train:Episode 69: Reward Differences: 6.1325788497924805
INFO:src.train:Episode 69: Average loss: 4.074048042297363
INFO:src.train:Episode 69: Last Step Accuracy: 0.8999999761581421
DEBUG:src.train:Episode 70: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 70: Target words: ['apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3202, 0.6798],
        [0.3202, 0.6798],
        [0.3560, 0.6440],
        [0.3202, 0.6798],
        [0.3202, 0.6798],
        [0.3202, 0.6798],
        [0.3202, 0.6798],
        [0.3560, 0.6440],
        [0.3202, 0.6798],
        [0.3202, 0.6798]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3859, -0.3859, -0.4401, -0.3859, -1.1389, -1.1389, -0.3859, -1.0327,
        -1.1389, -1.1389], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.3792, 0.6208],
        [0.4161, 0.5839],
        [0.3568, 0.6432],
        [0.3792, 0.6208],
        [0.4161, 0.5839],
        [0.3792, 0.6208]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.3889, -0.3889, -0.3889, -0.3889, -0.4767, -0.5380, -1.0306, -0.4767,
        -0.5380, -0.4767], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False False False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.3568, 0.6432],
        [0.3222, 0.6778],
        [0.3792, 0.6208],
        [0.3568, 0.6432],
        [0.3222, 0.6778],
        [0.3568, 0.6432]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3889, -0.3889, -1.1325, -1.1325, -0.4413, -1.1325, -0.4767, -0.4413,
        -0.3889, -0.4413], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True  True  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3222, 0.6778],
        [0.3222, 0.6778],
        [0.4161, 0.5839],
        [0.4161, 0.5839],
        [0.3568, 0.6432],
        [0.4161, 0.5839],
        [0.3568, 0.6432],
        [0.3568, 0.6432],
        [0.3222, 0.6778],
        [0.3568, 0.6432]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.3889, -1.1325, -0.8769, -0.8769, -0.4413, -0.5380, -0.4413, -1.0306,
        -0.3889, -0.4413], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False  True  True  True  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3222, 0.6778],
        [0.4161, 0.5839],
        [0.4161, 0.5839],
        [0.4161, 0.5839],
        [0.3568, 0.6432],
        [0.3222, 0.6778],
        [0.3568, 0.6432],
        [0.3792, 0.6208],
        [0.3222, 0.6778],
        [0.3568, 0.6432]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.3889, -0.5380, -0.8769, -0.5380, -0.4413, -0.3889, -0.4413, -0.4767,
        -0.3889, -0.4413], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True False  True False  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.3859, -0.3859, -0.4401, -0.3859, -1.1389, -1.1389, -0.3859, -1.0327,
         -1.1389, -1.1389],
        [-0.3889, -0.3889, -0.3889, -0.3889, -0.4767, -0.5380, -1.0306, -0.4767,
         -0.5380, -0.4767],
        [-0.3889, -0.3889, -1.1325, -1.1325, -0.4413, -1.1325, -0.4767, -0.4413,
         -0.3889, -0.4413],
        [-0.3889, -1.1325, -0.8769, -0.8769, -0.4413, -0.5380, -0.4413, -1.0306,
         -0.3889, -0.4413],
        [-0.3889, -0.5380, -0.8769, -0.5380, -0.4413, -0.3889, -0.4413, -0.4767,
         -0.3889, -0.4413]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 70: Cumulative reward: 17.01697839796543
INFO:src.train:Episode 70: Reward Differences: 5.138238146901131
INFO:src.train:Episode 70: Average loss: 3.1349620819091797
INFO:src.train:Episode 70: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 71: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 71: Target words: ['orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3124, 0.6876],
        [0.3124, 0.6876],
        [0.3448, 0.6552],
        [0.3124, 0.6876],
        [0.3124, 0.6876],
        [0.3448, 0.6552],
        [0.3124, 0.6876],
        [0.3124, 0.6876],
        [0.3448, 0.6552],
        [0.3124, 0.6876]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3745, -0.3745, -0.4228, -1.1635, -0.3745, -1.0649, -0.3745, -0.3745,
        -0.4228, -1.1635], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [ True False  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3439, 0.6561],
        [0.3124, 0.6876],
        [0.3439, 0.6561],
        [0.3661, 0.6339],
        [0.3439, 0.6561],
        [0.4003, 0.5997],
        [0.3124, 0.6876],
        [0.3439, 0.6561],
        [0.3439, 0.6561],
        [0.4003, 0.5997]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.4214, -0.3745, -0.4214, -0.4559, -0.4214, -0.5114, -0.3745, -0.4214,
        -1.0675, -0.5114], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [ True False  True  True  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3439, 0.6561],
        [0.3124, 0.6876],
        [0.3439, 0.6561],
        [0.3439, 0.6561],
        [0.3439, 0.6561],
        [0.3124, 0.6876],
        [0.3124, 0.6876],
        [0.3439, 0.6561],
        [0.3661, 0.6339],
        [0.3124, 0.6876]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'apple' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.4214, -1.1635, -1.0675, -0.4214, -1.0675, -1.1635, -0.3745, -1.0675,
        -1.0048, -0.3745], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [ True  True False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3439, 0.6561],
        [0.4003, 0.5997],
        [0.3661, 0.6339],
        [0.3439, 0.6561],
        [0.3661, 0.6339],
        [0.4003, 0.5997],
        [0.3124, 0.6876],
        [0.3661, 0.6339],
        [0.3661, 0.6339],
        [0.3124, 0.6876]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.0675, -0.5114, -0.4559, -0.4214, -1.0048, -0.5114, -1.1635, -1.0048,
        -0.4559, -0.3745], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [False False  True  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3661, 0.6339],
        [0.3124, 0.6876],
        [0.3439, 0.6561],
        [0.3439, 0.6561],
        [0.3661, 0.6339],
        [0.3124, 0.6876],
        [0.4003, 0.5997],
        [0.3661, 0.6339],
        [0.3439, 0.6561],
        [0.3124, 0.6876]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.4559, -1.1635, -1.0675, -1.0675, -1.0048, -1.1635, -0.5114, -1.0048,
        -1.0675, -1.1635], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [ True  True False False False  True False False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.3745, -0.3745, -0.4228, -1.1635, -0.3745, -1.0649, -0.3745, -0.3745,
         -0.4228, -1.1635],
        [-0.4214, -0.3745, -0.4214, -0.4559, -0.4214, -0.5114, -0.3745, -0.4214,
         -1.0675, -0.5114],
        [-0.4214, -1.1635, -1.0675, -0.4214, -1.0675, -1.1635, -0.3745, -1.0675,
         -1.0048, -0.3745],
        [-1.0675, -0.5114, -0.4559, -0.4214, -1.0048, -0.5114, -1.1635, -1.0048,
         -0.4559, -0.3745],
        [-0.4559, -1.1635, -1.0675, -1.0675, -1.0048, -1.1635, -0.5114, -1.0048,
         -1.0675, -1.1635]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 71: Cumulative reward: 16.08892710506916
INFO:src.train:Episode 71: Reward Differences: 4.740501865744591
INFO:src.train:Episode 71: Average loss: 3.399683952331543
INFO:src.train:Episode 71: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 72: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 72: Target words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3089, 0.6911],
        [0.3089, 0.6911],
        [0.3387, 0.6613],
        [0.3089, 0.6911],
        [0.3387, 0.6613],
        [0.3387, 0.6613],
        [0.3387, 0.6613],
        [0.3387, 0.6613],
        [0.3387, 0.6613],
        [0.3089, 0.6911]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.1747, -1.1747, -1.0827, -1.1747, -0.4135, -0.4135, -1.0827, -0.4135,
        -0.4135, -0.3695], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [False False False False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3587, 0.6413],
        [0.3587, 0.6413],
        [0.3587, 0.6413],
        [0.3587, 0.6413],
        [0.3089, 0.6911],
        [0.3369, 0.6631],
        [0.3907, 0.6093],
        [0.3089, 0.6911],
        [0.3089, 0.6911],
        [0.3089, 0.6911]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.4442, -0.4442, -0.4442, -1.0253, -1.1747, -0.4108, -0.9399, -0.3695,
        -0.3695, -1.1747], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True  True  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3369, 0.6631],
        [0.3369, 0.6631],
        [0.3369, 0.6631],
        [0.3587, 0.6413],
        [0.3907, 0.6093],
        [0.3369, 0.6631],
        [0.3907, 0.6093],
        [0.3089, 0.6911],
        [0.3089, 0.6911],
        [0.3907, 0.6093]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.4108, -0.4108, -1.0880, -1.0253, -0.9399, -0.4108, -0.9399, -1.1747,
        -0.3695, -0.9399], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3369, 0.6631],
        [0.3369, 0.6631],
        [0.3587, 0.6413],
        [0.3587, 0.6413],
        [0.3907, 0.6093],
        [0.3369, 0.6631],
        [0.3907, 0.6093],
        [0.3907, 0.6093],
        [0.3089, 0.6911],
        [0.3907, 0.6093]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.4108, -0.4108, -1.0253, -0.4442, -0.4954, -1.0880, -0.9399, -0.4954,
        -0.3695, -0.4954], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True  True False  True False False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3369, 0.6631],
        [0.3369, 0.6631],
        [0.3587, 0.6413],
        [0.3369, 0.6631],
        [0.3089, 0.6911],
        [0.3587, 0.6413],
        [0.3907, 0.6093],
        [0.3089, 0.6911],
        [0.3089, 0.6911],
        [0.3089, 0.6911]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.4108, -0.4108, -0.4442, -0.4108, -0.3695, -0.4442, -0.9399, -0.3695,
        -0.3695, -0.3695], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True  True  True  True False  True  True False False False]
DEBUG:src.train:Log Probs: tensor([[-1.1747, -1.1747, -1.0827, -1.1747, -0.4135, -0.4135, -1.0827, -0.4135,
         -0.4135, -0.3695],
        [-0.4442, -0.4442, -0.4442, -1.0253, -1.1747, -0.4108, -0.9399, -0.3695,
         -0.3695, -1.1747],
        [-0.4108, -0.4108, -1.0880, -1.0253, -0.9399, -0.4108, -0.9399, -1.1747,
         -0.3695, -0.9399],
        [-0.4108, -0.4108, -1.0253, -0.4442, -0.4954, -1.0880, -0.9399, -0.4954,
         -0.3695, -0.4954],
        [-0.4108, -0.4108, -0.4442, -0.4108, -0.3695, -0.4442, -0.9399, -0.3695,
         -0.3695, -0.3695]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 72: Cumulative reward: 17.149557188153267
INFO:src.train:Episode 72: Reward Differences: 5.138238146901131
INFO:src.train:Episode 72: Average loss: 3.3843603134155273
INFO:src.train:Episode 72: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 73: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 73: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3073, 0.6927],
        [0.3073, 0.6927],
        [0.3353, 0.6647],
        [0.3073, 0.6927],
        [0.3353, 0.6647],
        [0.3073, 0.6927],
        [0.3353, 0.6647],
        [0.3353, 0.6647],
        [0.3073, 0.6927],
        [0.3353, 0.6647]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3671, -0.3671, -0.4084, -0.3671, -0.4084, -1.1801, -0.4084, -0.4084,
        -0.3671, -0.4084], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3852, 0.6148],
        [0.3326, 0.6674],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3073, 0.6927]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.3671, -0.4044, -0.3671, -0.4044, -0.3671, -0.4865, -0.4044, -1.1007,
        -0.3671, -0.3671], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [False  True False  True False False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3545, 0.6455],
        [0.3073, 0.6927],
        [0.3073, 0.6927]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3671, -0.4044, -0.3671, -0.4044, -1.1801, -0.3671, -0.4044, -1.0370,
        -0.3671, -0.3671], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [False  True False  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3852, 0.6148],
        [0.3073, 0.6927],
        [0.3326, 0.6674],
        [0.3545, 0.6455],
        [0.3073, 0.6927],
        [0.3073, 0.6927]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.1801, -0.4044, -0.3671, -1.1007, -0.4865, -1.1801, -1.1007, -0.4377,
        -0.3671, -1.1801], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [ True  True False False False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3852, 0.6148],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3545, 0.6455],
        [0.3073, 0.6927],
        [0.3852, 0.6148],
        [0.3545, 0.6455],
        [0.3326, 0.6674],
        [0.3073, 0.6927],
        [0.3852, 0.6148]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.4865, -1.1007, -0.3671, -0.4377, -1.1801, -0.4865, -1.0370, -0.4044,
        -0.3671, -0.4865], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [False False False  True  True False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.3671, -0.3671, -0.4084, -0.3671, -0.4084, -1.1801, -0.4084, -0.4084,
         -0.3671, -0.4084],
        [-0.3671, -0.4044, -0.3671, -0.4044, -0.3671, -0.4865, -0.4044, -1.1007,
         -0.3671, -0.3671],
        [-0.3671, -0.4044, -0.3671, -0.4044, -1.1801, -0.3671, -0.4044, -1.0370,
         -0.3671, -0.3671],
        [-1.1801, -0.4044, -0.3671, -1.1007, -0.4865, -1.1801, -1.1007, -0.4377,
         -0.3671, -1.1801],
        [-0.4865, -1.1007, -0.3671, -0.4377, -1.1801, -0.4865, -1.0370, -0.4044,
         -0.3671, -0.4865]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 73: Cumulative reward: 15.89005894958973
INFO:src.train:Episode 73: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 73: Average loss: 2.6495907306671143
INFO:src.train:Episode 73: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 74: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 74: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3286, 0.6714],
        [0.3028, 0.6972],
        [0.3028, 0.6972],
        [0.3028, 0.6972],
        [0.3286, 0.6714],
        [0.3028, 0.6972],
        [0.3286, 0.6714],
        [0.3028, 0.6972],
        [0.3286, 0.6714],
        [0.3286, 0.6714]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3984, -0.3607, -0.3607, -1.1945, -0.3984, -0.3607, -0.3984, -1.1945,
        -1.1129, -0.3984], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [ True  True False False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3252, 0.6748],
        [0.3252, 0.6748],
        [0.3028, 0.6972],
        [0.3466, 0.6534],
        [0.3252, 0.6748],
        [0.3028, 0.6972],
        [0.3028, 0.6972],
        [0.3753, 0.6247],
        [0.3466, 0.6534],
        [0.3028, 0.6972]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.3933, -0.3933, -1.1945, -0.4255, -0.3933, -1.1945, -1.1945, -0.4705,
        -0.4255, -0.3607], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [ True  True  True  True  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3252, 0.6748],
        [0.3252, 0.6748],
        [0.3753, 0.6247],
        [0.3252, 0.6748],
        [0.3252, 0.6748],
        [0.3753, 0.6247],
        [0.3753, 0.6247],
        [0.3028, 0.6972],
        [0.3252, 0.6748],
        [0.3028, 0.6972]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3933, -0.3933, -0.4705, -0.3933, -1.1235, -0.4705, -0.4705, -1.1945,
        -0.3933, -0.3607], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [ True  True False  True False False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3252, 0.6748],
        [0.3252, 0.6748],
        [0.3028, 0.6972],
        [0.3252, 0.6748],
        [0.3466, 0.6534],
        [0.3028, 0.6972],
        [0.3028, 0.6972],
        [0.3753, 0.6247],
        [0.3252, 0.6748],
        [0.3028, 0.6972]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3933, -0.3933, -0.3607, -0.3933, -0.4255, -0.3607, -0.3607, -0.9800,
        -0.3933, -0.3607], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [ True  True False  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3252, 0.6748],
        [0.3252, 0.6748],
        [0.3028, 0.6972],
        [0.3252, 0.6748],
        [0.3252, 0.6748],
        [0.3028, 0.6972],
        [0.3028, 0.6972],
        [0.3753, 0.6247],
        [0.3252, 0.6748],
        [0.3028, 0.6972]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.3933, -0.3933, -1.1945, -1.1235, -0.3933, -0.3607, -0.3607, -0.4705,
        -1.1235, -0.3607], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [ True  True  True False  True False False False False False]
DEBUG:src.train:Log Probs: tensor([[-0.3984, -0.3607, -0.3607, -1.1945, -0.3984, -0.3607, -0.3984, -1.1945,
         -1.1129, -0.3984],
        [-0.3933, -0.3933, -1.1945, -0.4255, -0.3933, -1.1945, -1.1945, -0.4705,
         -0.4255, -0.3607],
        [-0.3933, -0.3933, -0.4705, -0.3933, -1.1235, -0.4705, -0.4705, -1.1945,
         -0.3933, -0.3607],
        [-0.3933, -0.3933, -0.3607, -0.3933, -0.4255, -0.3607, -0.3607, -0.9800,
         -0.3933, -0.3607],
        [-0.3933, -0.3933, -1.1945, -1.1235, -0.3933, -0.3607, -0.3607, -0.4705,
         -1.1235, -0.3607]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 74: Cumulative reward: 16.81811025738716
INFO:src.train:Episode 74: Reward Differences: 4.541633725166321
INFO:src.train:Episode 74: Average loss: 2.623459577560425
INFO:src.train:Episode 74: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 75: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 75: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2962, 0.7038],
        [0.2962, 0.7038],
        [0.2962, 0.7038],
        [0.3190, 0.6810],
        [0.3190, 0.6810],
        [0.3190, 0.6810],
        [0.3190, 0.6810],
        [0.2962, 0.7038],
        [0.2962, 0.7038],
        [0.2962, 0.7038]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3513, -0.3513, -0.3513, -1.1427, -0.3841, -0.3841, -0.3841, -0.3513,
        -0.3513, -0.3513], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3146, 0.6854],
        [0.2962, 0.7038],
        [0.2962, 0.7038],
        [0.3352, 0.6648],
        [0.3146, 0.6854],
        [0.2962, 0.7038],
        [0.3146, 0.6854],
        [0.3146, 0.6854],
        [0.3146, 0.6854],
        [0.2962, 0.7038]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.3778, -0.3513, -0.3513, -0.4083, -1.1564, -0.3513, -1.1564, -0.3778,
        -0.3778, -0.3513], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True False False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3146, 0.6854],
        [0.2962, 0.7038],
        [0.2962, 0.7038],
        [0.3146, 0.6854],
        [0.3352, 0.6648],
        [0.2962, 0.7038],
        [0.3352, 0.6648],
        [0.3146, 0.6854],
        [0.3146, 0.6854],
        [0.2962, 0.7038]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3778, -1.2167, -0.3513, -1.1564, -1.0930, -1.2167, -1.0930, -0.3778,
        -0.3778, -1.2167], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True  True False False False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3146, 0.6854],
        [0.3611, 0.6389],
        [0.2962, 0.7038],
        [0.3352, 0.6648],
        [0.3352, 0.6648],
        [0.3611, 0.6389],
        [0.3352, 0.6648],
        [0.3146, 0.6854],
        [0.3146, 0.6854],
        [0.3611, 0.6389]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3778, -0.4481, -0.3513, -0.4083, -0.4083, -1.0185, -0.4083, -1.1564,
        -1.1564, -0.4481], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3146, 0.6854],
        [0.2962, 0.7038],
        [0.2962, 0.7038],
        [0.3146, 0.6854],
        [0.3146, 0.6854],
        [0.3611, 0.6389],
        [0.3146, 0.6854],
        [0.3352, 0.6648],
        [0.3352, 0.6648],
        [0.2962, 0.7038]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.3778, -1.2167, -0.3513, -1.1564, -0.3778, -1.0185, -0.3778, -1.0930,
        -0.4083, -0.3513], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True  True False False  True  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.3513, -0.3513, -0.3513, -1.1427, -0.3841, -0.3841, -0.3841, -0.3513,
         -0.3513, -0.3513],
        [-0.3778, -0.3513, -0.3513, -0.4083, -1.1564, -0.3513, -1.1564, -0.3778,
         -0.3778, -0.3513],
        [-0.3778, -1.2167, -0.3513, -1.1564, -1.0930, -1.2167, -1.0930, -0.3778,
         -0.3778, -1.2167],
        [-0.3778, -0.4481, -0.3513, -0.4083, -0.4083, -1.0185, -0.4083, -1.1564,
         -1.1564, -0.4481],
        [-0.3778, -1.2167, -0.3513, -1.1564, -0.3778, -1.0185, -0.3778, -1.0930,
         -0.4083, -0.3513]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 75: Cumulative reward: 17.016978412866592
INFO:src.train:Episode 75: Reward Differences: 5.337106287479401
INFO:src.train:Episode 75: Average loss: 3.314281702041626
INFO:src.train:Episode 75: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 76: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 76: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.3110, 0.6890],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.3110, 0.6890],
        [0.3110, 0.6890],
        [0.3110, 0.6890],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.3110, 0.6890],
        [0.3110, 0.6890]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3725, -1.2363, -0.3431, -0.3725, -1.1680, -0.3725, -0.3431, -0.3431,
        -0.3725, -1.1680], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [False  True False False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.2905, 0.7095],
        [0.3498, 0.6502],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.3498, 0.6502],
        [0.3061, 0.6939],
        [0.3061, 0.6939],
        [0.2905, 0.7095],
        [0.3061, 0.6939],
        [0.3259, 0.6741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.3431, -0.4304, -0.3431, -0.3431, -0.4304, -1.1839, -1.1839, -0.3431,
        -0.3654, -1.1211], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [False False False False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.3259, 0.6741],
        [0.3259, 0.6741],
        [0.2905, 0.7095],
        [0.3061, 0.6939],
        [0.3259, 0.6741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3431, -0.3431, -0.3431, -1.2363, -0.3431, -0.3944, -0.3944, -0.3431,
        -0.3654, -0.3944], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [False False False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.3498, 0.6502],
        [0.2905, 0.7095],
        [0.3061, 0.6939],
        [0.3061, 0.6939],
        [0.2905, 0.7095],
        [0.3061, 0.6939],
        [0.3061, 0.6939]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.2363, -0.3431, -1.2363, -0.4304, -0.3431, -0.3654, -1.1839, -0.3431,
        -0.3654, -1.1839], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [ True False  True False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3498, 0.6502],
        [0.2905, 0.7095],
        [0.3498, 0.6502],
        [0.2905, 0.7095],
        [0.2905, 0.7095],
        [0.3061, 0.6939],
        [0.3259, 0.6741],
        [0.2905, 0.7095],
        [0.3061, 0.6939],
        [0.3259, 0.6741]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.4304, -0.3431, -0.4304, -0.3431, -0.3431, -0.3654, -0.3944, -0.3431,
        -0.3654, -0.3944], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.3725, -1.2363, -0.3431, -0.3725, -1.1680, -0.3725, -0.3431, -0.3431,
         -0.3725, -1.1680],
        [-0.3431, -0.4304, -0.3431, -0.3431, -0.4304, -1.1839, -1.1839, -0.3431,
         -0.3654, -1.1211],
        [-0.3431, -0.3431, -0.3431, -1.2363, -0.3431, -0.3944, -0.3944, -0.3431,
         -0.3654, -0.3944],
        [-1.2363, -0.3431, -1.2363, -0.4304, -0.3431, -0.3654, -1.1839, -0.3431,
         -0.3654, -1.1839],
        [-0.4304, -0.3431, -0.4304, -0.3431, -0.3431, -0.3654, -0.3944, -0.3431,
         -0.3654, -0.3944]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 76: Cumulative reward: 15.956348344683647
INFO:src.train:Episode 76: Reward Differences: 5.005659386515617
INFO:src.train:Episode 76: Average loss: 2.7494964599609375
INFO:src.train:Episode 76: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 77: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 77: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.3004, 0.6996],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.3004, 0.6996],
        [0.3004, 0.6996],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.3004, 0.6996]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3572, -1.2644, -0.3318, -0.3572, -1.2026, -0.3318, -0.3318, -0.3318,
        -0.3318, -0.3572], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [ True  True False False  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2953, 0.7047],
        [0.3351, 0.6649],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.3351, 0.6649],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2824, 0.7176]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.3500, -0.4081, -0.3318, -0.3318, -0.4081, -0.3500, -0.3318, -0.3500,
        -1.2644, -1.2644], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [ True False False False False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2953, 0.7047],
        [0.3351, 0.6649],
        [0.3351, 0.6649]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3500, -0.3318, -0.3318, -0.3318, -1.2644, -0.3500, -0.3318, -0.3500,
        -0.4081, -1.0933], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [ True False False False  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.3351, 0.6649],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.3351, 0.6649]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3500, -0.3318, -0.3318, -1.2644, -0.4081, -0.3500, -0.3318, -0.3500,
        -0.3318, -0.4081], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [ True False False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2824, 0.7176],
        [0.3351, 0.6649],
        [0.2824, 0.7176],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2953, 0.7047],
        [0.2824, 0.7176],
        [0.2824, 0.7176]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-1.2198, -1.2644, -1.2644, -0.4081, -1.2644, -0.3500, -1.2644, -1.2198,
        -0.3318, -0.3318], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [False  True  True False  True  True  True False False False]
DEBUG:src.train:Log Probs: tensor([[-0.3572, -1.2644, -0.3318, -0.3572, -1.2026, -0.3318, -0.3318, -0.3318,
         -0.3318, -0.3572],
        [-0.3500, -0.4081, -0.3318, -0.3318, -0.4081, -0.3500, -0.3318, -0.3500,
         -1.2644, -1.2644],
        [-0.3500, -0.3318, -0.3318, -0.3318, -1.2644, -0.3500, -0.3318, -0.3500,
         -0.4081, -1.0933],
        [-0.3500, -0.3318, -0.3318, -1.2644, -0.4081, -0.3500, -0.3318, -0.3500,
         -0.3318, -0.4081],
        [-1.2198, -1.2644, -1.2644, -0.4081, -1.2644, -0.3500, -1.2644, -1.2198,
         -0.3318, -0.3318]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 77: Cumulative reward: 16.4866633862257
INFO:src.train:Episode 77: Reward Differences: 5.005659386515617
INFO:src.train:Episode 77: Average loss: 2.914177179336548
INFO:src.train:Episode 77: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 78: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 78: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2741, 0.7259],
        [0.2895, 0.7105],
        [0.2741, 0.7259],
        [0.2741, 0.7259],
        [0.2741, 0.7259],
        [0.2741, 0.7259],
        [0.2741, 0.7259],
        [0.2895, 0.7105],
        [0.2741, 0.7259],
        [0.2741, 0.7259]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.2943, -0.3417, -0.3203, -0.3203, -1.2943, -0.3203, -0.3203, -0.3417,
        -0.3203, -0.3203], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False  True False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.3011, 0.6989],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.3197, 0.6803],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.2842, 0.7158]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.2003, -0.3343, -0.3203, -0.3343, -0.3852, -0.3203, -0.3343, -0.3203,
        -1.2581, -0.3343], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.3011, 0.6989],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.3011, 0.6989],
        [0.2842, 0.7158]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3582, -0.3343, -0.3203, -0.3343, -0.3203, -1.2943, -0.3343, -0.3203,
        -1.2003, -0.3343], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [ True  True False  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.2842, 0.7158],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.3197, 0.6803],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.3011, 0.6989],
        [0.2842, 0.7158]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.3343, -0.3343, -1.2943, -1.2581, -0.3203, -0.3852, -0.3343, -0.3203,
        -0.3582, -1.2581], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [ True  True  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.2842, 0.7158],
        [0.2842, 0.7158],
        [0.3197, 0.6803],
        [0.3011, 0.6989],
        [0.2741, 0.7259],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.2741, 0.7259],
        [0.2842, 0.7158],
        [0.3011, 0.6989]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-1.2581, -0.3343, -0.3852, -0.3582, -0.3203, -1.2943, -1.2581, -0.3203,
        -0.3343, -1.2003], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False  True False  True False  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[-1.2943, -0.3417, -0.3203, -0.3203, -1.2943, -0.3203, -0.3203, -0.3417,
         -0.3203, -0.3203],
        [-1.2003, -0.3343, -0.3203, -0.3343, -0.3852, -0.3203, -0.3343, -0.3203,
         -1.2581, -0.3343],
        [-0.3582, -0.3343, -0.3203, -0.3343, -0.3203, -1.2943, -0.3343, -0.3203,
         -1.2003, -0.3343],
        [-0.3343, -0.3343, -1.2943, -1.2581, -0.3203, -0.3852, -0.3343, -0.3203,
         -0.3582, -1.2581],
        [-1.2581, -0.3343, -0.3852, -0.3582, -0.3203, -1.2943, -1.2581, -0.3203,
         -0.3343, -1.2003]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 78: Cumulative reward: 16.48666337132454
INFO:src.train:Episode 78: Reward Differences: 4.806791245937347
INFO:src.train:Episode 78: Average loss: 2.7637479305267334
INFO:src.train:Episode 78: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 79: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 79: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2790, 0.7210],
        [0.2659, 0.7341],
        [0.2790, 0.7210],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3091, -0.3091, -0.3271, -0.3091, -0.3271, -0.3091, -1.3246, -0.3091,
        -0.3091, -0.3091], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [ True False False False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2737, 0.7263],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.3051, 0.6949],
        [0.2659, 0.7341],
        [0.2737, 0.7263],
        [0.2737, 0.7263]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.3198, -1.3246, -0.3091, -0.3091, -1.3246, -0.3091, -0.3640, -0.3091,
        -0.3198, -0.3198], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [ True  True False False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2737, 0.7263],
        [0.3051, 0.6949],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.3051, 0.6949],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2737, 0.7263],
        [0.2737, 0.7263]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.3198, -0.3640, -1.3246, -0.3091, -0.3640, -0.3091, -0.3091, -1.3246,
        -0.3198, -0.3198], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [ True False  True False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2737, 0.7263],
        [0.2659, 0.7341],
        [0.3051, 0.6949],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.3051, 0.6949],
        [0.2737, 0.7263],
        [0.2737, 0.7263]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.3198, -1.3246, -0.3640, -1.3246, -1.3246, -0.3091, -0.3091, -0.3640,
        -0.3198, -0.3198], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [ True  True False  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2737, 0.7263],
        [0.3051, 0.6949],
        [0.2659, 0.7341],
        [0.3051, 0.6949],
        [0.3051, 0.6949],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2659, 0.7341],
        [0.2737, 0.7263],
        [0.2737, 0.7263]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.3198, -0.3640, -0.3091, -0.3640, -0.3640, -0.3091, -0.3091, -0.3091,
        -1.2956, -1.2956], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [ True False False False False False False False False False]
DEBUG:src.train:Log Probs: tensor([[-0.3091, -0.3091, -0.3271, -0.3091, -0.3271, -0.3091, -1.3246, -0.3091,
         -0.3091, -0.3091],
        [-0.3198, -1.3246, -0.3091, -0.3091, -1.3246, -0.3091, -0.3640, -0.3091,
         -0.3198, -0.3198],
        [-0.3198, -0.3640, -1.3246, -0.3091, -0.3640, -0.3091, -0.3091, -1.3246,
         -0.3198, -0.3198],
        [-0.3198, -1.3246, -0.3640, -1.3246, -1.3246, -0.3091, -0.3091, -0.3640,
         -0.3198, -0.3198],
        [-0.3198, -0.3640, -0.3091, -0.3640, -0.3640, -0.3091, -0.3091, -0.3091,
         -1.2956, -1.2956]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 79: Cumulative reward: 15.823769554495811
INFO:src.train:Episode 79: Reward Differences: 3.945029303431511
INFO:src.train:Episode 79: Average loss: 2.062044382095337
INFO:src.train:Episode 79: Last Step Accuracy: 0.10000000149011612
DEBUG:src.train:Episode 80: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 80: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.2674, 0.7326],
        [0.2568, 0.7432],
        [0.2674, 0.7326],
        [0.2568, 0.7432],
        [0.2568, 0.7432],
        [0.2674, 0.7326],
        [0.2674, 0.7326],
        [0.2674, 0.7326],
        [0.2674, 0.7326],
        [0.2674, 0.7326]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.3111, -0.2967, -0.3111, -0.2967, -0.2967, -0.3111, -0.3111, -0.3111,
        -1.3191, -1.3191], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [ True  True False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.2624, 0.7376],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2624, 0.7376],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2890, 0.7110],
        [0.2890, 0.7110]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.3044, -0.3044, -1.3596, -0.3044, -0.2967, -0.3044, -0.3044, -1.3596,
        -0.3411, -0.3411], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [ True  True  True  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2624, 0.7376],
        [0.2624, 0.7376],
        [0.2890, 0.7110],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2624, 0.7376],
        [0.2624, 0.7376],
        [0.2890, 0.7110],
        [0.2568, 0.7432],
        [0.2568, 0.7432]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3044, -0.3044, -0.3411, -0.3044, -0.2967, -0.3044, -0.3044, -0.3411,
        -0.2967, -0.2967], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [ True  True False  True False  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2624, 0.7376],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2624, 0.7376],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2568, 0.7432],
        [0.2568, 0.7432]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.3379, -0.3044, -1.3596, -0.3044, -0.2967, -1.3379, -0.3044, -0.2967,
        -0.2967, -0.2967], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [False  True  True  True False False  True False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2757, 0.7243],
        [0.2624, 0.7376],
        [0.2890, 0.7110],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2757, 0.7243],
        [0.2624, 0.7376],
        [0.2568, 0.7432],
        [0.2568, 0.7432],
        [0.2568, 0.7432]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.3226, -0.3044, -1.2413, -1.3379, -0.2967, -0.3226, -0.3044, -0.2967,
        -1.3596, -0.2967], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [ True  True  True False False  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.3111, -0.2967, -0.3111, -0.2967, -0.2967, -0.3111, -0.3111, -0.3111,
         -1.3191, -1.3191],
        [-0.3044, -0.3044, -1.3596, -0.3044, -0.2967, -0.3044, -0.3044, -1.3596,
         -0.3411, -0.3411],
        [-0.3044, -0.3044, -0.3411, -0.3044, -0.2967, -0.3044, -0.3044, -0.3411,
         -0.2967, -0.2967],
        [-1.3379, -0.3044, -1.3596, -0.3044, -0.2967, -1.3379, -0.3044, -0.2967,
         -0.2967, -0.2967],
        [-0.3226, -0.3044, -1.2413, -1.3379, -0.2967, -0.3226, -0.3044, -0.2967,
         -1.3596, -0.2967]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 80: Cumulative reward: 16.88439966738224
INFO:src.train:Episode 80: Reward Differences: 5.138238146901131
INFO:src.train:Episode 80: Average loss: 2.632469892501831
INFO:src.train:Episode 80: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 81: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 81: Target words: ['apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2550, 0.7450],
        [0.2550, 0.7450],
        [0.2466, 0.7534],
        [0.2466, 0.7534]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2832, -0.2832, -0.2832, -0.2832, -0.2832, -1.3998, -0.2944, -0.2944,
        -0.2832, -0.2832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False False False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2504, 0.7496],
        [0.2723, 0.7277],
        [0.2504, 0.7496],
        [0.2504, 0.7496],
        [0.2466, 0.7534],
        [0.2466, 0.7534]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-1.3998, -0.2832, -0.2832, -1.3998, -0.2882, -0.3179, -0.2882, -0.2882,
        -0.2832, -0.2832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [ True False False  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2723, 0.7277],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2723, 0.7277],
        [0.2504, 0.7496],
        [0.2466, 0.7534],
        [0.2504, 0.7496],
        [0.2504, 0.7496],
        [0.2466, 0.7534],
        [0.2466, 0.7534]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.3179, -1.3998, -0.2832, -1.3008, -0.2882, -0.2832, -0.2882, -0.2882,
        -0.2832, -0.2832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False  True False  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2466, 0.7534],
        [0.2723, 0.7277],
        [0.2466, 0.7534],
        [0.2723, 0.7277],
        [0.2504, 0.7496],
        [0.2466, 0.7534],
        [0.2504, 0.7496],
        [0.2504, 0.7496],
        [0.2466, 0.7534],
        [0.2466, 0.7534]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2832, -0.3179, -0.2832, -0.3179, -0.2882, -0.2832, -0.2882, -0.2882,
        -1.3998, -0.2832], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False False False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2466, 0.7534],
        [0.2504, 0.7496],
        [0.2466, 0.7534],
        [0.2504, 0.7496],
        [0.2504, 0.7496],
        [0.2723, 0.7277],
        [0.2466, 0.7534]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2832, -0.2832, -0.2832, -0.2832, -0.2882, -0.2832, -0.2882, -0.2882,
        -0.3179, -1.3998], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False False False  True False  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.2832, -0.2832, -0.2832, -0.2832, -0.2832, -1.3998, -0.2944, -0.2944,
         -0.2832, -0.2832],
        [-1.3998, -0.2832, -0.2832, -1.3998, -0.2882, -0.3179, -0.2882, -0.2882,
         -0.2832, -0.2832],
        [-0.3179, -1.3998, -0.2832, -1.3008, -0.2882, -0.2832, -0.2882, -0.2882,
         -0.2832, -0.2832],
        [-0.2832, -0.3179, -0.2832, -0.3179, -0.2882, -0.2832, -0.2882, -0.2882,
         -1.3998, -0.2832],
        [-0.2832, -0.2832, -0.2832, -0.2832, -0.2882, -0.2832, -0.2882, -0.2882,
         -0.3179, -1.3998]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 81: Cumulative reward: 16.221505865454674
INFO:src.train:Episode 81: Reward Differences: 4.740501865744591
INFO:src.train:Episode 81: Average loss: 2.098515748977661
INFO:src.train:Episode 81: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 82: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 82: Target words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2409, 0.7591],
        [0.2347, 0.7653],
        [0.2409, 0.7591],
        [0.2347, 0.7653],
        [0.2409, 0.7591],
        [0.2347, 0.7653],
        [0.2409, 0.7591],
        [0.2347, 0.7653],
        [0.2347, 0.7653],
        [0.2347, 0.7653]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2757, -1.4495, -1.4232, -1.4495, -0.2757, -0.2675, -0.2757, -0.2675,
        -0.2675, -0.2675], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [ True  True False  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2369, 0.7631],
        [0.2541, 0.7459],
        [0.2461, 0.7539],
        [0.2541, 0.7459],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2369, 0.7631],
        [0.2347, 0.7653]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2704, -0.2932, -1.4022, -0.2932, -1.4495, -0.2704, -0.2675, -0.2704,
        -0.2704, -0.2675], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [ True False False False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2461, 0.7539],
        [0.2347, 0.7653],
        [0.2541, 0.7459],
        [0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2369, 0.7631],
        [0.2347, 0.7653]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-1.4400, -0.2675, -0.2824, -0.2675, -0.2932, -0.2704, -0.2675, -0.2704,
        -0.2704, -0.2675], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [False False  True False False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2461, 0.7539],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2369, 0.7631],
        [0.2347, 0.7653]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2824, -0.2675, -0.2704, -0.2675, -0.2675, -1.4400, -0.2675, -1.4400,
        -0.2704, -0.2675], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [ True False  True False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2369, 0.7631],
        [0.2347, 0.7653],
        [0.2347, 0.7653],
        [0.2461, 0.7539],
        [0.2347, 0.7653],
        [0.2461, 0.7539],
        [0.2369, 0.7631],
        [0.2347, 0.7653]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.2704, -1.4495, -0.2704, -0.2675, -0.2675, -0.2824, -0.2675, -0.2824,
        -1.4400, -0.2675], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [ True  True  True False False  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.2757, -1.4495, -1.4232, -1.4495, -0.2757, -0.2675, -0.2757, -0.2675,
         -0.2675, -0.2675],
        [-0.2704, -0.2932, -1.4022, -0.2932, -1.4495, -0.2704, -0.2675, -0.2704,
         -0.2704, -0.2675],
        [-1.4400, -0.2675, -0.2824, -0.2675, -0.2932, -0.2704, -0.2675, -0.2704,
         -0.2704, -0.2675],
        [-0.2824, -0.2675, -0.2704, -0.2675, -0.2675, -1.4400, -0.2675, -1.4400,
         -0.2704, -0.2675],
        [-0.2704, -1.4495, -0.2704, -0.2675, -0.2675, -0.2824, -0.2675, -0.2824,
         -1.4400, -0.2675]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 82: Cumulative reward: 16.15521650016308
INFO:src.train:Episode 82: Reward Differences: 5.005659386515617
INFO:src.train:Episode 82: Average loss: 2.530475378036499
INFO:src.train:Episode 82: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 83: Input words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 83: Target words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.2276, 0.7724],
        [0.2276, 0.7724],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2276, 0.7724],
        [0.2276, 0.7724],
        [0.2231, 0.7769],
        [0.2276, 0.7724]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.4803, -0.2582, -1.5000, -0.2525, -1.5000, -0.2525, -1.4803, -0.2582,
        -0.2525, -0.2582], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [False False False False  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2313, 0.7687],
        [0.2231, 0.7769],
        [0.2313, 0.7687],
        [0.2231, 0.7769],
        [0.2371, 0.7629],
        [0.2243, 0.7757],
        [0.2371, 0.7629],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2231, 0.7769]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.2630, -0.2525, -0.2630, -0.2525, -0.2706, -0.2540, -0.2706, -1.5000,
        -0.2525, -0.2525], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [ True False  True False False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2371, 0.7629],
        [0.2231, 0.7769],
        [0.2231, 0.7769]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2540, -0.2525, -0.2540, -0.2525, -0.2525, -0.2540, -0.2525, -0.2706,
        -0.2525, -0.2525], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [ True False  True False False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2231, 0.7769]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2540, -0.2525, -1.4947, -0.2525, -1.5000, -0.2540, -0.2525, -0.2525,
        -1.5000, -0.2525], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [ True False False False  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2313, 0.7687],
        [0.2231, 0.7769],
        [0.2371, 0.7629],
        [0.2243, 0.7757],
        [0.2231, 0.7769],
        [0.2231, 0.7769],
        [0.2371, 0.7629],
        [0.2231, 0.7769]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.2540, -0.2525, -0.2630, -0.2525, -1.4392, -0.2540, -0.2525, -0.2525,
        -0.2706, -0.2525], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [ True False  True False  True  True False False False False]
DEBUG:src.train:Log Probs: tensor([[-1.4803, -0.2582, -1.5000, -0.2525, -1.5000, -0.2525, -1.4803, -0.2582,
         -0.2525, -0.2582],
        [-0.2630, -0.2525, -0.2630, -0.2525, -0.2706, -0.2540, -0.2706, -1.5000,
         -0.2525, -0.2525],
        [-0.2540, -0.2525, -0.2540, -0.2525, -0.2525, -0.2540, -0.2525, -0.2706,
         -0.2525, -0.2525],
        [-0.2540, -0.2525, -1.4947, -0.2525, -1.5000, -0.2540, -0.2525, -0.2525,
         -1.5000, -0.2525],
        [-0.2540, -0.2525, -0.2630, -0.2525, -1.4392, -0.2540, -0.2525, -0.2525,
         -0.2706, -0.2525]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 83: Cumulative reward: 15.89005896449089
INFO:src.train:Episode 83: Reward Differences: 4.806791245937347
INFO:src.train:Episode 83: Average loss: 2.2957258224487305
INFO:src.train:Episode 83: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 84: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 84: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2148, 0.7852],
        [0.2148, 0.7852],
        [0.2148, 0.7852],
        [0.2148, 0.7852],
        [0.2148, 0.7852],
        [0.2118, 0.7882],
        [0.2148, 0.7852]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2380, -0.2380, -0.2380, -0.2418, -0.2418, -0.2418, -0.2418, -0.2418,
        -0.2380, -0.2418], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False False False False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2123, 0.7877],
        [0.2123, 0.7877],
        [0.2123, 0.7877]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.5520, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2387,
        -0.2387, -0.2387], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [ True False False False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2212, 0.7788],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2123, 0.7877],
        [0.2123, 0.7877],
        [0.2123, 0.7877]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.2500, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2387,
        -0.2387, -0.2387], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False False False False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2123, 0.7877],
        [0.2123, 0.7877],
        [0.2123, 0.7877]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.5520, -0.2380, -0.2380, -1.5520, -1.5520, -0.2380, -0.2380, -1.5496,
        -0.2387, -0.2387], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [ True False False  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.2212, 0.7788],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2212, 0.7788],
        [0.2212, 0.7788],
        [0.2118, 0.7882],
        [0.2118, 0.7882],
        [0.2173, 0.7827],
        [0.2123, 0.7877],
        [0.2123, 0.7877]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2500, -0.2380, -0.2380, -1.5088, -0.2500, -0.2380, -0.2380, -0.2449,
        -0.2387, -0.2387], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False False False  True False False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.2380, -0.2380, -0.2380, -0.2418, -0.2418, -0.2418, -0.2418, -0.2418,
         -0.2380, -0.2418],
        [-1.5520, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2387,
         -0.2387, -0.2387],
        [-0.2500, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2380, -0.2387,
         -0.2387, -0.2387],
        [-1.5520, -0.2380, -0.2380, -1.5520, -1.5520, -0.2380, -0.2380, -1.5496,
         -0.2387, -0.2387],
        [-0.2500, -0.2380, -0.2380, -1.5088, -0.2500, -0.2380, -0.2380, -0.2449,
         -0.2387, -0.2387]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 84: Cumulative reward: 16.088927090168
INFO:src.train:Episode 84: Reward Differences: 4.806791245937347
INFO:src.train:Episode 84: Average loss: 1.9045792818069458
INFO:src.train:Episode 84: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 85: Input words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 85: Target words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.2013, 0.7987],
        [0.2013, 0.7987],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.2013, 0.7987],
        [0.1997, 0.8003],
        [0.2013, 0.7987],
        [0.2013, 0.7987]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2248, -0.2248, -0.2227, -0.2227, -0.2227, -0.2227, -0.2248, -1.6111,
        -1.6027, -0.2248], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True False False False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1998, 0.8002],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1998, 0.8002],
        [0.1998, 0.8002],
        [0.1997, 0.8003],
        [0.2028, 0.7972],
        [0.2028, 0.7972],
        [0.1998, 0.8002]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2229, -0.2227, -0.2227, -0.2227, -0.2229, -0.2229, -0.2227, -1.5955,
        -0.2267, -0.2229], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True False False False  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1998, 0.8002],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1998, 0.8002],
        [0.1998, 0.8002],
        [0.1997, 0.8003],
        [0.2028, 0.7972],
        [0.1998, 0.8002],
        [0.1998, 0.8002]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2229, -0.2227, -0.2227, -1.6111, -0.2229, -0.2229, -1.6111, -0.2267,
        -0.2229, -1.6104], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True False False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1998, 0.8002],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.2051, 0.7949],
        [0.1998, 0.8002],
        [0.1998, 0.8002],
        [0.2051, 0.7949],
        [0.1998, 0.8002],
        [0.1998, 0.8002],
        [0.2028, 0.7972]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2229, -0.2227, -0.2227, -0.2295, -0.2229, -0.2229, -1.5843, -0.2229,
        -1.6104, -1.5955], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True False False False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1998, 0.8002],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1997, 0.8003],
        [0.1998, 0.8002],
        [0.1998, 0.8002],
        [0.2051, 0.7949],
        [0.1998, 0.8002],
        [0.2028, 0.7972],
        [0.2028, 0.7972]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2229, -0.2227, -0.2227, -1.6111, -0.2229, -0.2229, -0.2295, -0.2229,
        -0.2267, -0.2267], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True False False  True  True  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.2248, -0.2248, -0.2227, -0.2227, -0.2227, -0.2227, -0.2248, -1.6111,
         -1.6027, -0.2248],
        [-0.2229, -0.2227, -0.2227, -0.2227, -0.2229, -0.2229, -0.2227, -1.5955,
         -0.2267, -0.2229],
        [-0.2229, -0.2227, -0.2227, -1.6111, -0.2229, -0.2229, -1.6111, -0.2267,
         -0.2229, -1.6104],
        [-0.2229, -0.2227, -0.2227, -0.2295, -0.2229, -0.2229, -1.5843, -0.2229,
         -1.6104, -1.5955],
        [-0.2229, -0.2227, -0.2227, -1.6111, -0.2229, -0.2229, -0.2295, -0.2229,
         -0.2267, -0.2267]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 85: Cumulative reward: 17.48100407421589
INFO:src.train:Episode 85: Reward Differences: 5.535974428057671
INFO:src.train:Episode 85: Average loss: 2.7671921253204346
INFO:src.train:Episode 85: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 86: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 86: Target words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1899, 0.8101],
        [0.1899, 0.8101],
        [0.1899, 0.8101],
        [0.1891, 0.8109],
        [0.1899, 0.8101],
        [0.1899, 0.8101],
        [0.1891, 0.8109],
        [0.1899, 0.8101],
        [0.1891, 0.8109],
        [0.1899, 0.8101]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.2106, -1.6612, -0.2106, -1.6654, -0.2106, -0.2106, -1.6654, -0.2106,
        -0.2096, -0.2106], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [ True  True  True  True False  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1891, 0.8109],
        [0.1917, 0.8083],
        [0.1891, 0.8109],
        [0.1917, 0.8083],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1906, 0.8094],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.2096, -0.2128, -0.2096, -0.2128, -0.2096, -0.2096, -0.2115, -0.2096,
        -0.2096, -0.2096], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [ True False  True False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.2096, -0.2096, -0.2096, -0.2096, -1.6654, -0.2096, -0.2096, -0.2096,
        -0.2096, -1.6654], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [ True False  True False  True  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1917, 0.8083],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1906, 0.8094]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.2096, -0.2096, -0.2096, -0.2096, -0.2128, -0.2096, -0.2096, -0.2096,
        -0.2096, -1.6576], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [ True False  True False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1891, 0.8109],
        [0.1906, 0.8094]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.2096, -0.2096, -0.2096, -0.2096, -0.2096, -0.2096, -1.6654, -0.2096,
        -0.2096, -0.2115], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [ True False  True False False  True False False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.2106, -1.6612, -0.2106, -1.6654, -0.2106, -0.2106, -1.6654, -0.2106,
         -0.2096, -0.2106],
        [-0.2096, -0.2128, -0.2096, -0.2128, -0.2096, -0.2096, -0.2115, -0.2096,
         -0.2096, -0.2096],
        [-0.2096, -0.2096, -0.2096, -0.2096, -1.6654, -0.2096, -0.2096, -0.2096,
         -0.2096, -1.6654],
        [-0.2096, -0.2096, -0.2096, -0.2096, -0.2128, -0.2096, -0.2096, -0.2096,
         -0.2096, -1.6576],
        [-0.2096, -0.2096, -0.2096, -0.2096, -0.2096, -0.2096, -1.6654, -0.2096,
         -0.2096, -0.2115]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 86: Cumulative reward: 16.221505865454674
INFO:src.train:Episode 86: Reward Differences: 4.740501865744591
INFO:src.train:Episode 86: Average loss: 1.9605746269226074
INFO:src.train:Episode 86: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 87: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 87: Target words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1789, 0.8211],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1789, 0.8211],
        [0.1789, 0.8211],
        [0.1788, 0.8212],
        [0.1788, 0.8212]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1970, -0.1970, -0.1971, -0.1970, -0.1970, -1.7214, -1.7211, -0.1971,
        -0.1970, -0.1970], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False False False  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1789, 0.8211],
        [0.1789, 0.8211],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-1.7214, -0.1970, -0.1970, -0.1970, -1.7214, -0.1971, -0.1971, -0.1970,
        -0.1970, -1.7214], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1789, 0.8211],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1789, 0.8211],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1789, 0.8211]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1971, -0.1970, -0.1970, -0.1970, -0.1971, -0.1970, -0.1970, -0.1970,
        -1.7214, -0.1971], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False False False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1789, 0.8211],
        [0.1788, 0.8212]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1970, -0.1970, -0.1970, -1.7214, -0.1970, -0.1970, -0.1970, -0.1970,
        -0.1971, -0.1970], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False False  True  True  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1790, 0.8210],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212],
        [0.1788, 0.8212]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-1.7214, -1.7214, -0.1970, -0.1972, -0.1970, -0.1970, -0.1970, -1.7214,
        -0.1970, -0.1970], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [False  True False False  True  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.1970, -0.1970, -0.1971, -0.1970, -0.1970, -1.7214, -1.7211, -0.1971,
         -0.1970, -0.1970],
        [-1.7214, -0.1970, -0.1970, -0.1970, -1.7214, -0.1971, -0.1971, -0.1970,
         -0.1970, -1.7214],
        [-0.1971, -0.1970, -0.1970, -0.1970, -0.1971, -0.1970, -0.1970, -0.1970,
         -1.7214, -0.1971],
        [-0.1970, -0.1970, -0.1970, -1.7214, -0.1970, -0.1970, -0.1970, -0.1970,
         -0.1971, -0.1970],
        [-1.7214, -1.7214, -0.1970, -0.1972, -0.1970, -0.1970, -0.1970, -1.7214,
         -0.1970, -0.1970]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 87: Cumulative reward: 17.481004044413567
INFO:src.train:Episode 87: Reward Differences: 5.668553188443184
INFO:src.train:Episode 87: Average loss: 2.845048189163208
INFO:src.train:Episode 87: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 88: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 88: Target words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1699, 0.8301],
        [0.1699, 0.8301],
        [0.1699, 0.8301],
        [0.1705, 0.8295],
        [0.1699, 0.8301],
        [0.1699, 0.8301],
        [0.1699, 0.8301],
        [0.1699, 0.8301],
        [0.1705, 0.8295],
        [0.1699, 0.8301]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.7726, -1.7726, -1.7726, -0.1869, -0.1862, -0.1862, -0.1862, -0.1862,
        -1.7691, -0.1862], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False False False False False  True False False False]
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1685, 0.8315],
        [0.1694, 0.8306],
        [0.1694, 0.8306],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1694, 0.8306],
        [0.1705, 0.8295]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1846, -0.1856, -0.1856, -1.7691, -0.1869, -0.1869, -1.7691, -0.1869,
        -0.1856, -0.1869], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [False  True  True  True False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1685, 0.8315],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1694, 0.8306],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1869, -1.7691, -0.1869, -0.1846, -0.1869, -0.1869, -0.1856, -0.1869,
        -0.1869, -1.7691], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [False False  True False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1705, 0.8295],
        [0.1694, 0.8306],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1685, 0.8315]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1869, -1.7757, -1.7691, -0.1869, -0.1869, -0.1869, -0.1869, -0.1869,
        -0.1869, -0.1846], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1705, 0.8295],
        [0.1694, 0.8306],
        [0.1694, 0.8306],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295],
        [0.1705, 0.8295]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-1.7691, -1.7757, -0.1856, -0.1869, -0.1869, -1.7691, -0.1869, -0.1869,
        -0.1869, -0.1869], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False  True False False  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[-1.7726, -1.7726, -1.7726, -0.1869, -0.1862, -0.1862, -0.1862, -0.1862,
         -1.7691, -0.1862],
        [-0.1846, -0.1856, -0.1856, -1.7691, -0.1869, -0.1869, -1.7691, -0.1869,
         -0.1856, -0.1869],
        [-0.1869, -1.7691, -0.1869, -0.1846, -0.1869, -0.1869, -0.1856, -0.1869,
         -0.1869, -1.7691],
        [-0.1869, -1.7757, -1.7691, -0.1869, -0.1869, -0.1869, -0.1869, -0.1869,
         -0.1869, -0.1846],
        [-1.7691, -1.7757, -0.1856, -0.1869, -0.1869, -1.7691, -0.1869, -0.1869,
         -0.1869, -0.1869]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 88: Cumulative reward: 15.890058994293213
INFO:src.train:Episode 88: Reward Differences: 5.071948766708374
INFO:src.train:Episode 88: Average loss: 3.0351126194000244
INFO:src.train:Episode 88: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 89: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 89: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1654, 0.8346],
        [0.1644, 0.8356],
        [0.1644, 0.8356],
        [0.1644, 0.8356],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1644, 0.8356],
        [0.1644, 0.8356],
        [0.1644, 0.8356]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'apple' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1808, -0.1796, -0.1796, -1.8055, -1.7992, -1.7992, -1.7992, -0.1796,
        -0.1796, -0.1796], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False False False False False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1634, 0.8366],
        [0.1634, 0.8366],
        [0.1634, 0.8366],
        [0.1619, 0.8381],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1808, -0.1808, -0.1808, -0.1784, -0.1784, -0.1784, -0.1766, -0.1808,
        -0.1808, -0.1808], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False False  True  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1808, -0.1808, -0.1808, -0.1808, -0.1808, -1.7992, -0.1808, -0.1808,
        -0.1808, -0.1808], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1634, 0.8366],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1808, -0.1808, -0.1808, -0.1808, -1.7992, -0.1784, -0.1808, -0.1808,
        -0.1808, -0.1808], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False False  True False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1634, 0.8366],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346],
        [0.1654, 0.8346]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1808, -0.1808, -0.1808, -0.1808, -0.1784, -0.1808, -0.1808, -0.1808,
        -0.1808, -0.1808], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False False  True  True  True False  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.1808, -0.1796, -0.1796, -1.8055, -1.7992, -1.7992, -1.7992, -0.1796,
         -0.1796, -0.1796],
        [-0.1808, -0.1808, -0.1808, -0.1784, -0.1784, -0.1784, -0.1766, -0.1808,
         -0.1808, -0.1808],
        [-0.1808, -0.1808, -0.1808, -0.1808, -0.1808, -1.7992, -0.1808, -0.1808,
         -0.1808, -0.1808],
        [-0.1808, -0.1808, -0.1808, -0.1808, -1.7992, -0.1784, -0.1808, -0.1808,
         -0.1808, -0.1808],
        [-0.1808, -0.1808, -0.1808, -0.1808, -0.1784, -0.1808, -0.1808, -0.1808,
         -0.1808, -0.1808]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 89: Cumulative reward: 17.016978412866592
INFO:src.train:Episode 89: Reward Differences: 5.204527527093887
INFO:src.train:Episode 89: Average loss: 1.9502366781234741
INFO:src.train:Episode 89: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 90: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 90: Target words: ['apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1585, 0.8415],
        [0.1599, 0.8401],
        [0.1585, 0.8415],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1743, -0.1743, -1.8422, -0.1743, -0.1725, -0.1743, -0.1743, -0.1743,
        -0.1743, -0.1743], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True  True False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1549, 0.8451],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1743, -1.8330, -0.1684, -0.1743, -0.1743, -0.1743, -1.8330, -0.1743,
        -0.1743, -0.1743], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1599, 0.8401],
        [0.1571, 0.8429],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1549, 0.8451],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1743, -0.1709, -0.1743, -0.1743, -0.1743, -0.1743, -0.1684, -0.1743,
        -0.1743, -0.1743], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1743, -1.8330, -0.1743, -1.8330, -0.1743, -0.1743, -0.1743, -1.8330,
        -1.8330, -0.1743], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False False False  True False False False  True False False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1599, 0.8401],
        [0.1571, 0.8429],
        [0.1599, 0.8401],
        [0.1549, 0.8451],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1599, 0.8401],
        [0.1549, 0.8451],
        [0.1571, 0.8429],
        [0.1599, 0.8401]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1743, -0.1709, -0.1743, -0.1684, -0.1743, -1.8330, -0.1743, -0.1684,
        -0.1709, -0.1743], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False False  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.1743, -0.1743, -1.8422, -0.1743, -0.1725, -0.1743, -0.1743, -0.1743,
         -0.1743, -0.1743],
        [-0.1743, -1.8330, -0.1684, -0.1743, -0.1743, -0.1743, -1.8330, -0.1743,
         -0.1743, -0.1743],
        [-0.1743, -0.1709, -0.1743, -0.1743, -0.1743, -0.1743, -0.1684, -0.1743,
         -0.1743, -0.1743],
        [-0.1743, -1.8330, -0.1743, -1.8330, -0.1743, -0.1743, -0.1743, -1.8330,
         -1.8330, -0.1743],
        [-0.1743, -0.1709, -0.1743, -0.1684, -0.1743, -1.8330, -0.1743, -0.1684,
         -0.1709, -0.1743]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 90: Cumulative reward: 14.96200767159462
INFO:src.train:Episode 90: Reward Differences: 4.674212485551834
INFO:src.train:Episode 90: Average loss: 2.0526440143585205
INFO:src.train:Episode 90: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 91: Input words: ['orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 91: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1551, 0.8449],
        [0.1533, 0.8467],
        [0.1533, 0.8467],
        [0.1551, 0.8449],
        [0.1533, 0.8467],
        [0.1533, 0.8467],
        [0.1533, 0.8467],
        [0.1533, 0.8467],
        [0.1533, 0.8467],
        [0.1551, 0.8449]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1685, -1.8756, -0.1664, -1.8636, -0.1664, -0.1664, -0.1664, -0.1664,
        -0.1664, -0.1685], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [ True False False False False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1551, 0.8449],
        [0.1515, 0.8485],
        [0.1551, 0.8449],
        [0.1515, 0.8485],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.8636, -1.8872, -1.8636, -0.1643, -0.1685, -0.1685, -0.1685, -0.1685,
        -0.1685, -0.1685], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [False False  True  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1515, 0.8485],
        [0.1515, 0.8485],
        [0.1488, 0.8512],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1643, -1.8872, -0.1611, -0.1685, -0.1685, -0.1685, -0.1685, -0.1685,
        -0.1685, -1.8636], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [ True False False  True False False  True False False False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1551, 0.8449],
        [0.1515, 0.8485],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1515, 0.8485]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1685, -0.1643, -0.1685, -1.8636, -0.1685, -0.1685, -0.1685, -0.1685,
        -0.1685, -0.1643], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [ True  True False False False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1515, 0.8485],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449],
        [0.1551, 0.8449]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1685, -0.1685, -0.1685, -0.1643, -0.1685, -0.1685, -1.8636, -0.1685,
        -0.1685, -1.8636], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [ True  True False  True False False False False False False]
DEBUG:src.train:Log Probs: tensor([[-0.1685, -1.8756, -0.1664, -1.8636, -0.1664, -0.1664, -0.1664, -0.1664,
         -0.1664, -0.1685],
        [-1.8636, -1.8872, -1.8636, -0.1643, -0.1685, -0.1685, -0.1685, -0.1685,
         -0.1685, -0.1685],
        [-0.1643, -1.8872, -0.1611, -0.1685, -0.1685, -0.1685, -0.1685, -0.1685,
         -0.1685, -1.8636],
        [-0.1685, -0.1643, -0.1685, -1.8636, -0.1685, -0.1685, -0.1685, -0.1685,
         -0.1685, -0.1643],
        [-0.1685, -0.1685, -0.1685, -0.1643, -0.1685, -0.1685, -1.8636, -0.1685,
         -0.1685, -1.8636]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 91: Cumulative reward: 15.624901443719864
INFO:src.train:Episode 91: Reward Differences: 4.541633725166321
INFO:src.train:Episode 91: Average loss: 2.306732416152954
INFO:src.train:Episode 91: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 92: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 92: Target words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1496, 0.8504],
        [0.1496, 0.8504],
        [0.1496, 0.8504],
        [0.1496, 0.8504],
        [0.1496, 0.8504],
        [0.1496, 0.8504],
        [0.1496, 0.8504]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1646, -0.1646, -0.1646, -0.1621, -0.1621, -0.1621, -0.1621, -1.8995,
        -0.1621, -0.1621], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True  True False False False False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1444, 0.8556],
        [0.1518, 0.8482],
        [0.1518, 0.8482]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1560,
        -0.1646, -1.8853], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True  True False False False False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1444, 0.8556]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-1.8853, -1.8853, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646,
        -0.1646, -0.1560], grad_fn=<LogBackward0>)
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1476, 0.8524],
        [0.1476, 0.8524],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1597, -0.1597, -1.8853, -0.1646, -0.1646, -0.1646, -1.8853, -0.1646,
        -0.1646, -1.8853], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True  True  True False False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1444, 0.8556],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1444, 0.8556],
        [0.1518, 0.8482],
        [0.1518, 0.8482],
        [0.1444, 0.8556]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1646, -0.1646, -0.1560, -1.8853, -1.8853, -0.1646, -0.1560, -1.8853,
        -0.1646, -0.1560], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True  True False  True  True False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.1646, -0.1646, -0.1646, -0.1621, -0.1621, -0.1621, -0.1621, -1.8995,
         -0.1621, -0.1621],
        [-0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1560,
         -0.1646, -1.8853],
        [-1.8853, -1.8853, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646, -0.1646,
         -0.1646, -0.1560],
        [-0.1597, -0.1597, -1.8853, -0.1646, -0.1646, -0.1646, -1.8853, -0.1646,
         -0.1646, -1.8853],
        [-0.1646, -0.1646, -0.1560, -1.8853, -1.8853, -0.1646, -0.1560, -1.8853,
         -0.1646, -0.1560]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 92: Cumulative reward: 15.89005894958973
INFO:src.train:Episode 92: Reward Differences: 5.138238146901131
INFO:src.train:Episode 92: Average loss: 2.608552932739258
INFO:src.train:Episode 92: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 93: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 93: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1475, 0.8525],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1475, 0.8525],
        [0.1500, 0.8500],
        [0.1475, 0.8525],
        [0.1475, 0.8525]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1625, -0.1625, -0.1596, -0.1625, -1.8974, -0.1625, -0.1596, -0.1625,
        -0.1596, -0.1596], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [False False False False  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1415, 0.8585],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-1.8974, -0.1625, -0.1625, -0.1625, -0.1525, -0.1625, -0.1625, -0.1625,
        -1.8974, -1.8974], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [ True False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1415, 0.8585],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1415, 0.8585],
        [0.1451, 0.8549]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1525, -0.1625, -0.1625, -0.1625, -0.1625, -1.8974, -0.1625, -1.8974,
        -0.1525, -0.1568], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1415, 0.8585],
        [0.1500, 0.8500],
        [0.1415, 0.8585],
        [0.1500, 0.8500],
        [0.1500, 0.8500]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1625, -0.1625, -0.1625, -0.1625, -0.1625, -0.1525, -1.8974, -0.1525,
        -0.1625, -0.1625], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [False False False False False False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1451, 0.8549],
        [0.1500, 0.8500],
        [0.1500, 0.8500],
        [0.1500, 0.8500]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1625, -0.1625, -0.1625, -0.1625, -0.1625, -0.1625, -1.9302, -0.1625,
        -0.1625, -0.1625], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [False False False False False False False False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.1625, -0.1625, -0.1596, -0.1625, -1.8974, -0.1625, -0.1596, -0.1625,
         -0.1596, -0.1596],
        [-1.8974, -0.1625, -0.1625, -0.1625, -0.1525, -0.1625, -0.1625, -0.1625,
         -1.8974, -1.8974],
        [-0.1525, -0.1625, -0.1625, -0.1625, -0.1625, -1.8974, -0.1625, -1.8974,
         -0.1525, -0.1568],
        [-0.1625, -0.1625, -0.1625, -0.1625, -0.1625, -0.1525, -1.8974, -0.1525,
         -0.1625, -0.1625],
        [-0.1625, -0.1625, -0.1625, -0.1625, -0.1625, -0.1625, -1.9302, -0.1625,
         -0.1625, -0.1625]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 93: Cumulative reward: 14.564271405339241
INFO:src.train:Episode 93: Reward Differences: 4.077608063817024
INFO:src.train:Episode 93: Average loss: 1.79160737991333
INFO:src.train:Episode 93: Last Step Accuracy: 0.10000000149011612
DEBUG:src.train:Episode 94: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 94: Target words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1458, 0.8542],
        [0.1485, 0.8515],
        [0.1458, 0.8542],
        [0.1485, 0.8515],
        [0.1458, 0.8542],
        [0.1485, 0.8515],
        [0.1458, 0.8542],
        [0.1485, 0.8515],
        [0.1458, 0.8542],
        [0.1485, 0.8515]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1576, -0.1608, -0.1576, -1.9070, -0.1576, -0.1608, -0.1576, -0.1608,
        -0.1576, -0.1608], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False  True  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1390, 0.8610],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-1.9070, -0.1608, -0.1608, -0.1496, -0.1608, -0.1608, -0.1608, -0.1608,
        -0.1608, -0.1608], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [ True  True  True False  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1390, 0.8610],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1496, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608,
        -1.9070, -0.1608], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False  True  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1431, 0.8569],
        [0.1485, 0.8515]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608,
        -0.1544, -1.9070], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False  True  True False  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1485, 0.8515],
        [0.1431, 0.8569]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-1.9070, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608,
        -0.1608, -0.1544], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [ True  True  True False  True  True False False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.1576, -0.1608, -0.1576, -1.9070, -0.1576, -0.1608, -0.1576, -0.1608,
         -0.1576, -0.1608],
        [-1.9070, -0.1608, -0.1608, -0.1496, -0.1608, -0.1608, -0.1608, -0.1608,
         -0.1608, -0.1608],
        [-0.1496, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608,
         -1.9070, -0.1608],
        [-0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608,
         -0.1544, -1.9070],
        [-1.9070, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608, -0.1608,
         -0.1608, -0.1544]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 94: Cumulative reward: 17.348425313830376
INFO:src.train:Episode 94: Reward Differences: 5.403395667672157
INFO:src.train:Episode 94: Average loss: 1.8068379163742065
INFO:src.train:Episode 94: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 95: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 95: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1462, 0.8538],
        [0.1432, 0.8568],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1432, 0.8568],
        [0.1432, 0.8568],
        [0.1432, 0.8568],
        [0.1432, 0.8568],
        [0.1462, 0.8538]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1580, -0.1545, -0.1580, -0.1580, -0.1580, -0.1545, -0.1545, -0.1545,
        -0.1545, -0.1580], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [False False  True  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'apple' 'orange' 'apple' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1580, -0.1580, -0.1580, -1.9231, -1.9231, -0.1580, -1.9231, -1.9231,
        -0.1580, -0.1580], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [False False  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1402, 0.8598],
        [0.1356, 0.8644],
        [0.1462, 0.8538],
        [0.1402, 0.8598],
        [0.1356, 0.8644],
        [0.1462, 0.8538],
        [0.1462, 0.8538]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1580, -0.1580, -1.9231, -0.1510, -0.1457, -0.1580, -0.1510, -0.1457,
        -1.9231, -0.1580], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [False False False  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1402, 0.8598],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1402, 0.8598],
        [0.1462, 0.8538]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 0, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1580, -1.9231, -0.1510, -0.1580, -0.1580, -0.1580, -1.9231, -0.1580,
        -1.9649, -0.1580], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [False  True  True  True False  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1462, 0.8538],
        [0.1356, 0.8644],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1462, 0.8538],
        [0.1402, 0.8598],
        [0.1462, 0.8538],
        [0.1402, 0.8598],
        [0.1462, 0.8538]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1580, -0.1457, -0.1580, -0.1580, -0.1580, -1.9231, -0.1510, -0.1580,
        -0.1510, -0.1580], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [False False  True  True False False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.1580, -0.1545, -0.1580, -0.1580, -0.1580, -0.1545, -0.1545, -0.1545,
         -0.1545, -0.1580],
        [-0.1580, -0.1580, -0.1580, -1.9231, -1.9231, -0.1580, -1.9231, -1.9231,
         -0.1580, -0.1580],
        [-0.1580, -0.1580, -1.9231, -0.1510, -0.1457, -0.1580, -0.1510, -0.1457,
         -1.9231, -0.1580],
        [-0.1580, -1.9231, -0.1510, -0.1580, -0.1580, -0.1580, -1.9231, -0.1580,
         -1.9649, -0.1580],
        [-0.1580, -0.1457, -0.1580, -0.1580, -0.1580, -1.9231, -0.1510, -0.1580,
         -0.1510, -0.1580]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 95: Cumulative reward: 16.619242131710052
INFO:src.train:Episode 95: Reward Differences: 4.939370006322861
INFO:src.train:Episode 95: Average loss: 2.519447088241577
INFO:src.train:Episode 95: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 96: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 96: Target words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1420, 0.8580],
        [0.1452, 0.8548],
        [0.1420, 0.8580],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1420, 0.8580],
        [0.1452, 0.8548],
        [0.1420, 0.8580],
        [0.1452, 0.8548],
        [0.1420, 0.8580]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1531, -1.9295, -0.1531, -1.9295, -0.1569, -0.1531, -0.1569, -0.1531,
        -1.9295, -0.1531], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [False  True False False False False  True False False False]
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1452, 0.8548],
        [0.1337, 0.8663],
        [0.1452, 0.8548],
        [0.1387, 0.8613],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1387, 0.8613],
        [0.1452, 0.8548]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1569, -0.1435, -0.1569, -0.1493, -0.1569, -1.9295, -0.1569, -0.1569,
        -0.1493, -1.9295], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [False False False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1337, 0.8663],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1337, 0.8663]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-1.9295, -0.1569, -0.1569, -0.1569, -0.1569, -0.1435, -0.1569, -0.1569,
        -0.1569, -0.1435], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [ True False False  True False False  True False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1337, 0.8663],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-0.1435, -0.1569, -1.9295, -0.1569, -1.9295, -0.1569, -0.1569, -0.1569,
        -0.1569, -0.1569], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [False False  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1337, 0.8663],
        [0.1452, 0.8548],
        [0.1337, 0.8663],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548],
        [0.1452, 0.8548]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1569, -0.1569, -0.1435, -0.1569, -0.1435, -0.1569, -0.1569, -0.1569,
        -1.9295, -0.1569], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [False False False  True False False  True False False False]
DEBUG:src.train:Log Probs: tensor([[-0.1531, -1.9295, -0.1531, -1.9295, -0.1569, -0.1531, -0.1569, -0.1531,
         -1.9295, -0.1531],
        [-0.1569, -0.1435, -0.1569, -0.1493, -0.1569, -1.9295, -0.1569, -0.1569,
         -0.1493, -1.9295],
        [-1.9295, -0.1569, -0.1569, -0.1569, -0.1569, -0.1435, -0.1569, -0.1569,
         -0.1569, -0.1435],
        [-0.1435, -0.1569, -1.9295, -0.1569, -1.9295, -0.1569, -0.1569, -0.1569,
         -0.1569, -0.1569],
        [-0.1569, -0.1569, -0.1435, -0.1569, -0.1435, -0.1569, -0.1569, -0.1569,
         -1.9295, -0.1569]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 96: Cumulative reward: 15.757480189204216
INFO:src.train:Episode 96: Reward Differences: 4.2101868242025375
INFO:src.train:Episode 96: Average loss: 1.9942713975906372
INFO:src.train:Episode 96: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 97: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 97: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1415, 0.8585],
        [0.1451, 0.8549],
        [0.1415, 0.8585],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1415, 0.8585],
        [0.1415, 0.8585]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1567, -0.1567, -0.1567, -0.1525, -0.1567, -0.1525, -0.1567, -0.1567,
        -1.9556, -1.9556], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [ True False  True  True False  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1379, 0.8621],
        [0.1324, 0.8676]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1567, -0.1567, -0.1567, -0.1567, -0.1567, -0.1567, -0.1567, -1.9306,
        -0.1483, -0.1420], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [ True False  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1324, 0.8676],
        [0.1451, 0.8549],
        [0.1451, 0.8549]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1567, -0.1567, -1.9306, -0.1567, -0.1567, -0.1567, -0.1567, -0.1420,
        -1.9306, -0.1567], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [ True False False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1379, 0.8621],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1379, 0.8621],
        [0.1451, 0.8549]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-1.9306, -0.1567, -0.1483, -0.1567, -0.1567, -0.1567, -0.1567, -0.1567,
        -0.1483, -0.1567], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [False False  True  True False  True False False  True False]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1379, 0.8621],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549],
        [0.1451, 0.8549]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1483, -1.9306, -0.1567, -0.1567, -1.9306, -0.1567, -0.1567, -0.1567,
        -0.1567, -0.1567], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [ True  True  True  True  True  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[-0.1567, -0.1567, -0.1567, -0.1525, -0.1567, -0.1525, -0.1567, -0.1567,
         -1.9556, -1.9556],
        [-0.1567, -0.1567, -0.1567, -0.1567, -0.1567, -0.1567, -0.1567, -1.9306,
         -0.1483, -0.1420],
        [-0.1567, -0.1567, -1.9306, -0.1567, -0.1567, -0.1567, -0.1567, -0.1420,
         -1.9306, -0.1567],
        [-1.9306, -0.1567, -0.1483, -0.1567, -0.1567, -0.1567, -0.1567, -0.1567,
         -0.1483, -0.1567],
        [-0.1483, -1.9306, -0.1567, -0.1567, -1.9306, -0.1567, -0.1567, -0.1567,
         -0.1567, -0.1567]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 97: Cumulative reward: 16.818110287189484
INFO:src.train:Episode 97: Reward Differences: 5.469685047864914
INFO:src.train:Episode 97: Average loss: 2.407302141189575
INFO:src.train:Episode 97: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 98: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 98: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1414, 0.8586],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1414, 0.8586],
        [0.1414, 0.8586],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1414, 0.8586],
        [0.1453, 0.8547],
        [0.1414, 0.8586]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1525, -0.1570, -0.1570, -0.1525, -0.1525, -0.1570, -0.1570, -1.9559,
        -0.1570, -0.1525], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [False  True False  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1316, 0.8684],
        [0.1453, 0.8547],
        [0.1453, 0.8547]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1570, -0.1570, -0.1570, -0.1570, -0.1570, -0.1570, -0.1570, -2.0282,
        -0.1570, -0.1570], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [False  True False  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1316, 0.8684],
        [0.1453, 0.8547],
        [0.1453, 0.8547]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.1570, -0.1570, -1.9288, -0.1570, -0.1570, -0.1570, -0.1570, -0.1411,
        -1.9288, -0.1570], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [False  True  True  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1316, 0.8684],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1375, 0.8625],
        [0.1453, 0.8547]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-1.9288, -1.9288, -0.1411, -1.9288, -0.1570, -0.1570, -0.1570, -0.1570,
        -0.1479, -0.1570], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [ True False False False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1316, 0.8684],
        [0.1375, 0.8625],
        [0.1453, 0.8547],
        [0.1375, 0.8625],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547],
        [0.1453, 0.8547]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1411, -0.1479, -0.1570, -0.1479, -0.1570, -0.1570, -0.1570, -0.1570,
        -1.9288, -0.1570], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Log Probs: tensor([[-0.1525, -0.1570, -0.1570, -0.1525, -0.1525, -0.1570, -0.1570, -1.9559,
         -0.1570, -0.1525],
        [-0.1570, -0.1570, -0.1570, -0.1570, -0.1570, -0.1570, -0.1570, -2.0282,
         -0.1570, -0.1570],
        [-0.1570, -0.1570, -1.9288, -0.1570, -0.1570, -0.1570, -0.1570, -0.1411,
         -1.9288, -0.1570],
        [-1.9288, -1.9288, -0.1411, -1.9288, -0.1570, -0.1570, -0.1570, -0.1570,
         -0.1479, -0.1570],
        [-0.1411, -0.1479, -0.1570, -0.1479, -0.1570, -0.1570, -0.1570, -0.1570,
         -1.9288, -0.1570]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 98: Cumulative reward: 16.28779524564743
INFO:src.train:Episode 98: Reward Differences: 4.674212485551834
INFO:src.train:Episode 98: Average loss: 2.0621542930603027
INFO:src.train:Episode 98: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 99: Input words: ['apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 99: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1418, 0.8582],
        [0.1418, 0.8582],
        [0.1459, 0.8541],
        [0.1418, 0.8582],
        [0.1418, 0.8582],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1418, 0.8582],
        [0.1459, 0.8541]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1529, -0.1529, -0.1577, -1.9535, -0.1529, -0.1577, -0.1577, -0.1577,
        -1.9535, -1.9248], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [ True False  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1312, 0.8688],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1312, 0.8688],
        [0.1312, 0.8688]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -0.1577, -0.1577, -0.1407, -0.1577, -0.1577, -0.1577, -0.1577,
        -0.1407, -2.0308], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [ True False  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1312, 0.8688]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
        -0.1577, -0.1407], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [ True False  True False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'apple']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
        -0.1577, -1.9248], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [ True False  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1312, 0.8688]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -1.9248, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
        -0.1577, -0.1407], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [ True  True  True False  True False False  True False False]
DEBUG:src.train:Log Probs: tensor([[-0.1529, -0.1529, -0.1577, -1.9535, -0.1529, -0.1577, -0.1577, -0.1577,
         -1.9535, -1.9248],
        [-0.1577, -0.1577, -0.1577, -0.1407, -0.1577, -0.1577, -0.1577, -0.1577,
         -0.1407, -2.0308],
        [-0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
         -0.1577, -0.1407],
        [-0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
         -0.1577, -1.9248],
        [-0.1577, -1.9248, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
         -0.1577, -0.1407]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 99: Cumulative reward: 16.552952751517296
INFO:src.train:Episode 99: Reward Differences: 5.005659386515617
INFO:src.train:Episode 99: Average loss: 1.8589891195297241
INFO:src.train:Episode 99: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 100: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 100: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1416, 0.8584],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1416, 0.8584],
        [0.1416, 0.8584],
        [0.1459, 0.8541]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'apple' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -0.1577, -0.1577, -1.9248, -0.1527, -0.1577, -0.1577, -0.1527,
        -0.1527, -0.1577], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True  True  True False  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1372, 0.8628],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 0, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['orange' 'apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -1.9248, -0.1577, -0.1476, -0.1577, -0.1577, -0.1577, -0.1577,
        -1.9248, -1.9248], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True False  True  True  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1372, 0.8628],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1306, 0.8694],
        [0.1372, 0.8628]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-1.9248, -0.1476, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
        -0.1400, -0.1476], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [False  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1372, 0.8628],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.1476, -0.1577, -0.1577, -0.1577, -0.1577, -1.9248, -0.1577, -0.1577,
        -0.1577, -0.1577], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True  True  True  True  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1306, 0.8694],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541],
        [0.1459, 0.8541]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1400, -0.1577, -0.1577,
        -0.1577, -0.1577], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[-0.1577, -0.1577, -0.1577, -1.9248, -0.1527, -0.1577, -0.1577, -0.1527,
         -0.1527, -0.1577],
        [-0.1577, -1.9248, -0.1577, -0.1476, -0.1577, -0.1577, -0.1577, -0.1577,
         -1.9248, -1.9248],
        [-1.9248, -0.1476, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1577,
         -0.1400, -0.1476],
        [-0.1476, -0.1577, -0.1577, -0.1577, -0.1577, -1.9248, -0.1577, -0.1577,
         -0.1577, -0.1577],
        [-0.1577, -0.1577, -0.1577, -0.1577, -0.1577, -0.1400, -0.1577, -0.1577,
         -0.1577, -0.1577]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 100: Cumulative reward: 18.674212858080864
INFO:src.train:Episode 100: Reward Differences: 5.668553188443184
INFO:src.train:Episode 100: Average loss: 2.0857088565826416
INFO:src.train:Episode 100: Last Step Accuracy: 0.800000011920929
INFO:src.train:Training complete
INFO:src.train:Episode losses: [3.980574131011963, 3.8921031951904297, 2.8580565452575684, 3.2857143878936768, 3.8874261379241943, 3.600754499435425, 3.3592147827148438, 3.4431090354919434, 3.1523866653442383, 3.3314175605773926, 4.0180745124816895, 3.8171145915985107, 3.0972344875335693, 2.7308437824249268, 3.195899248123169, 2.9787936210632324, 2.9139299392700195, 2.732264995574951, 3.112053155899048, 2.349149703979492, 2.6309447288513184, 3.2712042331695557, 2.635286808013916, 3.0420479774475098, 2.554457664489746, 1.9674943685531616, 3.181569814682007, 2.6039609909057617, 2.0094330310821533, 2.077078104019165, 2.68353271484375, 2.077341079711914, 1.9775036573410034, 2.415513277053833, 2.334050178527832, 2.129986524581909, 1.7155046463012695, 2.6281206607818604, 2.282156467437744, 3.1161115169525146, 2.1012368202209473, 1.5996828079223633, 2.8678719997406006, 2.538053512573242, 2.66764760017395, 2.2314035892486572, 1.7505592107772827, 2.9923906326293945, 2.859445095062256, 2.241189956665039, 2.8624842166900635, 2.7567009925842285, 3.6117165088653564, 3.2541251182556152, 3.34492564201355, 3.323382616043091, 3.382995367050171, 3.487501621246338, 3.4486520290374756, 3.3209314346313477, 3.3619515895843506, 3.7264785766601562, 3.3210787773132324, 3.124211072921753, 3.199744462966919, 3.2401437759399414, 3.8941903114318848, 3.5899341106414795, 4.074048042297363, 3.1349620819091797, 3.399683952331543, 3.3843603134155273, 2.6495907306671143, 2.623459577560425, 3.314281702041626, 2.7494964599609375, 2.914177179336548, 2.7637479305267334, 2.062044382095337, 2.632469892501831, 2.098515748977661, 2.530475378036499, 2.2957258224487305, 1.9045792818069458, 2.7671921253204346, 1.9605746269226074, 2.845048189163208, 3.0351126194000244, 1.9502366781234741, 2.0526440143585205, 2.306732416152954, 2.608552932739258, 1.79160737991333, 1.8068379163742065, 2.519447088241577, 1.9942713975906372, 2.407302141189575, 2.0621542930603027, 1.8589891195297241, 2.0857088565826416]
DEBUG:matplotlib.pyplot:Loaded backend tkagg version 8.6.
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosbi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romai___.ttf', name='Romantic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AmiriQuran.ttf', name='Amiri Quran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissc.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RB_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-MediumItalic.otf', name='David CLM', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV25.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AIGDT___.TTF', name='AIGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisski.ttf', name='Swis721 Blk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgreks.ttf', name='SWGreks', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Regular.ttf', name='Alef', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Regular.otf', name='Miriam Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cityb___.ttf', name='CityBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnd.ttf', name='SWRomnd', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMGDT___.ttf', name='AMGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV25.ttf', name='AMGDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\panroman.ttf', name='PanRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Medium.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Italic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutcheb.ttf', name='Dutch801 XBd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\umath.ttf', name='UniversalMath1 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV50.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Italic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobesongstd-light.otf', name='Adobe Song Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Italic.ttf', name='Rubik', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Bold.ttf', name='Caladea', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc__.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\technic_.ttf', name='Technic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Bold.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromns.ttf', name='SWRomns', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Bold.ttf', name='Carlito', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot2.ttf', name='SWIsot2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hyswlongfangsong.ttf', name='HYSWLongFangSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\stylu.ttf', name='Stylus BT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisse.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common.ttf', name='GOST Common', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_R_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbo.ttf', name='Swis721 BdCnOul BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmono.ttf', name='SWMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romantic.ttf', name='Romantic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Regular.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Regular.ttf', name='Rubik', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Italic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV50.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_R_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV25.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Bold.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Regular.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV50.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalt.ttf', name='SWItalt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-light.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romab___.ttf', name='Romantic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Lt.ttf', name='HP Simplified', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Condensed.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MinionPro-Regular.otf', name='Minion Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothe.ttf', name='SWGothe', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot1.ttf', name='SWIsot1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Regular.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MyriadPro-Regular.otf', name='Myriad Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd.otf', name='Courier Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Bold.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Bold.ttf', name='Amiri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Regular.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurro___.ttf', name='EuroRoman', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Book.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-regular.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-LightItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasB.ttf', name='Gentium Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnt.ttf', name='SWRomnt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\shellnormal.ttf', name='Shell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissel.ttf', name='Swis721 LtEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techb___.ttf', name='TechnicBold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy1.ttf', name='Proxy 1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RBI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Bold.ttf', name='David Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_DR_G.ttf', name='Linux Libertine Display G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Regular.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans__.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Italic.otf', name='Adobe Thai', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot3.ttf', name='SWIsot3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Regular.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV50.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV50.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-BoldItalic.ttf', name='Carlito', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutch.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothl.ttf', name='BankGothic Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Regular.ttf', name='David Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_____.ttf', name='GDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissck.ttf', name='Swis721 BlkCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop2.ttf', name='SWIsop2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Regular.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmusic.ttf', name='SWMusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Regular.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy5.ttf', name='Proxy 5', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Bold.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swsimp.ttf', name='SWSimp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\compi.ttf', name='CommercialPi BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscl.ttf', name='Swis721 LtCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Bold.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop3.ttf', name='SWIsop3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Bold.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Regular.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Light.ttf', name='Noto Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sansso__.ttf', name='SansSerif', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV50.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy6.ttf', name='Proxy 6', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV50.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV50.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Bold.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV25.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-BoldItalic.otf', name='Adobe Thai', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-BoldItalic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Regular.ttf', name='Artifakt Element', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV25.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Bold.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Bold.otf', name='David CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Regular.otf', name='Adobe Thai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Medium.otf', name='David CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV25.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscb.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3__.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Regular.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techl___.ttf', name='TechnicLite', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV50.ttf', name='AMGDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\myriadcad.otf', name='Myriad CAD', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobeheitistd-regular.otf', name='Adobe Heiti Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV25.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV25.ttf', name='GDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RB_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Regular.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothg.ttf', name='SWGothg', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasR.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swlink.ttf', name='SWLink', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV50.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_LtIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-MediumOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissko.ttf', name='Swis721 BlkOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Bold.ttf', name='Rubik', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmeteo.ttf', name='SWMeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AcadEref.ttf', name='AcadEref', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RI_G.ttf', name='Linux Biolinum G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgdt.ttf', name='SWGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Regular.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV25.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Bold.ttf', name='Reem Kufi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgrekc.ttf', name='SWGrekc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Regular.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Bold.ttf', name='Miriam CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV50.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ZWAdobeF.TTF', name='ZWAdobeF', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV50.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romanc__.ttf', name='RomanC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_____.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozminpr6n-regular.otf', name='Kozuka Mincho Pr6N', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Bold.otf', name='Miriam Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoMono-Regular.ttf', name='Noto Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-regular.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV25.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissci.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmath.ttf', name='SWMath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Bold.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV50.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurr____.ttf', name='EuroRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissb.ttf', name='Swis721 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\counb___.ttf', name='CountryBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Bold.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\vinet.ttf', name='Vineta BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV25.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchbi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV25.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Regular.ttf', name='Caladea', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-oblique.otf', name='Courier Std', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap___.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV25.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Italic.ttf', name='Amiri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV50.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2__.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Regular.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisseb.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=700, stretch='expanded', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZ_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic__.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-bold.otf', name='Courier Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV25.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Bold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Bold.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbi.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasBI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrps.ttf', name='SWScrps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy8.ttf', name='Proxy 8', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Regular.ttf', name='Carlito', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscli.ttf', name='Swis721 LtCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BookOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_BdIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Bold.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Bold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Light.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_It.ttf', name='HP Simplified', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy3.ttf', name='Proxy 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath__.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comsc.ttf', name='CommercialScript BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Bold.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Regular.ttf', name='Amiri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy7.ttf', name='Proxy 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeui.ttf', name='ISOCPEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\olfsimplesansoc-regular.ttf', name='OLF SimpleSansOC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV50.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Rg.ttf', name='HP Simplified', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteui.ttf', name='ISOCTEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmap.ttf', name='SWMap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbo.ttf', name='Swis721 BdOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissl.ttf', name='Swis721 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemingstd-light.otf', name='Adobe Ming Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swiss.ttf', name='Swis721 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscki.ttf', name='Swis721 BlkCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV25.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BoldOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-light.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssbo_.ttf', name='SansSerif', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissk.ttf', name='Swis721 Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common Italic.ttf', name='GOST Common', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Italic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV50.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-BoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV50.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Regular.ttf', name='Reem Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosb.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV25.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Bold.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Italic.ttf', name='Caladea', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozgopr6n-medium.otf', name='Kozuka Gothic Pr6N', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-BoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italicc_.ttf', name='ItalicC', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\opens___.ttf', name='OpenSymbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GENISO.ttf', name='GENISO', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swtxt.ttf', name='SWTxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold.ttf', name='Artifakt Element', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\supef___.ttf', name='SuperFrench', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2__.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy4.ttf', name='Proxy 4', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Bold.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobepistd.otf', name='Adobe Pi Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothi.ttf', name='SWGothi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Regular.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monos.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-BoldItalic.ttf', name='Rubik', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romant__.ttf', name='RomanT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnc.ttf', name='SWRomnc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Bold.ttf', name='Scheherazade', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swcomp.ttf', name='SWComp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Regular.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothicg_.ttf', name='GothicG', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasR.ttf', name='Gentium Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Bold.otf', name='Adobe Thai', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV25.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-BoldItalic.otf', name='David CLM', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuMathTeXGyre.ttf', name='DejaVu Math TeX Gyre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalc.ttf', name='SWItalc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV50.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissek.ttf', name='Swis721 BlkEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Bold.ttf', name='Alef', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrpc.ttf', name='SWScrpc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Italic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Book.ttf', name='Miriam CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Regular.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV25.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-boldoblique.otf', name='Courier Std', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop1.ttf', name='SWIsop1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-BoldOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-BoldItalic.ttf', name='Amiri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simhei.ttf', name='SimHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV25.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scriptc_.ttf', name='ScriptC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV25.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanss___.ttf', name='SansSerif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-BoldOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchb.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Bd.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Condensed.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissli.ttf', name='Swis721 Lt BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Regular.ttf', name='Scheherazade', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italict_.ttf', name='ItalicT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Regular.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasBI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Bold.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV25.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romand__.ttf', name='RomanD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy9.ttf', name='Proxy 9', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swastro.ttf', name='SWAstro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Bold.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy2.ttf', name='Proxy 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothm.ttf', name='BankGothic Md BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV50.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV50.ttf', name='GDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV50.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Italic.ttf', name='Carlito', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Regular.otf', name='Adobe Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothice_.ttf', name='GothicE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasB.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3__.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swital.ttf', name='SWItal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct___.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemyungjostd-medium.otf', name='Adobe Myungjo Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteur.ttf', name='ISOCTEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-BoldItalic.ttf', name='Caladea', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeGothicStd-Bold.otf', name='Adobe Gothic Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Bold.otf', name='Adobe Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV25.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeur.ttf', name='ISOCPEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Bold.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp___.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Bold.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMDT_Symbols.ttf', name='AmdtSymbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Light.ttf', name='Noto Serif', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssb__.ttf', name='SansSerif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-BoldItalic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks__.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothici_.ttf', name='GothicI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV50.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeFanHeitiStd-Bold.otf', name='Adobe Fan Heiti Std', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-LightItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-BoldItalic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-LightOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosbi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romai___.ttf', name='Romantic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AmiriQuran.ttf', name='Amiri Quran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissc.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RB_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-MediumItalic.otf', name='David CLM', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV25.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AIGDT___.TTF', name='AIGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisski.ttf', name='Swis721 Blk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgreks.ttf', name='SWGreks', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Regular.ttf', name='Alef', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Regular.otf', name='Miriam Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cityb___.ttf', name='CityBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnd.ttf', name='SWRomnd', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMGDT___.ttf', name='AMGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV25.ttf', name='AMGDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\panroman.ttf', name='PanRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Medium.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Italic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutcheb.ttf', name='Dutch801 XBd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\umath.ttf', name='UniversalMath1 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV50.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Italic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobesongstd-light.otf', name='Adobe Song Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Italic.ttf', name='Rubik', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Bold.ttf', name='Caladea', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc__.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\technic_.ttf', name='Technic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Bold.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromns.ttf', name='SWRomns', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Bold.ttf', name='Carlito', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot2.ttf', name='SWIsot2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hyswlongfangsong.ttf', name='HYSWLongFangSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\stylu.ttf', name='Stylus BT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisse.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common.ttf', name='GOST Common', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_R_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbo.ttf', name='Swis721 BdCnOul BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmono.ttf', name='SWMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romantic.ttf', name='Romantic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Regular.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Regular.ttf', name='Rubik', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Italic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV50.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_R_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV25.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Bold.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Regular.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV50.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalt.ttf', name='SWItalt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-light.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romab___.ttf', name='Romantic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Lt.ttf', name='HP Simplified', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Condensed.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MinionPro-Regular.otf', name='Minion Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothe.ttf', name='SWGothe', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot1.ttf', name='SWIsot1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Regular.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MyriadPro-Regular.otf', name='Myriad Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd.otf', name='Courier Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Bold.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Bold.ttf', name='Amiri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Regular.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurro___.ttf', name='EuroRoman', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Book.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-regular.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-LightItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasB.ttf', name='Gentium Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnt.ttf', name='SWRomnt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\shellnormal.ttf', name='Shell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissel.ttf', name='Swis721 LtEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techb___.ttf', name='TechnicBold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy1.ttf', name='Proxy 1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RBI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Bold.ttf', name='David Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_DR_G.ttf', name='Linux Libertine Display G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Regular.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans__.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Italic.otf', name='Adobe Thai', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot3.ttf', name='SWIsot3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Regular.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV50.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV50.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-BoldItalic.ttf', name='Carlito', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutch.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothl.ttf', name='BankGothic Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Regular.ttf', name='David Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_____.ttf', name='GDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissck.ttf', name='Swis721 BlkCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop2.ttf', name='SWIsop2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Regular.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmusic.ttf', name='SWMusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Regular.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy5.ttf', name='Proxy 5', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Bold.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swsimp.ttf', name='SWSimp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\compi.ttf', name='CommercialPi BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscl.ttf', name='Swis721 LtCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Bold.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop3.ttf', name='SWIsop3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Bold.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Regular.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Light.ttf', name='Noto Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sansso__.ttf', name='SansSerif', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV50.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy6.ttf', name='Proxy 6', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV50.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV50.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Bold.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV25.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-BoldItalic.otf', name='Adobe Thai', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-BoldItalic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Regular.ttf', name='Artifakt Element', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV25.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Bold.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Bold.otf', name='David CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Regular.otf', name='Adobe Thai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Medium.otf', name='David CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV25.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscb.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3__.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Regular.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techl___.ttf', name='TechnicLite', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV50.ttf', name='AMGDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\myriadcad.otf', name='Myriad CAD', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobeheitistd-regular.otf', name='Adobe Heiti Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV25.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV25.ttf', name='GDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RB_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Regular.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothg.ttf', name='SWGothg', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasR.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swlink.ttf', name='SWLink', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV50.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_LtIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-MediumOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissko.ttf', name='Swis721 BlkOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Bold.ttf', name='Rubik', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmeteo.ttf', name='SWMeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AcadEref.ttf', name='AcadEref', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RI_G.ttf', name='Linux Biolinum G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgdt.ttf', name='SWGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Regular.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV25.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Bold.ttf', name='Reem Kufi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgrekc.ttf', name='SWGrekc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Regular.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Bold.ttf', name='Miriam CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV50.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ZWAdobeF.TTF', name='ZWAdobeF', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV50.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romanc__.ttf', name='RomanC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_____.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozminpr6n-regular.otf', name='Kozuka Mincho Pr6N', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Bold.otf', name='Miriam Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoMono-Regular.ttf', name='Noto Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-regular.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV25.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissci.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmath.ttf', name='SWMath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Bold.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV50.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurr____.ttf', name='EuroRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissb.ttf', name='Swis721 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\counb___.ttf', name='CountryBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Bold.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\vinet.ttf', name='Vineta BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV25.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchbi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV25.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Regular.ttf', name='Caladea', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-oblique.otf', name='Courier Std', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap___.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV25.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Italic.ttf', name='Amiri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV50.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2__.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Regular.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisseb.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=700, stretch='expanded', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZ_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic__.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-bold.otf', name='Courier Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV25.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Bold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Bold.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbi.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasBI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrps.ttf', name='SWScrps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy8.ttf', name='Proxy 8', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Regular.ttf', name='Carlito', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscli.ttf', name='Swis721 LtCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BookOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_BdIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Bold.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Bold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Light.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_It.ttf', name='HP Simplified', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy3.ttf', name='Proxy 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath__.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comsc.ttf', name='CommercialScript BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Bold.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Regular.ttf', name='Amiri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy7.ttf', name='Proxy 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeui.ttf', name='ISOCPEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\olfsimplesansoc-regular.ttf', name='OLF SimpleSansOC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV50.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Rg.ttf', name='HP Simplified', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteui.ttf', name='ISOCTEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmap.ttf', name='SWMap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbo.ttf', name='Swis721 BdOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissl.ttf', name='Swis721 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemingstd-light.otf', name='Adobe Ming Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swiss.ttf', name='Swis721 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscki.ttf', name='Swis721 BlkCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV25.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BoldOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-light.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssbo_.ttf', name='SansSerif', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissk.ttf', name='Swis721 Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common Italic.ttf', name='GOST Common', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Italic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV50.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-BoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV50.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Regular.ttf', name='Reem Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosb.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV25.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Bold.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Italic.ttf', name='Caladea', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozgopr6n-medium.otf', name='Kozuka Gothic Pr6N', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-BoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italicc_.ttf', name='ItalicC', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\opens___.ttf', name='OpenSymbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GENISO.ttf', name='GENISO', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swtxt.ttf', name='SWTxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold.ttf', name='Artifakt Element', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\supef___.ttf', name='SuperFrench', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2__.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy4.ttf', name='Proxy 4', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Bold.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobepistd.otf', name='Adobe Pi Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothi.ttf', name='SWGothi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Regular.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monos.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-BoldItalic.ttf', name='Rubik', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romant__.ttf', name='RomanT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnc.ttf', name='SWRomnc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Bold.ttf', name='Scheherazade', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swcomp.ttf', name='SWComp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Regular.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothicg_.ttf', name='GothicG', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasR.ttf', name='Gentium Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Bold.otf', name='Adobe Thai', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV25.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-BoldItalic.otf', name='David CLM', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuMathTeXGyre.ttf', name='DejaVu Math TeX Gyre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalc.ttf', name='SWItalc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV50.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissek.ttf', name='Swis721 BlkEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Bold.ttf', name='Alef', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrpc.ttf', name='SWScrpc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Italic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Book.ttf', name='Miriam CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Regular.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV25.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-boldoblique.otf', name='Courier Std', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop1.ttf', name='SWIsop1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-BoldOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-BoldItalic.ttf', name='Amiri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simhei.ttf', name='SimHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV25.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scriptc_.ttf', name='ScriptC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV25.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanss___.ttf', name='SansSerif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-BoldOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchb.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Bd.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Condensed.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissli.ttf', name='Swis721 Lt BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Regular.ttf', name='Scheherazade', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italict_.ttf', name='ItalicT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Regular.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasBI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Bold.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV25.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romand__.ttf', name='RomanD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy9.ttf', name='Proxy 9', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swastro.ttf', name='SWAstro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Bold.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy2.ttf', name='Proxy 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothm.ttf', name='BankGothic Md BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV50.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV50.ttf', name='GDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV50.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Italic.ttf', name='Carlito', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Regular.otf', name='Adobe Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothice_.ttf', name='GothicE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasB.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3__.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swital.ttf', name='SWItal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct___.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemyungjostd-medium.otf', name='Adobe Myungjo Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteur.ttf', name='ISOCTEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-BoldItalic.ttf', name='Caladea', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeGothicStd-Bold.otf', name='Adobe Gothic Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Bold.otf', name='Adobe Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV25.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeur.ttf', name='ISOCPEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Bold.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp___.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Bold.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMDT_Symbols.ttf', name='AmdtSymbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Light.ttf', name='Noto Serif', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssb__.ttf', name='SansSerif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-BoldItalic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks__.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothici_.ttf', name='GothicI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV50.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeFanHeitiStd-Bold.otf', name='Adobe Fan Heiti Std', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-LightItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-BoldItalic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-LightOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:matplotlib.colorbar:locator: <matplotlib.ticker.AutoLocator object at 0x00000126BBABE930>
