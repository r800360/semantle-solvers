DEBUG:src.train:Episode 1: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 1: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143],
        [0.4857, 0.5143]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 0, 1, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-0.7221, -0.7221, -0.6650, -0.7221, -0.6650, -0.7221, -0.6650, -0.7221,
        -0.7221, -0.6650], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [False False  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183],
        [0.4817, 0.5183]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'apple' 'apple'
 'apple' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.7304, -0.6573, -0.6573, -0.6573, -0.6573, -0.7304, -0.7304, -0.7304,
        -0.7304, -0.6573], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [False  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208],
        [0.4792, 0.5208]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action words: ['apple' 'orange' 'apple' 'orange' 'apple' 'orange' 'orange' 'orange'
 'apple' 'apple']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-0.7357, -0.6523, -0.7357, -0.6523, -0.7357, -0.6523, -0.6523, -0.6523,
        -0.7357, -0.7357], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [False  True False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224],
        [0.4776, 0.5224]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 0, 1, 0, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'apple' 'orange' 'apple'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-0.7390, -0.6493, -0.6493, -0.7390, -0.7390, -0.7390, -0.6493, -0.7390,
        -0.6493, -0.6493], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [False  True  True False False False False  True  True  True]
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234],
        [0.4766, 0.5234]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'apple' 'apple' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-0.7411, -0.6474, -0.6474, -0.7411, -0.7411, -0.6474, -0.6474, -0.6474,
        -0.6474, -0.6474], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 1: Guess correctness - [False  True  True False False  True False False  True  True]
DEBUG:src.train:Log Probs: tensor([[-0.7221, -0.7221, -0.6650, -0.7221, -0.6650, -0.7221, -0.6650, -0.7221,
         -0.7221, -0.6650],
        [-0.7304, -0.6573, -0.6573, -0.6573, -0.6573, -0.7304, -0.7304, -0.7304,
         -0.7304, -0.6573],
        [-0.7357, -0.6523, -0.7357, -0.6523, -0.7357, -0.6523, -0.6523, -0.6523,
         -0.7357, -0.7357],
        [-0.7390, -0.6493, -0.6493, -0.7390, -0.7390, -0.7390, -0.6493, -0.7390,
         -0.6493, -0.6493],
        [-0.7411, -0.6474, -0.6474, -0.7411, -0.7411, -0.6474, -0.6474, -0.6474,
         -0.6474, -0.6474]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 1: Cumulative reward: 16.552952751517296
INFO:src.train:Episode 1: Reward Differences: 4.873080626130104
INFO:src.train:Episode 1: Average loss: 3.3690145015716553
INFO:src.train:Episode 1: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 2: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 2: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641],
        [0.2359, 0.7641]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([0, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['apple' 'orange' 'orange' 'orange' 'orange' 'apple' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.4441, -0.2691, -0.2691, -0.2691, -0.2691, -1.4441, -0.2691, -0.2691,
        -0.2691, -0.2691], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [False False  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884],
        [0.0116, 0.9884]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([-0.0117, -0.0117, -0.0117, -0.0117, -0.0117, -0.0117, -0.0117, -0.0117,
        -0.0117, -0.0117], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.3954e-04, 9.9976e-01],
        [2.3953e-04, 9.9976e-01],
        [2.3949e-04, 9.9976e-01],
        [2.3953e-04, 9.9976e-01],
        [2.3949e-04, 9.9976e-01],
        [2.3954e-04, 9.9976e-01],
        [2.3949e-04, 9.9976e-01],
        [2.3949e-04, 9.9976e-01],
        [2.3953e-04, 9.9976e-01],
        [2.3953e-04, 9.9976e-01]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([-0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002,
        -0.0002, -0.0002], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.5791e-05, 9.9991e-01],
        [8.5791e-05, 9.9991e-01],
        [8.5788e-05, 9.9991e-01],
        [8.5791e-05, 9.9991e-01],
        [8.5788e-05, 9.9991e-01],
        [8.5791e-05, 9.9991e-01],
        [8.5788e-05, 9.9991e-01],
        [8.5788e-05, 9.9991e-01],
        [8.5791e-05, 9.9991e-01],
        [8.5791e-05, 9.9991e-01]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([-8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05,
        -8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01],
        [7.5459e-05, 9.9992e-01]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([-7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05,
        -7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 2: Guess correctness - [ True False  True False  True False False False False  True]
DEBUG:src.train:Log Probs: tensor([[-1.4441e+00, -2.6912e-01, -2.6912e-01, -2.6912e-01, -2.6912e-01,
         -1.4441e+00, -2.6912e-01, -2.6912e-01, -2.6912e-01, -2.6912e-01],
        [-1.1670e-02, -1.1670e-02, -1.1668e-02, -1.1670e-02, -1.1668e-02,
         -1.1670e-02, -1.1668e-02, -1.1668e-02, -1.1670e-02, -1.1670e-02],
        [-2.3958e-04, -2.3958e-04, -2.3946e-04, -2.3958e-04, -2.3946e-04,
         -2.3958e-04, -2.3946e-04, -2.3946e-04, -2.3958e-04, -2.3958e-04],
        [-8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05,
         -8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05, -8.5834e-05],
        [-7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05,
         -7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05, -7.5462e-05]],
       grad_fn=<CatBackward0>)
INFO:src.train:Episode 2: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 2: Reward Differences: 4.806791245937347
INFO:src.train:Episode 2: Average loss: 0.49624714255332947
INFO:src.train:Episode 2: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 3: Input words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 3: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[1.7905e-05, 9.9998e-01],
        [1.8423e-05, 9.9998e-01],
        [1.8423e-05, 9.9998e-01],
        [1.7905e-05, 9.9998e-01],
        [1.7905e-05, 9.9998e-01],
        [1.7905e-05, 9.9998e-01],
        [1.7905e-05, 9.9998e-01],
        [1.7905e-05, 9.9998e-01],
        [1.8423e-05, 9.9998e-01],
        [1.8423e-05, 9.9998e-01]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-1.7882e-05, -1.8478e-05, -1.8478e-05, -1.7882e-05, -1.7882e-05,
        -1.7882e-05, -1.7882e-05, -1.7882e-05, -1.8478e-05, -1.8478e-05],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [ True False  True  True False False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.5120e-07, 1.0000e+00],
        [4.5203e-07, 1.0000e+00],
        [4.5203e-07, 1.0000e+00],
        [4.5120e-07, 1.0000e+00],
        [4.5120e-07, 1.0000e+00],
        [4.5120e-07, 1.0000e+00],
        [4.5120e-07, 1.0000e+00],
        [4.5120e-07, 1.0000e+00],
        [4.5203e-07, 1.0000e+00],
        [4.5203e-07, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([-4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07,
        -4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [ True False  True  True False False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7850e-07, 1.0000e+00],
        [2.7857e-07, 1.0000e+00],
        [2.7857e-07, 1.0000e+00],
        [2.7850e-07, 1.0000e+00],
        [2.7850e-07, 1.0000e+00],
        [2.7850e-07, 1.0000e+00],
        [2.7850e-07, 1.0000e+00],
        [2.7850e-07, 1.0000e+00],
        [2.7857e-07, 1.0000e+00],
        [2.7857e-07, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([-2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07,
        -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [ True False  True  True False False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5998e-07, 1.0000e+00],
        [2.6000e-07, 1.0000e+00],
        [2.6000e-07, 1.0000e+00],
        [2.5998e-07, 1.0000e+00],
        [2.5998e-07, 1.0000e+00],
        [2.5998e-07, 1.0000e+00],
        [2.5998e-07, 1.0000e+00],
        [2.5998e-07, 1.0000e+00],
        [2.6000e-07, 1.0000e+00],
        [2.6000e-07, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([-2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07,
        -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [ True False  True  True False False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00],
        [2.5707e-07, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([-2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07,
        -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 3: Guess correctness - [ True False  True  True False False  True  True False False]
DEBUG:src.train:Log Probs: tensor([[-1.7882e-05, -1.8478e-05, -1.8478e-05, -1.7882e-05, -1.7882e-05,
         -1.7882e-05, -1.7882e-05, -1.7882e-05, -1.8478e-05, -1.8478e-05],
        [-4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07,
         -4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07, -4.7684e-07],
        [-2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07,
         -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07],
        [-2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07,
         -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07],
        [-2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07,
         -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07, -2.3842e-07]],
       grad_fn=<CatBackward0>)
INFO:src.train:Episode 3: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 3: Reward Differences: 5.005659386515617
INFO:src.train:Episode 3: Average loss: 1.933392559294589e-05
INFO:src.train:Episode 3: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 4: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 4: Target words: ['apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.4369e-07, 1.0000e+00],
        [3.4369e-07, 1.0000e+00],
        [3.4369e-07, 1.0000e+00],
        [3.4369e-07, 1.0000e+00],
        [3.4369e-07, 1.0000e+00],
        [3.4369e-07, 1.0000e+00],
        [3.4436e-07, 1.0000e+00],
        [3.4436e-07, 1.0000e+00],
        [3.4369e-07, 1.0000e+00],
        [3.4436e-07, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([-3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07,
        -3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07],
       grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False False False False  True  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.6521e-09, 1.0000e+00],
        [5.6521e-09, 1.0000e+00],
        [5.6521e-09, 1.0000e+00],
        [5.6521e-09, 1.0000e+00],
        [5.6521e-09, 1.0000e+00],
        [5.6521e-09, 1.0000e+00],
        [5.6529e-09, 1.0000e+00],
        [5.6529e-09, 1.0000e+00],
        [5.6521e-09, 1.0000e+00],
        [5.6529e-09, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False False False False  True  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0399e-09, 1.0000e+00],
        [3.0399e-09, 1.0000e+00],
        [3.0399e-09, 1.0000e+00],
        [3.0399e-09, 1.0000e+00],
        [3.0399e-09, 1.0000e+00],
        [3.0399e-09, 1.0000e+00],
        [3.0400e-09, 1.0000e+00],
        [3.0400e-09, 1.0000e+00],
        [3.0399e-09, 1.0000e+00],
        [3.0400e-09, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False False False False  True  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00],
        [2.7764e-09, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False False False False  True  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00],
        [2.7366e-09, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 4: Guess correctness - [False False False False  True  True False False False False]
DEBUG:src.train:Log Probs: tensor([[-3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07,
         -3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07, -3.5763e-07],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00]],
       grad_fn=<CatBackward0>)
INFO:src.train:Episode 4: Cumulative reward: 14.696850150823593
INFO:src.train:Episode 4: Reward Differences: 4.4090549647808075
INFO:src.train:Episode 4: Average loss: 3.153602392558241e-07
INFO:src.train:Episode 4: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 5: Input words: ['apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 5: Target words: ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[1.9614e-08, 1.0000e+00],
        [1.9614e-08, 1.0000e+00],
        [1.9614e-08, 1.0000e+00],
        [1.9614e-08, 1.0000e+00],
        [1.9612e-08, 1.0000e+00],
        [1.9612e-08, 1.0000e+00],
        [1.9614e-08, 1.0000e+00],
        [1.9612e-08, 1.0000e+00],
        [1.9614e-08, 1.0000e+00],
        [1.9614e-08, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False  True False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00],
        [1.6874e-10, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False  True False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00],
        [8.2496e-11, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False  True False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00],
        [7.4556e-11, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False  True False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00],
        [7.3433e-11, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 5: Guess correctness - [False  True False False False  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 5: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 5: Reward Differences: 5.005659386515617
INFO:src.train:Episode 5: Average loss: -0.0
INFO:src.train:Episode 5: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 6: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 6: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 0 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 0, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00],
        [1.8933e-09, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False  True False  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[9.7988e-12, 1.0000e+00],
        [9.7988e-12, 1.0000e+00],
        [9.7989e-12, 1.0000e+00],
        [9.7988e-12, 1.0000e+00],
        [9.7988e-12, 1.0000e+00],
        [9.7989e-12, 1.0000e+00],
        [9.7989e-12, 1.0000e+00],
        [9.7988e-12, 1.0000e+00],
        [9.7988e-12, 1.0000e+00],
        [9.7989e-12, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False  True False  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00],
        [4.4655e-12, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False  True False  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00],
        [4.0089e-12, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False  True False  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00],
        [3.9494e-12, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 6: Guess correctness - [False False  True False  True  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 6: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 6: Reward Differences: 4.806791245937347
INFO:src.train:Episode 6: Average loss: -0.0
INFO:src.train:Episode 6: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 7: Input words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 7: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00],
        [2.6376e-10, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00],
        [8.6590e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00],
        [3.6903e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00],
        [3.2893e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00],
        [3.2394e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 7: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 7: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 7: Reward Differences: 5.005659386515617
INFO:src.train:Episode 7: Average loss: -0.0
INFO:src.train:Episode 7: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 8: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 8: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00],
        [4.8251e-11, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False  True  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00],
        [1.0469e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False  True  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00],
        [4.1921e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False  True  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00],
        [3.7096e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False  True  True False  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00],
        [3.6514e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 8: Guess correctness - [False False  True  True False  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 8: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 8: Reward Differences: 5.403395667672157
INFO:src.train:Episode 8: Average loss: -0.0
INFO:src.train:Episode 8: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 9: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 9: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00],
        [1.0926e-11, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True  True  True  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00],
        [1.6297e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True  True  True  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00],
        [6.1613e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True  True  True  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00],
        [5.4136e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True  True  True  True  True False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00],
        [5.3252e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 9: Guess correctness - [ True  True  True  True  True False False False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 9: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 9: Reward Differences: 5.403395667672157
INFO:src.train:Episode 9: Average loss: -0.0
INFO:src.train:Episode 9: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 10: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 10: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00],
        [2.9443e-12, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00],
        [3.1319e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00],
        [1.1232e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00],
        [9.8001e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00],
        [9.6329e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 10: Guess correctness - [False  True False  True False False  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 10: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 10: Reward Differences: 4.806791245937347
INFO:src.train:Episode 10: Average loss: -0.0
INFO:src.train:Episode 10: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 11: Input words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 11: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00],
        [9.1788e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False  True False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00],
        [7.2002e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False  True False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00],
        [2.4606e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False  True False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.1321e-16, 1.0000e+00],
        [2.1322e-16, 1.0000e+00],
        [2.1321e-16, 1.0000e+00],
        [2.1322e-16, 1.0000e+00],
        [2.1321e-16, 1.0000e+00],
        [2.1322e-16, 1.0000e+00],
        [2.1321e-16, 1.0000e+00],
        [2.1322e-16, 1.0000e+00],
        [2.1321e-16, 1.0000e+00],
        [2.1322e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False  True False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00],
        [2.0938e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 11: Guess correctness - [False False  True False  True  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 11: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 11: Reward Differences: 5.204527527093887
INFO:src.train:Episode 11: Average loss: -0.0
INFO:src.train:Episode 11: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 12: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 12: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00],
        [3.2408e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True False False  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00],
        [1.9322e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True False False  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00],
        [6.3183e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True False False  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00],
        [5.4387e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True False False  True  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00],
        [5.3350e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 12: Guess correctness - [ True False False  True  True False False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 12: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 12: Reward Differences: 5.005659386515617
INFO:src.train:Episode 12: Average loss: -0.0
INFO:src.train:Episode 12: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 13: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 13: Target words: ['apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00],
        [1.2745e-13, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False  True  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00],
        [5.9336e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False  True  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00],
        [1.8640e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False  True  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00],
        [1.5944e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False  True  True  True False  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00],
        [1.5621e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 13: Guess correctness - [False  True  True  True False  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 13: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 13: Reward Differences: 5.204527527093887
INFO:src.train:Episode 13: Average loss: -0.0
INFO:src.train:Episode 13: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 14: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 14: Target words: ['apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00],
        [5.5081e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00],
        [2.0515e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00],
        [6.2136e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00],
        [5.2836e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00],
        [5.1706e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 14: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 14: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 14: Reward Differences: 5.403395667672157
INFO:src.train:Episode 14: Average loss: -0.0
INFO:src.train:Episode 14: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 15: Input words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 15: Target words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00],
        [2.5871e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [ True False  True False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00],
        [7.8775e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [ True False  True False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00],
        [2.3082e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [ True False  True False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00],
        [1.9520e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [ True False  True False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00],
        [1.9081e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 15: Guess correctness - [ True False  True False False  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 15: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 15: Reward Differences: 5.204527527093887
INFO:src.train:Episode 15: Average loss: -0.0
INFO:src.train:Episode 15: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 16: Input words: ['orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 16: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00],
        [1.3083e-14, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00],
        [3.3206e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00],
        [9.4417e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00],
        [7.9445e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00],
        [7.7576e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 16: Guess correctness - [False  True False  True False  True  True  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 16: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 16: Reward Differences: 5.005659386515617
INFO:src.train:Episode 16: Average loss: -0.0
INFO:src.train:Episode 16: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 17: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 17: Target words: ['apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00],
        [7.0663e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00],
        [1.5214e-18, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00],
        [4.2097e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00],
        [3.5259e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00],
        [3.4397e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 17: Guess correctness - [False  True False  True  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 17: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 17: Reward Differences: 5.204527527093887
INFO:src.train:Episode 17: Average loss: -0.0
INFO:src.train:Episode 17: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 18: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 18: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00],
        [4.0487e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [False False False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00],
        [7.5109e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [False False False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00],
        [2.0278e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [False False False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00],
        [1.6913e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [False False False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00],
        [1.6485e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 18: Guess correctness - [False False False  True  True False False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 18: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 18: Reward Differences: 4.806791245937347
INFO:src.train:Episode 18: Average loss: -0.0
INFO:src.train:Episode 18: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 19: Input words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 19: Target words: ['apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00],
        [2.4460e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False  True  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00],
        [3.9656e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False  True  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00],
        [1.0471e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False  True  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00],
        [8.7004e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False  True  True  True  True False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00],
        [8.4733e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 19: Guess correctness - [False  True  True  True  True False  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 19: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 19: Reward Differences: 5.204527527093887
INFO:src.train:Episode 19: Average loss: -0.0
INFO:src.train:Episode 19: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 20: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 20: Target words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00],
        [1.5500e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True  True  True  True False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00],
        [2.2244e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True  True  True  True False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00],
        [5.7568e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True  True  True  True False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00],
        [4.7668e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True  True  True  True False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00],
        [4.6390e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 20: Guess correctness - [ True  True  True  True False  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 20: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 20: Reward Differences: 5.204527527093887
INFO:src.train:Episode 20: Average loss: -0.0
INFO:src.train:Episode 20: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 21: Input words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 21: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 1 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00],
        [1.0255e-15, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00],
        [1.3179e-19, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00],
        [3.3492e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00],
        [2.7647e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00],
        [2.6888e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 21: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 21: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 21: Reward Differences: 5.204527527093887
INFO:src.train:Episode 21: Average loss: -0.0
INFO:src.train:Episode 21: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 22: Input words: ['apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 22: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00],
        [7.0547e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True False  True False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00],
        [8.2034e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True False  True False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00],
        [2.0510e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True False  True False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00],
        [1.6883e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True False  True False  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00],
        [1.6410e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 22: Guess correctness - [ True  True False  True False  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 22: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 22: Reward Differences: 5.403395667672157
INFO:src.train:Episode 22: Average loss: -0.0
INFO:src.train:Episode 22: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 23: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 23: Target words: ['apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00],
        [5.0277e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00],
        [5.3404e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00],
        [1.3156e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00],
        [1.0803e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00],
        [1.0494e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 23: Guess correctness - [False  True  True  True  True False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 23: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 23: Reward Differences: 5.403395667672157
INFO:src.train:Episode 23: Average loss: -0.0
INFO:src.train:Episode 23: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 24: Input words: ['apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 24: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 1 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00],
        [3.6999e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True  True  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6208e-20, 1.0000e+00],
        [3.6209e-20, 1.0000e+00],
        [3.6208e-20, 1.0000e+00],
        [3.6209e-20, 1.0000e+00],
        [3.6208e-20, 1.0000e+00],
        [3.6209e-20, 1.0000e+00],
        [3.6208e-20, 1.0000e+00],
        [3.6209e-20, 1.0000e+00],
        [3.6208e-20, 1.0000e+00],
        [3.6209e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True  True  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00],
        [8.8015e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True  True  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00],
        [7.2110e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True  True  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00],
        [7.0020e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 24: Guess correctness - [ True  True  True  True  True  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 24: Cumulative reward: 19.33710666000843
INFO:src.train:Episode 24: Reward Differences: 5.801131948828697
INFO:src.train:Episode 24: Average loss: -0.0
INFO:src.train:Episode 24: Last Step Accuracy: 0.8999999761581421
DEBUG:src.train:Episode 25: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 25: Target words: ['apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00],
        [2.8032e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False  True False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00],
        [2.5473e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False  True False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00],
        [6.1178e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False  True False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00],
        [5.0022e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False  True False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00],
        [4.8552e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 25: Guess correctness - [False False  True False False False False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 25: Cumulative reward: 14.696850150823593
INFO:src.train:Episode 25: Reward Differences: 4.4090549647808075
INFO:src.train:Episode 25: Average loss: -0.0
INFO:src.train:Episode 25: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 26: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 26: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00],
        [2.1807e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00],
        [1.8531e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00],
        [4.4026e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00],
        [3.5934e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00],
        [3.4865e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 26: Guess correctness - [False False  True False  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 26: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 26: Reward Differences: 5.005659386515617
INFO:src.train:Episode 26: Average loss: -0.0
INFO:src.train:Episode 26: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 27: Input words: ['apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 27: Target words: ['orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00],
        [1.7378e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False False False  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00],
        [1.3899e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False False False  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00],
        [3.2700e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False False False  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00],
        [2.6647e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False False False  True False False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00],
        [2.5845e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 27: Guess correctness - [ True False False False  True False False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 27: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 27: Reward Differences: 4.806791245937347
INFO:src.train:Episode 27: Average loss: -0.0
INFO:src.train:Episode 27: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 28: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 28: Target words: ['apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00],
        [1.4156e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00],
        [1.0718e-20, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00],
        [2.4995e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00],
        [2.0340e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00],
        [1.9722e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 28: Guess correctness - [False  True False  True  True  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 28: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 28: Reward Differences: 5.005659386515617
INFO:src.train:Episode 28: Average loss: -0.0
INFO:src.train:Episode 28: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 29: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 29: Target words: ['orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00],
        [1.1763e-16, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True  True False False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00],
        [8.4772e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True  True False False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00],
        [1.9612e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True  True False False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00],
        [1.5939e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True  True False False False  True False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00],
        [1.5451e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 29: Guess correctness - [ True  True False False False  True False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 29: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 29: Reward Differences: 4.806791245937347
INFO:src.train:Episode 29: Average loss: -0.0
INFO:src.train:Episode 29: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 30: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 30: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00],
        [9.9541e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00],
        [6.8608e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00],
        [1.5760e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00],
        [1.2793e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00],
        [1.2399e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 30: Guess correctness - [False False  True  True  True  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 30: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 30: Reward Differences: 5.403395667672157
INFO:src.train:Episode 30: Average loss: -0.0
INFO:src.train:Episode 30: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 31: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 31: Target words: ['apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00],
        [8.5639e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00],
        [5.6703e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00],
        [1.2942e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00],
        [1.0495e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00],
        [1.0170e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 31: Guess correctness - [False  True  True False  True False False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 31: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 31: Reward Differences: 5.005659386515617
INFO:src.train:Episode 31: Average loss: -0.0
INFO:src.train:Episode 31: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 32: Input words: ['apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 32: Target words: ['orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00],
        [7.4800e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00],
        [4.7769e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00],
        [1.0840e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00],
        [8.7828e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00],
        [8.5090e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 32: Guess correctness - [ True  True  True  True  True False  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 32: Cumulative reward: 18.674212872982025
INFO:src.train:Episode 32: Reward Differences: 5.602263808250427
INFO:src.train:Episode 32: Average loss: -0.0
INFO:src.train:Episode 32: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 33: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 33: Target words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00],
        [6.6237e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [False  True  True False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00],
        [4.0950e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [False  True  True False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00],
        [9.2444e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [False  True  True False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00],
        [7.4841e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [False  True  True False  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00],
        [7.2498e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 33: Guess correctness - [False  True  True False  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 33: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 33: Reward Differences: 5.204527527093887
INFO:src.train:Episode 33: Average loss: -0.0
INFO:src.train:Episode 33: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 34: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 34: Target words: ['apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00],
        [5.9395e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True False False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5666e-21, 1.0000e+00],
        [3.5667e-21, 1.0000e+00],
        [3.5666e-21, 1.0000e+00],
        [3.5667e-21, 1.0000e+00],
        [3.5666e-21, 1.0000e+00],
        [3.5667e-21, 1.0000e+00],
        [3.5666e-21, 1.0000e+00],
        [3.5667e-21, 1.0000e+00],
        [3.5666e-21, 1.0000e+00],
        [3.5667e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True False False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00],
        [8.0144e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True False False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00],
        [6.4837e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True False False False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.2799e-22, 1.0000e+00],
        [6.2798e-22, 1.0000e+00],
        [6.2799e-22, 1.0000e+00],
        [6.2798e-22, 1.0000e+00],
        [6.2799e-22, 1.0000e+00],
        [6.2798e-22, 1.0000e+00],
        [6.2799e-22, 1.0000e+00],
        [6.2798e-22, 1.0000e+00],
        [6.2799e-22, 1.0000e+00],
        [6.2798e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 34: Guess correctness - [False  True False False False False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 34: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 34: Reward Differences: 4.806791245937347
INFO:src.train:Episode 34: Average loss: -0.0
INFO:src.train:Episode 34: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 35: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 35: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00],
        [5.3873e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00],
        [3.1518e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00],
        [7.0529e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00],
        [5.7022e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00],
        [5.5223e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 35: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 35: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 35: Reward Differences: 5.204527527093887
INFO:src.train:Episode 35: Average loss: -0.0
INFO:src.train:Episode 35: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 36: Input words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 36: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 0 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00],
        [4.9376e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [False False  True False  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00],
        [2.8222e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [False False  True False  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00],
        [6.2920e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [False False  True False  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00],
        [5.0842e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [False False  True False  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00],
        [4.9233e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 36: Guess correctness - [False False  True False  True  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 36: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 36: Reward Differences: 5.403395667672157
INFO:src.train:Episode 36: Average loss: -0.0
INFO:src.train:Episode 36: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 37: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 37: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00],
        [4.5686e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True False  True  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00],
        [2.5577e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True False  True  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00],
        [5.6835e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True False  True  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00],
        [4.5902e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True False  True  True False  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00],
        [4.4446e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 37: Guess correctness - [ True False  True  True False  True  True  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 37: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 37: Reward Differences: 5.204527527093887
INFO:src.train:Episode 37: Average loss: -0.0
INFO:src.train:Episode 37: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 38: Input words: ['orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 38: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 0 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 0, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00],
        [4.2640e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True False  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00],
        [2.3436e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True False  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00],
        [5.1924e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True False  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00],
        [4.1917e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True False  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00],
        [4.0584e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 38: Guess correctness - [ True False  True False  True False False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 38: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 38: Reward Differences: 4.806791245937347
INFO:src.train:Episode 38: Average loss: -0.0
INFO:src.train:Episode 38: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 39: Input words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 39: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00],
        [4.0113e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [ True False  True False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00],
        [2.1689e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [ True False  True False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00],
        [4.7931e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [ True False  True False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00],
        [3.8678e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [ True False  True False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00],
        [3.7446e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 39: Guess correctness - [ True False  True False  True  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 39: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 39: Reward Differences: 5.204527527093887
INFO:src.train:Episode 39: Average loss: -0.0
INFO:src.train:Episode 39: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 40: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 40: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00],
        [3.8008e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00],
        [2.0257e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00],
        [4.4663e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00],
        [3.6030e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00],
        [3.4879e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 40: Guess correctness - [ True  True False  True  True False False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 40: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 40: Reward Differences: 5.204527527093887
INFO:src.train:Episode 40: Average loss: -0.0
INFO:src.train:Episode 40: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 41: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 41: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00],
        [3.6251e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00],
        [1.9077e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00],
        [4.1977e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00],
        [3.3853e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00],
        [3.2770e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 41: Guess correctness - [False False False  True  True  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 41: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 41: Reward Differences: 4.806791245937347
INFO:src.train:Episode 41: Average loss: -0.0
INFO:src.train:Episode 41: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 42: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 42: Target words: ['apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00],
        [3.4783e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False  True  True False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00],
        [1.8103e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False  True  True False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00],
        [3.9763e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False  True  True False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00],
        [3.2059e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False  True  True False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00],
        [3.1032e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 42: Guess correctness - [False  True  True False False  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 42: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 42: Reward Differences: 5.005659386515617
INFO:src.train:Episode 42: Average loss: -0.0
INFO:src.train:Episode 42: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 43: Input words: ['apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 43: Target words: ['orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 1 1 0 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 1, 0, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.3556e-17, 1.0000e+00],
        [3.3557e-17, 1.0000e+00],
        [3.3556e-17, 1.0000e+00],
        [3.3557e-17, 1.0000e+00],
        [3.3556e-17, 1.0000e+00],
        [3.3557e-17, 1.0000e+00],
        [3.3556e-17, 1.0000e+00],
        [3.3557e-17, 1.0000e+00],
        [3.3556e-17, 1.0000e+00],
        [3.3557e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True False False  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00],
        [1.7297e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True False False  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00],
        [3.7935e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True False False  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00],
        [3.0578e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True False False  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00],
        [2.9598e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 43: Guess correctness - [ True False False  True False  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 43: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 43: Reward Differences: 5.005659386515617
INFO:src.train:Episode 43: Average loss: -0.0
INFO:src.train:Episode 43: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 44: Input words: ['orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 44: Target words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00],
        [3.2534e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False  True  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00],
        [1.6632e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False  True  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00],
        [3.6427e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False  True  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00],
        [2.9357e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False  True  True False  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00],
        [2.8415e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 44: Guess correctness - [False  True  True False  True  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 44: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 44: Reward Differences: 5.403395667672157
INFO:src.train:Episode 44: Average loss: -0.0
INFO:src.train:Episode 44: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 45: Input words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 45: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00],
        [3.1687e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [False False False  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00],
        [1.6084e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [False False False  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00],
        [3.5187e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [False False False  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00],
        [2.8352e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [False False False  True  True False  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00],
        [2.7442e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 45: Guess correctness - [False False False  True  True False  True False False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 45: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 45: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 45: Average loss: -0.0
INFO:src.train:Episode 45: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 46: Input words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 46: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 1 0 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00],
        [3.0988e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00],
        [1.5635e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00],
        [3.4172e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00],
        [2.7531e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00],
        [2.6646e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 46: Guess correctness - [False False False  True  True False False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 46: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 46: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 46: Average loss: -0.0
INFO:src.train:Episode 46: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 47: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 47: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00],
        [3.0419e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00],
        [1.5271e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00],
        [3.3350e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00],
        [2.6865e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00],
        [2.6002e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 47: Guess correctness - [False False False False False  True  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 47: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 47: Reward Differences: 4.806791245937347
INFO:src.train:Episode 47: Average loss: -0.0
INFO:src.train:Episode 47: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 48: Input words: ['apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 48: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00],
        [2.9963e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True False False  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00],
        [1.4980e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True False False  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00],
        [3.2694e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True False False  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00],
        [2.6334e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True False False  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00],
        [2.5487e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 48: Guess correctness - [False  True False False  True  True False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 48: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 48: Reward Differences: 5.005659386515617
INFO:src.train:Episode 48: Average loss: -0.0
INFO:src.train:Episode 48: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 49: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 49: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00],
        [2.9605e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [False False False False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00],
        [1.4753e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [False False False False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00],
        [3.2181e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [False False False False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00],
        [2.5919e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [False False False False False  True  True False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00],
        [2.5085e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 49: Guess correctness - [False False False False False  True  True False False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 49: Cumulative reward: 14.696850150823593
INFO:src.train:Episode 49: Reward Differences: 4.4090549647808075
INFO:src.train:Episode 49: Average loss: -0.0
INFO:src.train:Episode 49: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 50: Input words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 50: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 0 0 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 0, 0, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00],
        [2.9335e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00],
        [1.4582e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00],
        [3.1793e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00],
        [2.5605e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00],
        [2.4781e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 50: Guess correctness - [ True False False  True  True  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 50: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 50: Reward Differences: 5.005659386515617
INFO:src.train:Episode 50: Average loss: -0.0
INFO:src.train:Episode 50: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 51: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 51: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00],
        [2.9142e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True False  True  True False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00],
        [1.4459e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True False  True  True False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00],
        [3.1516e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True False  True  True False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00],
        [2.5381e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True False  True  True False False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00],
        [2.4564e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 51: Guess correctness - [ True False  True  True False False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 51: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 51: Reward Differences: 5.204527527093887
INFO:src.train:Episode 51: Average loss: -0.0
INFO:src.train:Episode 51: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 52: Input words: ['orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 52: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00],
        [2.9018e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00],
        [1.4380e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00],
        [3.1338e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00],
        [2.5236e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00],
        [2.4424e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 52: Guess correctness - [False  True False False  True  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 52: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 52: Reward Differences: 5.204527527093887
INFO:src.train:Episode 52: Average loss: -0.0
INFO:src.train:Episode 52: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 53: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 53: Target words: ['apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00],
        [2.8956e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [False False  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00],
        [1.4340e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [False False  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00],
        [3.1247e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [False False  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00],
        [2.5163e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [False False  True False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00],
        [2.4353e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 53: Guess correctness - [False False  True False False False  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 53: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 53: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 53: Average loss: -0.0
INFO:src.train:Episode 53: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 54: Input words: ['orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 54: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00],
        [2.8951e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False  True  True  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00],
        [1.4336e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False  True  True  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00],
        [3.1236e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False  True  True  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00],
        [2.5154e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False  True  True  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00],
        [2.4344e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 54: Guess correctness - [False False  True  True  True  True  True  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 54: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 54: Reward Differences: 5.204527527093887
INFO:src.train:Episode 54: Average loss: -0.0
INFO:src.train:Episode 54: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 55: Input words: ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 55: Target words: ['orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00],
        [2.8996e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True False False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00],
        [1.4363e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True False False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00],
        [3.1297e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True False False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00],
        [2.5203e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True False False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00],
        [2.4391e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 55: Guess correctness - [ True  True  True False False  True False False False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 55: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 55: Reward Differences: 4.806791245937347
INFO:src.train:Episode 55: Average loss: -0.0
INFO:src.train:Episode 55: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 56: Input words: ['apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 56: Target words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 0 0 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 0, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00],
        [2.9089e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00],
        [1.4420e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00],
        [3.1423e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00],
        [2.5305e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True False  True False False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00],
        [2.4490e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 56: Guess correctness - [False False  True False  True False False False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 56: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 56: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 56: Average loss: -0.0
INFO:src.train:Episode 56: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 57: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 57: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00],
        [2.9224e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False False False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00],
        [1.4503e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False False False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00],
        [3.1611e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False False False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00],
        [2.5456e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False False False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00],
        [2.4637e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 57: Guess correctness - [ True False False False False  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 57: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 57: Reward Differences: 4.806791245937347
INFO:src.train:Episode 57: Average loss: -0.0
INFO:src.train:Episode 57: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 58: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 58: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00],
        [2.9398e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00],
        [1.4612e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00],
        [3.1854e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00],
        [2.5653e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00],
        [2.4827e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 58: Guess correctness - [False False False False False False  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 58: Cumulative reward: 14.696850150823593
INFO:src.train:Episode 58: Reward Differences: 4.4090549647808075
INFO:src.train:Episode 58: Average loss: -0.0
INFO:src.train:Episode 58: Last Step Accuracy: 0.20000000298023224
DEBUG:src.train:Episode 59: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 59: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00],
        [2.9609e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00],
        [1.4744e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00],
        [3.2150e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00],
        [2.5892e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00],
        [2.5059e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 59: Guess correctness - [False False False False False  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 59: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 59: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 59: Average loss: -0.0
INFO:src.train:Episode 59: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 60: Input words: ['orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 60: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00],
        [2.9855e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00],
        [1.4897e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00],
        [3.2495e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00],
        [2.6171e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False  True  True  True  True False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00],
        [2.5329e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 60: Guess correctness - [False False  True  True  True  True False False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 60: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 60: Reward Differences: 5.204527527093887
INFO:src.train:Episode 60: Average loss: -0.0
INFO:src.train:Episode 60: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 61: Input words: ['apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 61: Target words: ['apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 1 1 1 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 1, 1, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00],
        [3.0132e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [False  True False False False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00],
        [1.5071e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [False  True False False False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00],
        [3.2886e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [False  True False False False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00],
        [2.6487e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [False  True False False False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00],
        [2.5635e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 61: Guess correctness - [False  True False False False False  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 61: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 61: Reward Differences: 5.005659386515617
INFO:src.train:Episode 61: Average loss: -0.0
INFO:src.train:Episode 61: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 62: Input words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 62: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00],
        [3.0439e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [ True  True False  True  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00],
        [1.5265e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [ True  True False  True  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00],
        [3.3321e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [ True  True False  True  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00],
        [2.6839e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [ True  True False  True  True  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00],
        [2.5976e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 62: Guess correctness - [ True  True False  True  True  True False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 62: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 62: Reward Differences: 5.403395667672157
INFO:src.train:Episode 62: Average loss: -0.0
INFO:src.train:Episode 62: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 63: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 63: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 1 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 1, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00],
        [3.0774e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [False  True False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00],
        [1.5476e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [False  True False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00],
        [3.3798e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [False  True False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00],
        [2.7225e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [False  True False  True False  True  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00],
        [2.6349e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 63: Guess correctness - [False  True False  True False  True  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 63: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 63: Reward Differences: 5.204527527093887
INFO:src.train:Episode 63: Average loss: -0.0
INFO:src.train:Episode 63: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 64: Input words: ['orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 64: Target words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00],
        [3.1137e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True  True False False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00],
        [1.5706e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True  True False False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00],
        [3.4315e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True  True False False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00],
        [2.7643e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True  True False False False False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00],
        [2.6754e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 64: Guess correctness - [ True  True False False False False  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 64: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 64: Reward Differences: 5.005659386515617
INFO:src.train:Episode 64: Average loss: -0.0
INFO:src.train:Episode 64: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 65: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 65: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00],
        [3.1524e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00],
        [1.5953e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00],
        [3.4870e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00],
        [2.8092e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True False  True  True  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00],
        [2.7190e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 65: Guess correctness - [ True  True False  True  True  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 65: Cumulative reward: 18.674212872982025
INFO:src.train:Episode 65: Reward Differences: 5.602263808250427
INFO:src.train:Episode 65: Average loss: -0.0
INFO:src.train:Episode 65: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 66: Input words: ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 66: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 1 0 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 1, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00],
        [3.1936e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00],
        [1.6215e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00],
        [3.5463e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00],
        [2.8572e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False  True  True  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00],
        [2.7654e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 66: Guess correctness - [ True False  True False  True  True  True  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 66: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 66: Reward Differences: 5.204527527093887
INFO:src.train:Episode 66: Average loss: -0.0
INFO:src.train:Episode 66: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 67: Input words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 67: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00],
        [3.2371e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True False False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00],
        [1.6494e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True False False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00],
        [3.6092e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True False False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00],
        [2.9081e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True False False  True  True False  True False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00],
        [2.8147e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 67: Guess correctness - [ True False False  True  True False  True False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 67: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 67: Reward Differences: 5.204527527093887
INFO:src.train:Episode 67: Average loss: -0.0
INFO:src.train:Episode 67: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 68: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 68: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00],
        [3.2829e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [ True  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00],
        [1.6788e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [ True  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00],
        [3.6756e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [ True  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00],
        [2.9618e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [ True  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00],
        [2.8667e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 68: Guess correctness - [ True  True False  True  True False False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 68: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 68: Reward Differences: 5.005659386515617
INFO:src.train:Episode 68: Average loss: -0.0
INFO:src.train:Episode 68: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 69: Input words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 69: Target words: ['apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 0 0 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 0, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00],
        [3.3308e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [False  True  True  True  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00],
        [1.7098e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [False  True  True  True  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00],
        [3.7455e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [False  True  True  True  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00],
        [3.0183e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [False  True  True  True  True  True  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9214e-22, 1.0000e+00],
        [2.9215e-22, 1.0000e+00],
        [2.9214e-22, 1.0000e+00],
        [2.9215e-22, 1.0000e+00],
        [2.9214e-22, 1.0000e+00],
        [2.9215e-22, 1.0000e+00],
        [2.9214e-22, 1.0000e+00],
        [2.9215e-22, 1.0000e+00],
        [2.9214e-22, 1.0000e+00],
        [2.9215e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 69: Guess correctness - [False  True  True  True  True  True  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 69: Cumulative reward: 19.33710666000843
INFO:src.train:Episode 69: Reward Differences: 5.801131948828697
INFO:src.train:Episode 69: Average loss: -0.0
INFO:src.train:Episode 69: Last Step Accuracy: 0.8999999761581421
DEBUG:src.train:Episode 70: Input words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 70: Target words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00],
        [3.3808e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00],
        [1.7422e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00],
        [3.8187e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00],
        [3.0776e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True  True False False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00],
        [2.9789e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 70: Guess correctness - [False False  True  True False False  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 70: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 70: Reward Differences: 4.806791245937347
INFO:src.train:Episode 70: Average loss: -0.0
INFO:src.train:Episode 70: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 71: Input words: ['apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 71: Target words: ['apple', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 0 1 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 1, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00],
        [3.4328e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [False False False  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00],
        [1.7760e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [False False False  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00],
        [3.8953e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [False False False  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00],
        [3.1396e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [False False False  True False False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00],
        [3.0389e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 71: Guess correctness - [False False False  True False False  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 71: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 71: Reward Differences: 5.005659386515617
INFO:src.train:Episode 71: Average loss: -0.0
INFO:src.train:Episode 71: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 72: Input words: ['orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 72: Target words: ['orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 0 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 0, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00],
        [3.4868e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True False False  True False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00],
        [1.8113e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True False False  True False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00],
        [3.9751e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True False False  True False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00],
        [3.2042e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True False False  True False  True False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00],
        [3.1015e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 72: Guess correctness - [ True False False  True False  True False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 72: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 72: Reward Differences: 5.005659386515617
INFO:src.train:Episode 72: Average loss: -0.0
INFO:src.train:Episode 72: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 73: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 73: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00],
        [3.5427e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [ True False  True False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00],
        [1.8480e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [ True False  True False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00],
        [4.0582e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [ True False  True False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00],
        [3.2715e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [ True False  True False  True False  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00],
        [3.1666e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 73: Guess correctness - [ True False  True False  True False  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 73: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 73: Reward Differences: 5.204527527093887
INFO:src.train:Episode 73: Average loss: -0.0
INFO:src.train:Episode 73: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 74: Input words: ['orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 74: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 1 1 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 1, 1, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00],
        [3.6006e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00],
        [1.8861e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.1446e-22, 1.0000e+00],
        [4.1445e-22, 1.0000e+00],
        [4.1446e-22, 1.0000e+00],
        [4.1445e-22, 1.0000e+00],
        [4.1446e-22, 1.0000e+00],
        [4.1445e-22, 1.0000e+00],
        [4.1446e-22, 1.0000e+00],
        [4.1445e-22, 1.0000e+00],
        [4.1446e-22, 1.0000e+00],
        [4.1445e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00],
        [3.3414e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00],
        [3.2343e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 74: Guess correctness - [False False False False False  True  True  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 74: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 74: Reward Differences: 4.806791245937347
INFO:src.train:Episode 74: Average loss: -0.0
INFO:src.train:Episode 74: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 75: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 75: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00],
        [3.6602e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00],
        [1.9256e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00],
        [4.2341e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00],
        [3.4139e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00],
        [3.3045e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 75: Guess correctness - [ True False False  True  True False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 75: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 75: Reward Differences: 5.204527527093887
INFO:src.train:Episode 75: Average loss: -0.0
INFO:src.train:Episode 75: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 76: Input words: ['orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 76: Target words: ['orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 0 0 1 1 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 1, 1, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[3.7218e-17, 1.0000e+00],
        [3.7217e-17, 1.0000e+00],
        [3.7218e-17, 1.0000e+00],
        [3.7217e-17, 1.0000e+00],
        [3.7218e-17, 1.0000e+00],
        [3.7217e-17, 1.0000e+00],
        [3.7218e-17, 1.0000e+00],
        [3.7217e-17, 1.0000e+00],
        [3.7218e-17, 1.0000e+00],
        [3.7217e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [ True  True False  True  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00],
        [1.9665e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [ True  True False  True  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00],
        [4.3269e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [ True  True False  True  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00],
        [3.4890e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [ True  True False  True  True False  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00],
        [3.3773e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 76: Guess correctness - [ True  True False  True  True False  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 76: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 76: Reward Differences: 5.204527527093887
INFO:src.train:Episode 76: Average loss: -0.0
INFO:src.train:Episode 76: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 77: Input words: ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 77: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 0 0 1 0 1 1 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 0, 0, 1, 0, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00],
        [3.7851e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [False False False  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00],
        [2.0088e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [False False False  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00],
        [4.4228e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [False False False  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00],
        [3.5667e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [False False False  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00],
        [3.4526e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 77: Guess correctness - [False False False  True  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 77: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 77: Reward Differences: 5.005659386515617
INFO:src.train:Episode 77: Average loss: -0.0
INFO:src.train:Episode 77: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 78: Input words: ['orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 78: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 0 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00],
        [3.8502e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00],
        [2.0524e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00],
        [4.5220e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00],
        [3.6470e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00],
        [3.5303e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 78: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 78: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 78: Reward Differences: 5.204527527093887
INFO:src.train:Episode 78: Average loss: -0.0
INFO:src.train:Episode 78: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 79: Input words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 79: Target words: ['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 0 0 0 0 1 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 0, 0, 0, 1, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00],
        [3.9170e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [False False False False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00],
        [2.0975e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [False False False False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00],
        [4.6244e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [False False False False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00],
        [3.7300e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [False False False False False False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00],
        [3.6107e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 79: Guess correctness - [False False False False False False False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 79: Cumulative reward: 14.033956363797188
INFO:src.train:Episode 79: Reward Differences: 4.2101868242025375
INFO:src.train:Episode 79: Average loss: -0.0
INFO:src.train:Episode 79: Last Step Accuracy: 0.10000000149011612
DEBUG:src.train:Episode 80: Input words: ['orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 80: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 0 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 0, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00],
        [3.9856e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [False False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00],
        [2.1439e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [False False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00],
        [4.7301e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [False False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00],
        [3.8156e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [False False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00],
        [3.6936e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 80: Guess correctness - [False False  True  True  True  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 80: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 80: Reward Differences: 5.403395667672157
INFO:src.train:Episode 80: Average loss: -0.0
INFO:src.train:Episode 80: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 81: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 81: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00],
        [4.0560e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00],
        [2.1917e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00],
        [4.8390e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00],
        [3.9038e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False  True  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00],
        [3.7790e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 81: Guess correctness - [False False  True  True  True False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 81: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 81: Reward Differences: 5.204527527093887
INFO:src.train:Episode 81: Average loss: -0.0
INFO:src.train:Episode 81: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 82: Input words: ['apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 82: Target words: ['apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 0 0 0 0 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 0, 0, 0, 0, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00],
        [4.1281e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [False  True  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00],
        [2.2410e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [False  True  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00],
        [4.9512e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [False  True  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00],
        [3.9947e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [False  True  True False  True  True False False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00],
        [3.8671e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 82: Guess correctness - [False  True  True False  True  True False False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 82: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 82: Reward Differences: 5.005659386515617
INFO:src.train:Episode 82: Average loss: -0.0
INFO:src.train:Episode 82: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 83: Input words: ['orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 83: Target words: ['apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 0 0 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 0, 0, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00],
        [4.2020e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00],
        [2.2917e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00],
        [5.0667e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00],
        [4.0883e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00],
        [3.9578e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 83: Guess correctness - [False False  True  True  True  True False  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 83: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 83: Reward Differences: 5.204527527093887
INFO:src.train:Episode 83: Average loss: -0.0
INFO:src.train:Episode 83: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 84: Input words: ['apple', 'apple', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 84: Target words: ['apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00],
        [4.2775e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00],
        [2.3438e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00],
        [5.1856e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.1847e-22, 1.0000e+00],
        [4.1846e-22, 1.0000e+00],
        [4.1847e-22, 1.0000e+00],
        [4.1846e-22, 1.0000e+00],
        [4.1847e-22, 1.0000e+00],
        [4.1846e-22, 1.0000e+00],
        [4.1847e-22, 1.0000e+00],
        [4.1846e-22, 1.0000e+00],
        [4.1847e-22, 1.0000e+00],
        [4.1846e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False  True False  True  True False False False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00],
        [4.0511e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 84: Guess correctness - [False  True False  True  True False False False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 84: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 84: Reward Differences: 4.806791245937347
INFO:src.train:Episode 84: Average loss: -0.0
INFO:src.train:Episode 84: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 85: Input words: ['apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 85: Target words: ['orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00],
        [4.3549e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True  True  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00],
        [2.3973e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True  True  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00],
        [5.3078e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True  True  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00],
        [4.2837e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True  True  True False False  True  True  True  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00],
        [4.1471e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 85: Guess correctness - [ True  True  True False False  True  True  True  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 85: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 85: Reward Differences: 5.403395667672157
INFO:src.train:Episode 85: Average loss: -0.0
INFO:src.train:Episode 85: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 86: Input words: ['apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 86: Target words: ['apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 1 1 0 0 0 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 1, 1, 1, 0, 0, 0, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00],
        [4.4340e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [False False  True False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.4523e-21, 1.0000e+00],
        [2.4524e-21, 1.0000e+00],
        [2.4523e-21, 1.0000e+00],
        [2.4524e-21, 1.0000e+00],
        [2.4523e-21, 1.0000e+00],
        [2.4524e-21, 1.0000e+00],
        [2.4523e-21, 1.0000e+00],
        [2.4524e-21, 1.0000e+00],
        [2.4523e-21, 1.0000e+00],
        [2.4524e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [False False  True False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00],
        [5.4336e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [False False  True False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00],
        [4.3856e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [False False  True False False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00],
        [4.2458e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 86: Guess correctness - [False False  True False False  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 86: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 86: Reward Differences: 4.806791245937347
INFO:src.train:Episode 86: Average loss: -0.0
INFO:src.train:Episode 86: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 87: Input words: ['orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 87: Target words: ['orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 0 0 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00],
        [4.5148e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False  True  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00],
        [2.5089e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False  True  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00],
        [5.5628e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False  True  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00],
        [4.4904e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False  True  True  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00],
        [4.3473e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 87: Guess correctness - [ True False  True  True  True False  True  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 87: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 87: Reward Differences: 5.204527527093887
INFO:src.train:Episode 87: Average loss: -0.0
INFO:src.train:Episode 87: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 88: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 88: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00],
        [4.5974e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False False False False False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00],
        [2.5669e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False False False False False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00],
        [5.6956e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False False False False False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00],
        [4.5980e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False False False False False False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00],
        [4.4515e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 88: Guess correctness - [ True False False False False False False False False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 88: Cumulative reward: 14.033956363797188
INFO:src.train:Episode 88: Reward Differences: 4.2101868242025375
INFO:src.train:Episode 88: Average loss: -0.0
INFO:src.train:Episode 88: Last Step Accuracy: 0.10000000149011612
DEBUG:src.train:Episode 89: Input words: ['orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 89: Target words: ['orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 1 0 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 1, 0, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00],
        [4.6817e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00],
        [2.6264e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00],
        [5.8319e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00],
        [4.7086e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False  True  True  True  True False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00],
        [4.5586e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 89: Guess correctness - [ True False  True  True  True  True False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 89: Cumulative reward: 18.674212872982025
INFO:src.train:Episode 89: Reward Differences: 5.602263808250427
INFO:src.train:Episode 89: Average loss: -0.0
INFO:src.train:Episode 89: Last Step Accuracy: 0.800000011920929
DEBUG:src.train:Episode 90: Input words: ['apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 90: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 0 0 1 0 1 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 0, 0, 1, 0, 1, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00],
        [4.7679e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00],
        [2.6875e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.1337, 0.2000,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00],
        [5.9719e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.2674, 0.4000,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00],
        [4.8221e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.4011, 0.6000,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False  True  True  True False  True False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00],
        [4.6686e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.5348, 0.8000,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 90: Guess correctness - [False  True False False  True  True  True False  True False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 90: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 90: Reward Differences: 5.005659386515617
INFO:src.train:Episode 90: Average loss: -0.0
INFO:src.train:Episode 90: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 91: Input words: ['apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 91: Target words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 0 1 1 0 0 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 1, 0, 0, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00],
        [4.8558e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [False  True False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00],
        [2.7502e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [False  True False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00],
        [6.1156e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [False  True False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00],
        [4.9386e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [False  True False  True False  True False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00],
        [4.7815e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 91: Guess correctness - [False  True False  True False  True False  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 91: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 91: Reward Differences: 4.806791245937347
INFO:src.train:Episode 91: Average loss: -0.0
INFO:src.train:Episode 91: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 92: Input words: ['apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Episode 92: Target words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 1 0 1 0 1 0 0 1 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 0, 1, 0, 0, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00],
        [4.9456e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True False  True False  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00],
        [2.8145e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True False  True False  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00],
        [6.2631e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True False  True False  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00],
        [5.0583e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True False  True False  True False  True  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00],
        [4.8974e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 92: Guess correctness - [ True False  True False  True False  True  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 92: Cumulative reward: 18.01131908595562
INFO:src.train:Episode 92: Reward Differences: 5.403395667672157
INFO:src.train:Episode 92: Average loss: -0.0
INFO:src.train:Episode 92: Last Step Accuracy: 0.699999988079071
DEBUG:src.train:Episode 93: Input words: ['orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'orange']
DEBUG:src.train:Episode 93: Target words: ['orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 0 1 0 1 0 0 0 1]
DEBUG:src.train:Input Tensor: tensor([1, 0, 0, 1, 0, 1, 0, 0, 0, 1])
DEBUG:src.train:Action Probs: tensor([[5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00],
        [5.0372e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [ True False False  True False False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00],
        [2.8804e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [ True False False  True False False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00],
        [6.4145e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [ True False False  True False False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00],
        [5.1810e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [ True False False  True False False False False  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00],
        [5.0163e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 93: Guess correctness - [ True False False  True False False False False  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 93: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 93: Reward Differences: 4.806791245937347
INFO:src.train:Episode 93: Average loss: -0.0
INFO:src.train:Episode 93: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 94: Input words: ['apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'apple']
DEBUG:src.train:Episode 94: Target words: ['apple', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'orange']
DEBUG:src.train:Input Word Indices: [0 0 1 0 1 1 1 0 0 0]
DEBUG:src.train:Input Tensor: tensor([0, 0, 1, 0, 1, 1, 1, 0, 0, 0])
DEBUG:src.train:Action Probs: tensor([[5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00],
        [5.1307e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00],
        [2.9479e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.1337, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337, 0.2000, 0.2000,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00],
        [6.5697e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.2674, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674, 0.4000, 0.4000,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00],
        [5.3070e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.4011, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011, 0.6000, 0.6000,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False False False  True  True False False  True  True  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00],
        [5.1383e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.5348, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348, 0.8000, 0.8000,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 94: Guess correctness - [False False False  True  True False False  True  True  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 94: Cumulative reward: 16.68553151190281
INFO:src.train:Episode 94: Reward Differences: 5.005659386515617
INFO:src.train:Episode 94: Average loss: -0.0
INFO:src.train:Episode 94: Last Step Accuracy: 0.5
DEBUG:src.train:Episode 95: Input words: ['apple', 'orange', 'apple', 'orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Episode 95: Target words: ['orange', 'orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'apple', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [0 1 0 1 1 1 0 1 0 1]
DEBUG:src.train:Input Tensor: tensor([0, 1, 0, 1, 1, 1, 0, 1, 0, 1])
DEBUG:src.train:Action Probs: tensor([[5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00],
        [5.2260e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [ True  True False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00],
        [3.0172e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.2000, 0.1337, 0.2000, 0.1337, 0.2000, 0.1337, 0.1337, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [ True  True False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00],
        [6.7290e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.4000, 0.2674, 0.4000, 0.2674, 0.4000, 0.2674, 0.2674, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [ True  True False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00],
        [5.4362e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.6000, 0.4011, 0.6000, 0.4011, 0.6000, 0.4011, 0.4011, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [ True  True False  True False  True False False False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00],
        [5.2635e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.8000, 0.5348, 0.8000, 0.5348, 0.8000, 0.5348, 0.5348, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 95: Guess correctness - [ True  True False  True False  True False False False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 95: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 95: Reward Differences: 4.806791245937347
INFO:src.train:Episode 95: Average loss: -0.0
INFO:src.train:Episode 95: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 96: Input words: ['orange', 'orange', 'orange', 'apple', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple']
DEBUG:src.train:Episode 96: Target words: ['orange', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 0 1 1 1 1 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 0])
DEBUG:src.train:Action Probs: tensor([[5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00],
        [5.3232e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [ True False False False False False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00],
        [3.0881e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.1337, 0.2000, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [ True False False False False False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00],
        [6.8923e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.2674, 0.4000, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [ True False False False False False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00],
        [5.5687e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.4011, 0.6000, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [ True False False False False False False  True False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00],
        [5.3919e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.5348, 0.8000, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 96: Guess correctness - [ True False False False False False False  True False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 96: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 96: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 96: Average loss: -0.0
INFO:src.train:Episode 96: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 97: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange', 'apple']
DEBUG:src.train:Episode 97: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 0 0 1 0]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 0, 0, 1, 0])
DEBUG:src.train:Action Probs: tensor([[5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00],
        [5.4224e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [False  True False False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00],
        [3.1609e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [False  True False False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00],
        [7.0599e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [False  True False False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00],
        [5.7046e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [False  True False False  True False False  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00],
        [5.5236e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 97: Guess correctness - [False  True False False  True False False  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 97: Cumulative reward: 15.359743937849998
INFO:src.train:Episode 97: Reward Differences: 4.6079231053590775
INFO:src.train:Episode 97: Average loss: -0.0
INFO:src.train:Episode 97: Last Step Accuracy: 0.30000001192092896
DEBUG:src.train:Episode 98: Input words: ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']
DEBUG:src.train:Episode 98: Target words: ['orange', 'apple', 'apple', 'orange', 'orange', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00],
        [5.5234e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [ True False False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00],
        [3.2354e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.1337, 0.2000, 0.2000, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [ True False False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00],
        [7.2316e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.2674, 0.4000, 0.4000, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [ True False False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00],
        [5.8440e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.4011, 0.6000, 0.6000, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [ True False False  True  True  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00],
        [5.6586e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.5348, 0.8000, 0.8000, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 98: Guess correctness - [ True False False  True  True  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 98: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 98: Reward Differences: 5.204527527093887
INFO:src.train:Episode 98: Average loss: -0.0
INFO:src.train:Episode 98: Last Step Accuracy: 0.6000000238418579
DEBUG:src.train:Episode 99: Input words: ['orange', 'apple', 'orange', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 99: Target words: ['apple', 'orange', 'apple', 'apple', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Input Word Indices: [1 0 1 0 1 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 0, 1, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00],
        [5.6265e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [False  True False False  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00],
        [3.3117e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.1337, 0.2000, 0.1337, 0.1337, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337,
        0.1337])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [False  True False False  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00],
        [7.4076e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2674, 0.4000, 0.2674, 0.2674, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674,
        0.2674])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [False  True False False  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00],
        [5.9869e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4011, 0.6000, 0.4011, 0.4011, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011,
        0.4011])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [False  True False False  True False  True  True False False]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00],
        [5.7970e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.5348, 0.8000, 0.5348, 0.5348, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348,
        0.5348])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 99: Guess correctness - [False  True False False  True False  True  True False False]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 99: Cumulative reward: 16.022637724876404
INFO:src.train:Episode 99: Reward Differences: 4.806791245937347
INFO:src.train:Episode 99: Average loss: -0.0
INFO:src.train:Episode 99: Last Step Accuracy: 0.4000000059604645
DEBUG:src.train:Episode 100: Input words: ['orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple']
DEBUG:src.train:Episode 100: Target words: ['orange', 'apple', 'orange', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple', 'orange']
DEBUG:src.train:Input Word Indices: [1 0 1 1 0 0 1 1 0 0]
DEBUG:src.train:Input Tensor: tensor([1, 0, 1, 1, 0, 0, 1, 1, 0, 0])
DEBUG:src.train:Action Probs: tensor([[5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00],
        [5.7316e-17, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True False  True  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00],
        [3.3899e-21, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.2000, 0.2000, 0.1337, 0.1337,
        0.2000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True False  True  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00],
        [7.5881e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.4000, 0.4000, 0.2674, 0.2674,
        0.4000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True False  True  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00],
        [6.1333e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.6000, 0.6000, 0.4011, 0.4011,
        0.6000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True False  True  True False  True  True False False  True]
DEBUG:src.train:Input Word Indices: [1 1 1 1 1 1 1 1 1 1]
DEBUG:src.train:Input Tensor: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action Probs: tensor([[5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00],
        [5.9390e-22, 1.0000e+00]], grad_fn=<SqueezeBackward0>)
DEBUG:src.train:Action indices: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DEBUG:src.train:Action words: ['orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange' 'orange'
 'orange' 'orange']
DEBUG:src.train:Rewards: tensor([0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.8000, 0.8000, 0.5348, 0.5348,
        0.8000])
DEBUG:src.train:Log Probabilities: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], grad_fn=<LogBackward0>)
DEBUG:src.train:Episode 100: Guess correctness - [ True False  True  True False  True  True False False  True]
DEBUG:src.train:Log Probs: tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<CatBackward0>)
INFO:src.train:Episode 100: Cumulative reward: 17.348425298929214
INFO:src.train:Episode 100: Reward Differences: 5.204527527093887
INFO:src.train:Episode 100: Average loss: -0.0
INFO:src.train:Episode 100: Last Step Accuracy: 0.6000000238418579
INFO:src.train:Training complete
INFO:src.train:Episode losses: [array(3.3690145, dtype=float32), array(0.49624714, dtype=float32), array(1.9333926e-05, dtype=float32), array(3.1536024e-07, dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32), array(-0., dtype=float32)]
DEBUG:matplotlib.pyplot:Loaded backend tkagg version 8.6.
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosbi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romai___.ttf', name='Romantic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AmiriQuran.ttf', name='Amiri Quran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissc.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RB_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-MediumItalic.otf', name='David CLM', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV25.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AIGDT___.TTF', name='AIGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisski.ttf', name='Swis721 Blk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgreks.ttf', name='SWGreks', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Regular.ttf', name='Alef', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Regular.otf', name='Miriam Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cityb___.ttf', name='CityBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnd.ttf', name='SWRomnd', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMGDT___.ttf', name='AMGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV25.ttf', name='AMGDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\panroman.ttf', name='PanRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Medium.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Italic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutcheb.ttf', name='Dutch801 XBd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\umath.ttf', name='UniversalMath1 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV50.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Italic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobesongstd-light.otf', name='Adobe Song Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Italic.ttf', name='Rubik', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Bold.ttf', name='Caladea', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc__.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\technic_.ttf', name='Technic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Bold.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromns.ttf', name='SWRomns', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Bold.ttf', name='Carlito', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot2.ttf', name='SWIsot2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hyswlongfangsong.ttf', name='HYSWLongFangSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\stylu.ttf', name='Stylus BT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisse.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common.ttf', name='GOST Common', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_R_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbo.ttf', name='Swis721 BdCnOul BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmono.ttf', name='SWMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romantic.ttf', name='Romantic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Regular.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Regular.ttf', name='Rubik', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Italic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV50.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_R_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV25.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Bold.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Regular.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV50.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalt.ttf', name='SWItalt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-light.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romab___.ttf', name='Romantic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Lt.ttf', name='HP Simplified', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Condensed.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MinionPro-Regular.otf', name='Minion Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothe.ttf', name='SWGothe', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot1.ttf', name='SWIsot1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Regular.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MyriadPro-Regular.otf', name='Myriad Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd.otf', name='Courier Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Bold.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Bold.ttf', name='Amiri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Regular.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurro___.ttf', name='EuroRoman', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Book.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-regular.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-LightItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasB.ttf', name='Gentium Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnt.ttf', name='SWRomnt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\shellnormal.ttf', name='Shell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissel.ttf', name='Swis721 LtEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techb___.ttf', name='TechnicBold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy1.ttf', name='Proxy 1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RBI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Bold.ttf', name='David Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_DR_G.ttf', name='Linux Libertine Display G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Regular.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans__.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Italic.otf', name='Adobe Thai', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot3.ttf', name='SWIsot3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Regular.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV50.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV50.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-BoldItalic.ttf', name='Carlito', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutch.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothl.ttf', name='BankGothic Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Regular.ttf', name='David Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_____.ttf', name='GDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissck.ttf', name='Swis721 BlkCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop2.ttf', name='SWIsop2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Regular.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmusic.ttf', name='SWMusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Regular.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy5.ttf', name='Proxy 5', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Bold.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swsimp.ttf', name='SWSimp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\compi.ttf', name='CommercialPi BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscl.ttf', name='Swis721 LtCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Bold.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop3.ttf', name='SWIsop3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Bold.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Regular.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Light.ttf', name='Noto Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sansso__.ttf', name='SansSerif', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV50.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy6.ttf', name='Proxy 6', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV50.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV50.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Bold.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV25.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-BoldItalic.otf', name='Adobe Thai', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-BoldItalic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Regular.ttf', name='Artifakt Element', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV25.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Bold.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Bold.otf', name='David CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Regular.otf', name='Adobe Thai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Medium.otf', name='David CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV25.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscb.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3__.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Regular.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techl___.ttf', name='TechnicLite', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV50.ttf', name='AMGDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\myriadcad.otf', name='Myriad CAD', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobeheitistd-regular.otf', name='Adobe Heiti Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV25.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV25.ttf', name='GDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RB_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Regular.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothg.ttf', name='SWGothg', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasR.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swlink.ttf', name='SWLink', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV50.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_LtIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-MediumOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissko.ttf', name='Swis721 BlkOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Bold.ttf', name='Rubik', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmeteo.ttf', name='SWMeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AcadEref.ttf', name='AcadEref', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RI_G.ttf', name='Linux Biolinum G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgdt.ttf', name='SWGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Regular.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV25.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Bold.ttf', name='Reem Kufi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgrekc.ttf', name='SWGrekc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Regular.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Bold.ttf', name='Miriam CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV50.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ZWAdobeF.TTF', name='ZWAdobeF', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV50.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romanc__.ttf', name='RomanC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_____.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozminpr6n-regular.otf', name='Kozuka Mincho Pr6N', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Bold.otf', name='Miriam Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoMono-Regular.ttf', name='Noto Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-regular.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV25.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissci.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmath.ttf', name='SWMath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Bold.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV50.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurr____.ttf', name='EuroRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissb.ttf', name='Swis721 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\counb___.ttf', name='CountryBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Bold.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\vinet.ttf', name='Vineta BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV25.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchbi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV25.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Regular.ttf', name='Caladea', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-oblique.otf', name='Courier Std', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap___.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV25.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Italic.ttf', name='Amiri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV50.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2__.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Regular.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisseb.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=700, stretch='expanded', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZ_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic__.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-bold.otf', name='Courier Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV25.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Bold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Bold.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbi.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasBI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrps.ttf', name='SWScrps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy8.ttf', name='Proxy 8', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Regular.ttf', name='Carlito', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscli.ttf', name='Swis721 LtCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BookOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_BdIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Bold.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Bold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Light.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_It.ttf', name='HP Simplified', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy3.ttf', name='Proxy 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath__.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comsc.ttf', name='CommercialScript BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Bold.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Regular.ttf', name='Amiri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy7.ttf', name='Proxy 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeui.ttf', name='ISOCPEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\olfsimplesansoc-regular.ttf', name='OLF SimpleSansOC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV50.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Rg.ttf', name='HP Simplified', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteui.ttf', name='ISOCTEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmap.ttf', name='SWMap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbo.ttf', name='Swis721 BdOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissl.ttf', name='Swis721 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemingstd-light.otf', name='Adobe Ming Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swiss.ttf', name='Swis721 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscki.ttf', name='Swis721 BlkCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV25.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BoldOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-light.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssbo_.ttf', name='SansSerif', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissk.ttf', name='Swis721 Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common Italic.ttf', name='GOST Common', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Italic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV50.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-BoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV50.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Regular.ttf', name='Reem Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosb.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV25.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Bold.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Italic.ttf', name='Caladea', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozgopr6n-medium.otf', name='Kozuka Gothic Pr6N', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-BoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italicc_.ttf', name='ItalicC', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\opens___.ttf', name='OpenSymbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GENISO.ttf', name='GENISO', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swtxt.ttf', name='SWTxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold.ttf', name='Artifakt Element', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\supef___.ttf', name='SuperFrench', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2__.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy4.ttf', name='Proxy 4', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Bold.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobepistd.otf', name='Adobe Pi Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothi.ttf', name='SWGothi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Regular.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monos.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-BoldItalic.ttf', name='Rubik', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romant__.ttf', name='RomanT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnc.ttf', name='SWRomnc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Bold.ttf', name='Scheherazade', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swcomp.ttf', name='SWComp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Regular.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothicg_.ttf', name='GothicG', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasR.ttf', name='Gentium Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Bold.otf', name='Adobe Thai', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV25.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-BoldItalic.otf', name='David CLM', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuMathTeXGyre.ttf', name='DejaVu Math TeX Gyre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalc.ttf', name='SWItalc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV50.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissek.ttf', name='Swis721 BlkEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Bold.ttf', name='Alef', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrpc.ttf', name='SWScrpc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Italic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Book.ttf', name='Miriam CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Regular.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV25.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-boldoblique.otf', name='Courier Std', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop1.ttf', name='SWIsop1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-BoldOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-BoldItalic.ttf', name='Amiri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simhei.ttf', name='SimHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV25.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scriptc_.ttf', name='ScriptC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV25.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanss___.ttf', name='SansSerif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-BoldOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchb.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Bd.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Condensed.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissli.ttf', name='Swis721 Lt BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Regular.ttf', name='Scheherazade', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italict_.ttf', name='ItalicT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Regular.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasBI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Bold.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV25.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romand__.ttf', name='RomanD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy9.ttf', name='Proxy 9', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swastro.ttf', name='SWAstro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Bold.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy2.ttf', name='Proxy 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothm.ttf', name='BankGothic Md BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV50.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV50.ttf', name='GDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV50.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Italic.ttf', name='Carlito', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Regular.otf', name='Adobe Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothice_.ttf', name='GothicE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasB.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3__.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swital.ttf', name='SWItal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct___.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemyungjostd-medium.otf', name='Adobe Myungjo Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteur.ttf', name='ISOCTEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-BoldItalic.ttf', name='Caladea', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeGothicStd-Bold.otf', name='Adobe Gothic Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Bold.otf', name='Adobe Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV25.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeur.ttf', name='ISOCPEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Bold.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp___.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Bold.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMDT_Symbols.ttf', name='AmdtSymbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Light.ttf', name='Noto Serif', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssb__.ttf', name='SansSerif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-BoldItalic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks__.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothici_.ttf', name='GothicI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV50.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeFanHeitiStd-Bold.otf', name='Adobe Fan Heiti Std', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-LightItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-BoldItalic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-LightOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosbi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romai___.ttf', name='Romantic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AmiriQuran.ttf', name='Amiri Quran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissc.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RB_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-MediumItalic.otf', name='David CLM', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV25.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AIGDT___.TTF', name='AIGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisski.ttf', name='Swis721 Blk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgreks.ttf', name='SWGreks', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Regular.ttf', name='Alef', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Regular.otf', name='Miriam Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cityb___.ttf', name='CityBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnd.ttf', name='SWRomnd', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMGDT___.ttf', name='AMGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV25.ttf', name='AMGDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\panroman.ttf', name='PanRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Medium.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Italic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutcheb.ttf', name='Dutch801 XBd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\umath.ttf', name='UniversalMath1 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV50.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Italic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobesongstd-light.otf', name='Adobe Song Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Italic.ttf', name='Rubik', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Bold.ttf', name='Caladea', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc__.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\technic_.ttf', name='Technic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Bold.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromns.ttf', name='SWRomns', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Bold.ttf', name='Carlito', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot2.ttf', name='SWIsot2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hyswlongfangsong.ttf', name='HYSWLongFangSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\stylu.ttf', name='Stylus BT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisse.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common.ttf', name='GOST Common', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_R_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbo.ttf', name='Swis721 BdCnOul BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmono.ttf', name='SWMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romantic.ttf', name='Romantic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Regular.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Regular.ttf', name='Rubik', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Italic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV50.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_R_G.ttf', name='Linux Biolinum G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV25.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Bold.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Regular.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV50.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalt.ttf', name='SWItalt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-light.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romab___.ttf', name='Romantic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Lt.ttf', name='HP Simplified', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Condensed.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MinionPro-Regular.otf', name='Minion Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothe.ttf', name='SWGothe', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot1.ttf', name='SWIsot1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Regular.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MyriadPro-Regular.otf', name='Myriad Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd.otf', name='Courier Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Bold.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Bold.ttf', name='Amiri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArmenian-Regular.ttf', name='Noto Sans Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurro___.ttf', name='EuroRoman', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Book.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedhans-regular.ttf', name='HP Simplified Hans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-LightItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasB.ttf', name='Gentium Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnt.ttf', name='SWRomnt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\shellnormal.ttf', name='Shell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissel.ttf', name='Swis721 LtEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techb___.ttf', name='TechnicBold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy1.ttf', name='Proxy 1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RBI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Bold.ttf', name='David Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_DR_G.ttf', name='Linux Libertine Display G', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Regular.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans__.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Italic.otf', name='Adobe Thai', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot3.ttf', name='SWIsot3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Regular.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV50.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV50.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-BoldItalic.ttf', name='Carlito', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutch.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothl.ttf', name='BankGothic Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidLibre-Regular.ttf', name='David Libre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_____.ttf', name='GDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissck.ttf', name='Swis721 BlkCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop2.ttf', name='SWIsop2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Regular.ttf', name='Noto Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmusic.ttf', name='SWMusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Regular.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy5.ttf', name='Proxy 5', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-Bold.ttf', name='Frank Ruehl CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swsimp.ttf', name='SWSimp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\compi.ttf', name='CommercialPi BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscl.ttf', name='Swis721 LtCn BT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Bold.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop3.ttf', name='SWIsop3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Bold.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Regular.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Light.ttf', name='Noto Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sansso__.ttf', name='SansSerif', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV50.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy6.ttf', name='Proxy 6', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV50.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV50.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Bold.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_IV25.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-BoldItalic.otf', name='Adobe Thai', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-BoldItalic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Regular.ttf', name='Artifakt Element', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV25.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Bold.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Bold.otf', name='David CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Regular.otf', name='Adobe Thai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-Medium.otf', name='David CLM', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_IV25.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscb.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3__.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Regular.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\techl___.ttf', name='TechnicLite', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amgdt_IV50.ttf', name='AMGDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\myriadcad.otf', name='Myriad CAD', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobeheitistd-regular.otf', name='Adobe Heiti Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV25.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV25.ttf', name='GDT_IV25', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RB_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifGeorgian-Regular.ttf', name='Noto Serif Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothg.ttf', name='SWGothg', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasR.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swlink.ttf', name='SWLink', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV50.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosi.ttf', name='Monospac821 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_LtIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-MediumOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissko.ttf', name='Swis721 BlkOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-Bold.ttf', name='Rubik', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmeteo.ttf', name='SWMeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AcadEref.ttf', name='AcadEref', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinBiolinum_RI_G.ttf', name='Linux Biolinum G', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgdt.ttf', name='SWGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuhlHofshi-Regular.otf', name='Frank Ruhl Hofshi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2_IV25.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Bold.ttf', name='Reem Kufi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgrekc.ttf', name='SWGrekc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Regular.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Bold.ttf', name='Miriam CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV50.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ZWAdobeF.TTF', name='ZWAdobeF', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV50.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romanc__.ttf', name='RomanC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scripts_.ttf', name='ScriptS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_____.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozminpr6n-regular.otf', name='Kozuka Mincho Pr6N', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamLibre-Bold.otf', name='Miriam Libre', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoMono-Regular.ttf', name='Noto Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-regular.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp3_IV25.ttf', name='ISOCP3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissci.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmath.ttf', name='SWMath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifHebrew-Bold.ttf', name='Noto Serif Hebrew', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV50.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\eurr____.ttf', name='EuroRoman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissb.ttf', name='Swis721 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\counb___.ttf', name='CountryBlueprint', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Bold.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\vinet.ttf', name='Vineta BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV25.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchbi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simplex_IV25.ttf', name='Simplex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Regular.ttf', name='Caladea', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-oblique.otf', name='Courier Std', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap___.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct_IV25.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Italic.ttf', name='Amiri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV50.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2__.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Regular.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisseb.ttf', name='Swis721 Ex BT', style='normal', variant='normal', weight=700, stretch='expanded', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZ_G.ttf', name='Linux Libertine G', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic__.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-bold.otf', name='Courier Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romans_IV25.ttf', name='RomanS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Bold.ttf', name='Noto Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLao-Bold.ttf', name='Noto Sans Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscbi.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasBI.ttf', name='Gentium Book Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrps.ttf', name='SWScrps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy8.ttf', name='Proxy 8', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Regular.ttf', name='Carlito', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscli.ttf', name='Swis721 LtCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BookOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symusic_.ttf', name='Symusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_BdIt.ttf', name='HP Simplified', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchi.ttf', name='Dutch801 Rm BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoKufiArabic-Bold.ttf', name='Noto Kufi Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Bold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-Light.otf', name='Nachlieli CLM', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_It.ttf', name='HP Simplified', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy3.ttf', name='Proxy 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath__.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comsc.ttf', name='CommercialScript BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabic-Bold.ttf', name='Noto Sans Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-Regular.ttf', name='Amiri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy7.ttf', name='Proxy 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeui.ttf', name='ISOCPEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\olfsimplesansoc-regular.ttf', name='OLF SimpleSansOC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV50.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Rg.ttf', name='HP Simplified', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteui.ttf', name='ISOCTEUR', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmap.ttf', name='SWMap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissbo.ttf', name='Swis721 BdOul BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissl.ttf', name='Swis721 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemingstd-light.otf', name='Adobe Ming Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swiss.ttf', name='Swis721 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissi.ttf', name='Swis721 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisscki.ttf', name='Swis721 BlkCn BT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\complex_IV25.ttf', name='Complex', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-BoldOblique.ttf', name='Miriam Mono CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hpsimplifiedjpan-light.ttf', name='HP Simplified Jpan', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssbo_.ttf', name='SansSerif', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissk.ttf', name='Swis721 Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOST Common Italic.ttf', name='GOST Common', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Italic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp_IV50.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-BoldItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks_IV50.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ReemKufi-Regular.ttf', name='Reem Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monosb.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV25.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabicUI-Bold.ttf', name='Noto Naskh Arabic UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-Italic.ttf', name='Caladea', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozgopr6n-medium.otf', name='Kozuka Gothic Pr6N', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold Italic.ttf', name='Artifakt Element', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-BoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italicc_.ttf', name='ItalicC', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\opens___.ttf', name='OpenSymbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GENISO.ttf', name='GENISO', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swtxt.ttf', name='SWTxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Artifakt Element Bold.ttf', name='Artifakt Element', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\supef___.ttf', name='SuperFrench', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct2__.ttf', name='ISOCT2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy4.ttf', name='Proxy 4', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoNaskhArabic-Bold.ttf', name='Noto Naskh Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobepistd.otf', name='Adobe Pi Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothi.ttf', name='SWGothi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansArabicUI-Regular.ttf', name='Noto Sans Arabic UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monos.ttf', name='Monospac821 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-CondensedBold.ttf', name='Noto Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Rubik-BoldItalic.ttf', name='Rubik', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romant__.ttf', name='RomanT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnc.ttf', name='SWRomnc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Bold.ttf', name='Scheherazade', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swcomp.ttf', name='SWComp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifArmenian-Regular.ttf', name='Noto Serif Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-CondensedBoldItalic.ttf', name='Noto Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothicg_.ttf', name='GothicG', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasR.ttf', name='Gentium Basic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Bold.otf', name='Adobe Thai', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp2_IV25.ttf', name='ISOCP2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DavidCLM-BoldItalic.otf', name='David CLM', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuMathTeXGyre.ttf', name='DejaVu Math TeX Gyre', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalc.ttf', name='SWItalc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\syastro_IV50.ttf', name='Syastro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissek.ttf', name='Swis721 BlkEx BT', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Alef-Bold.ttf', name='Alef', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrpc.ttf', name='SWScrpc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Italic.ttf', name='Noto Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamCLM-Book.ttf', name='Miriam CLM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansHebrew-Regular.ttf', name='Noto Sans Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symap_IV25.ttf', name='Symap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-boldoblique.otf', name='Courier Std', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop1.ttf', name='SWIsop1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FrankRuehlCLM-BoldOblique.ttf', name='Frank Ruehl CLM', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Amiri-BoldItalic.ttf', name='Amiri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simhei.ttf', name='SimHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italic_IV25.ttf', name='Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LinLibertine_RZI_G.ttf', name='Linux Libertine G', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\scriptc_.ttf', name='ScriptC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symath_IV25.ttf', name='Symath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanss___.ttf', name='SansSerif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-BoldOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\dutchb.ttf', name='Dutch801 Rm BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HPSimplified_Bd.ttf', name='HP Simplified', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-Condensed.ttf', name='Noto Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swissli.ttf', name='Swis721 Lt BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Scheherazade-Regular.ttf', name='Scheherazade', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\italict_.ttf', name='ItalicT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Regular.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBasBI.ttf', name='Gentium Basic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MiriamMonoCLM-Bold.ttf', name='Miriam Mono CLM', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symeteo_IV25.ttf', name='Symeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\romand__.ttf', name='RomanD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy9.ttf', name='Proxy 9', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swastro.ttf', name='SWAstro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerifLao-Bold.ttf', name='Noto Serif Lao', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mtproxy2.ttf', name='Proxy 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bgothm.ttf', name='BankGothic Md BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greekc_IV50.ttf', name='GreekC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gdt_IV50.ttf', name='GDT_IV50', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monotxt_IV50.ttf', name='Monotxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Carlito-Italic.ttf', name='Carlito', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Regular.otf', name='Adobe Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothice_.ttf', name='GothicE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GenBkBasB.ttf', name='Gentium Book Basic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3__.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swital.ttf', name='SWItal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct___.ttf', name='ISOCT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemyungjostd-medium.otf', name='Adobe Myungjo Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocteur.ttf', name='ISOCTEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Caladea-BoldItalic.ttf', name='Caladea', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeGothicStd-Bold.otf', name='Adobe Gothic Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Bold.otf', name='Adobe Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isoct3_IV25.ttf', name='ISOCT3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocpeur.ttf', name='ISOCPEUR', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LiberationSansNarrow-Bold.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\isocp___.ttf', name='ISOCP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSansGeorgian-Bold.ttf', name='Noto Sans Georgian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AMDT_Symbols.ttf', name='AmdtSymbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSerif-Light.ttf', name='Noto Serif', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sanssb__.ttf', name='SansSerif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-BoldItalic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\greeks__.ttf', name='GreekS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gothici_.ttf', name='GothicI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\txt_IV50.ttf', name='Txt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeFanHeitiStd-Bold.otf', name='Adobe Fan Heiti Std', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NotoSans-LightItalic.ttf', name='Noto Sans', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Program Files\\SOLIDWORKS Corp\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-BoldItalic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NachlieliCLM-LightOblique.otf', name='Nachlieli CLM', style='oblique', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\vshls\\Documents\\SemantleProject\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:matplotlib.colorbar:locator: <matplotlib.ticker.AutoLocator object at 0x0000021BDD6F4FB0>
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:matplotlib.colorbar:locator: <matplotlib.ticker.AutoLocator object at 0x0000021BE32E2810>
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 1189
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 2994
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 696
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 526
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 499
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 673
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 922
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 568
DEBUG:PIL.PngImagePlugin:STREAM b'IHDR' 16 13
DEBUG:PIL.PngImagePlugin:STREAM b'sBIT' 41 4
DEBUG:PIL.PngImagePlugin:b'sBIT' 41 4 (unknown)
DEBUG:PIL.PngImagePlugin:STREAM b'pHYs' 57 9
DEBUG:PIL.PngImagePlugin:STREAM b'IDAT' 78 626
DEBUG:matplotlib.colorbar:locator: <matplotlib.ticker.AutoLocator object at 0x0000021BE4140950>
